
IoT_STT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6ec  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  0800d8b0  0800d8b0  0001d8b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfe8  0800dfe8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800dfe8  0800dfe8  0001dfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dff0  0800dff0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dff0  0800dff0  0001dff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dff4  0800dff4  0001dff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800dff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca4  200001dc  0800e1d4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e80  0800e1d4  00020e80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000239a6  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000041a2  00000000  00000000  00043bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a80  00000000  00000000  00047d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001858  00000000  00000000  000497d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003088f  00000000  00000000  0004b030  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017bdb  00000000  00000000  0007b8bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011ee43  00000000  00000000  0009349a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b22dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081bc  00000000  00000000  001b2358  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d894 	.word	0x0800d894

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	0800d894 	.word	0x0800d894

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fce:	4b29      	ldr	r3, [pc, #164]	; (8001074 <MX_ADC1_Init+0xbc>)
 8000fd0:	4a29      	ldr	r2, [pc, #164]	; (8001078 <MX_ADC1_Init+0xc0>)
 8000fd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fd4:	4b27      	ldr	r3, [pc, #156]	; (8001074 <MX_ADC1_Init+0xbc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <MX_ADC1_Init+0xbc>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe0:	4b24      	ldr	r3, [pc, #144]	; (8001074 <MX_ADC1_Init+0xbc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <MX_ADC1_Init+0xbc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <MX_ADC1_Init+0xbc>)
 8000fee:	2204      	movs	r2, #4
 8000ff0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <MX_ADC1_Init+0xbc>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <MX_ADC1_Init+0xbc>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <MX_ADC1_Init+0xbc>)
 8001000:	2201      	movs	r2, #1
 8001002:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <MX_ADC1_Init+0xbc>)
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <MX_ADC1_Init+0xbc>)
 800100e:	2200      	movs	r2, #0
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <MX_ADC1_Init+0xbc>)
 8001014:	2200      	movs	r2, #0
 8001016:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <MX_ADC1_Init+0xbc>)
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <MX_ADC1_Init+0xbc>)
 8001022:	2200      	movs	r2, #0
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <MX_ADC1_Init+0xbc>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102e:	4811      	ldr	r0, [pc, #68]	; (8001074 <MX_ADC1_Init+0xbc>)
 8001030:	f002 fbfe 	bl	8003830 <HAL_ADC_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800103a:	f000 fdbd 	bl	8001bb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_ADC1_Init+0xc4>)
 8001040:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001042:	2306      	movs	r3, #6
 8001044:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800104a:	237f      	movs	r3, #127	; 0x7f
 800104c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800104e:	2304      	movs	r3, #4
 8001050:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001056:	463b      	mov	r3, r7
 8001058:	4619      	mov	r1, r3
 800105a:	4806      	ldr	r0, [pc, #24]	; (8001074 <MX_ADC1_Init+0xbc>)
 800105c:	f002 fd32 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001066:	f000 fda7 	bl	8001bb8 <Error_Handler>
  }

}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000022c 	.word	0x2000022c
 8001078:	50040000 	.word	0x50040000
 800107c:	04300002 	.word	0x04300002

08001080 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <HAL_ADC_MspInit+0x74>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d123      	bne.n	80010ea <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_ADC_MspInit+0x78>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <HAL_ADC_MspInit+0x78>)
 80010a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_ADC_MspInit+0x78>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HAL_ADC_MspInit+0x78>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <HAL_ADC_MspInit+0x78>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <HAL_ADC_MspInit+0x78>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80010d2:	233f      	movs	r3, #63	; 0x3f
 80010d4:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010d6:	230b      	movs	r3, #11
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <HAL_ADC_MspInit+0x7c>)
 80010e6:	f003 fb95 	bl	8004814 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	50040000 	.word	0x50040000
 80010f8:	40021000 	.word	0x40021000
 80010fc:	48000800 	.word	0x48000800

08001100 <MX_DFSDM1_Init>:

DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0

  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001106:	4a19      	ldr	r2, [pc, #100]	; (800116c <MX_DFSDM1_Init+0x6c>)
 8001108:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_DFSDM1_Init+0x68>)
 800110c:	2201      	movs	r2, #1
 800110e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001118:	2202      	movs	r2, #2
 800111a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_DFSDM1_Init+0x68>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_DFSDM1_Init+0x68>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001130:	2200      	movs	r2, #0
 8001132:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001136:	2204      	movs	r2, #4
 8001138:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_DFSDM1_Init+0x68>)
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001142:	2201      	movs	r2, #1
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001148:	2200      	movs	r2, #0
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_DFSDM1_Init+0x68>)
 800114e:	2200      	movs	r2, #0
 8001150:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_DFSDM1_Init+0x68>)
 8001154:	f003 f9f2 	bl	800453c <HAL_DFSDM_ChannelInit>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800115e:	f000 fd2b 	bl	8001bb8 <Error_Handler>
  }

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000294 	.word	0x20000294
 800116c:	40016040 	.word	0x40016040

08001170 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <HAL_DFSDM_ChannelMspInit+0x84>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d12d      	bne.n	80011ec <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001194:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800119a:	6613      	str	r3, [r2, #96]	; 0x60
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_DFSDM_ChannelMspInit+0x88>)
 800119e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <HAL_DFSDM_ChannelMspInit+0x88>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ac:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <HAL_DFSDM_ChannelMspInit+0x88>)
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <HAL_DFSDM_ChannelMspInit+0x88>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80011c0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80011d2:	2306      	movs	r3, #6
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4807      	ldr	r0, [pc, #28]	; (80011fc <HAL_DFSDM_ChannelMspInit+0x8c>)
 80011de:	f003 fb19 	bl	8004814 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <HAL_DFSDM_ChannelMspInit+0x84>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	4a02      	ldr	r2, [pc, #8]	; (80011f4 <HAL_DFSDM_ChannelMspInit+0x84>)
 80011ea:	6013      	str	r3, [r2, #0]
  }
}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	; 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001f8 	.word	0x200001f8
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48001000 	.word	0x48001000

08001200 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	; 0x30
 8001204:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001216:	4b98      	ldr	r3, [pc, #608]	; (8001478 <MX_GPIO_Init+0x278>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4a97      	ldr	r2, [pc, #604]	; (8001478 <MX_GPIO_Init+0x278>)
 800121c:	f043 0310 	orr.w	r3, r3, #16
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4b95      	ldr	r3, [pc, #596]	; (8001478 <MX_GPIO_Init+0x278>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	4b92      	ldr	r3, [pc, #584]	; (8001478 <MX_GPIO_Init+0x278>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4a91      	ldr	r2, [pc, #580]	; (8001478 <MX_GPIO_Init+0x278>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b8f      	ldr	r3, [pc, #572]	; (8001478 <MX_GPIO_Init+0x278>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001246:	4b8c      	ldr	r3, [pc, #560]	; (8001478 <MX_GPIO_Init+0x278>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a8b      	ldr	r2, [pc, #556]	; (8001478 <MX_GPIO_Init+0x278>)
 800124c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b89      	ldr	r3, [pc, #548]	; (8001478 <MX_GPIO_Init+0x278>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b86      	ldr	r3, [pc, #536]	; (8001478 <MX_GPIO_Init+0x278>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a85      	ldr	r2, [pc, #532]	; (8001478 <MX_GPIO_Init+0x278>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b83      	ldr	r3, [pc, #524]	; (8001478 <MX_GPIO_Init+0x278>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	4b80      	ldr	r3, [pc, #512]	; (8001478 <MX_GPIO_Init+0x278>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a7f      	ldr	r2, [pc, #508]	; (8001478 <MX_GPIO_Init+0x278>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b7d      	ldr	r3, [pc, #500]	; (8001478 <MX_GPIO_Init+0x278>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	4b7a      	ldr	r3, [pc, #488]	; (8001478 <MX_GPIO_Init+0x278>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a79      	ldr	r2, [pc, #484]	; (8001478 <MX_GPIO_Init+0x278>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b77      	ldr	r3, [pc, #476]	; (8001478 <MX_GPIO_Init+0x278>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|WIFI_CS_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f240 1105 	movw	r1, #261	; 0x105
 80012ac:	4873      	ldr	r0, [pc, #460]	; (800147c <MX_GPIO_Init+0x27c>)
 80012ae:	f003 fd4d 	bl	8004d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80012b2:	2200      	movs	r2, #0
 80012b4:	f248 111c 	movw	r1, #33052	; 0x811c
 80012b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012bc:	f003 fd46 	bl	8004d4c <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|WIFI_BOOT0_Pin|WIFI_WAKEUP_Pin|LED2_GREEN_Pin
 80012c0:	2200      	movs	r2, #0
 80012c2:	f24f 0134 	movw	r1, #61492	; 0xf034
 80012c6:	486e      	ldr	r0, [pc, #440]	; (8001480 <MX_GPIO_Init+0x280>)
 80012c8:	f003 fd40 	bl	8004d4c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f242 0183 	movw	r1, #8323	; 0x2083
 80012d2:	486c      	ldr	r0, [pc, #432]	; (8001484 <MX_GPIO_Init+0x284>)
 80012d4:	f003 fd3a 	bl	8004d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 7110 	mov.w	r1, #576	; 0x240
 80012de:	486a      	ldr	r0, [pc, #424]	; (8001488 <MX_GPIO_Init+0x288>)
 80012e0:	f003 fd34 	bl	8004d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|WIFI_CS_Pin;
 80012e4:	f240 1305 	movw	r3, #261	; 0x105
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	485f      	ldr	r0, [pc, #380]	; (800147c <MX_GPIO_Init+0x27c>)
 80012fe:	f003 fa89 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8001302:	237a      	movs	r3, #122	; 0x7a
 8001304:	61fb      	str	r3, [r7, #28]
                          |WIFI_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001306:	4b61      	ldr	r3, [pc, #388]	; (800148c <MX_GPIO_Init+0x28c>)
 8001308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	4859      	ldr	r0, [pc, #356]	; (800147c <MX_GPIO_Init+0x27c>)
 8001316:	f003 fa7d 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800131a:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001320:	4b5a      	ldr	r3, [pc, #360]	; (800148c <MX_GPIO_Init+0x28c>)
 8001322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	4856      	ldr	r0, [pc, #344]	; (8001488 <MX_GPIO_Init+0x288>)
 8001330:	f003 fa70 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001334:	f248 131c 	movw	r3, #33052	; 0x811c
 8001338:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f003 fa60 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001354:	2301      	movs	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001358:	4b4c      	ldr	r3, [pc, #304]	; (800148c <MX_GPIO_Init+0x28c>)
 800135a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4846      	ldr	r0, [pc, #280]	; (8001480 <MX_GPIO_Init+0x280>)
 8001368:	f003 fa54 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800136c:	2302      	movs	r3, #2
 800136e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800137c:	2302      	movs	r3, #2
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	483e      	ldr	r0, [pc, #248]	; (8001480 <MX_GPIO_Init+0x280>)
 8001388:	f003 fa44 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|WIFI_BOOT0_Pin|WIFI_WAKEUP_Pin|LED2_GREEN_Pin
 800138c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001390:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	4836      	ldr	r0, [pc, #216]	; (8001480 <MX_GPIO_Init+0x280>)
 80013a6:	f003 fa35 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 80013aa:	f64d 4304 	movw	r3, #56324	; 0xdc04
 80013ae:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b0:	4b36      	ldr	r3, [pc, #216]	; (800148c <MX_GPIO_Init+0x28c>)
 80013b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	4831      	ldr	r0, [pc, #196]	; (8001484 <MX_GPIO_Init+0x284>)
 80013c0:	f003 fa28 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 80013c4:	f242 0383 	movw	r3, #8323	; 0x2083
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	4829      	ldr	r0, [pc, #164]	; (8001484 <MX_GPIO_Init+0x284>)
 80013de:	f003 fa19 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80013e2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80013e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	4619      	mov	r1, r3
 80013fa:	4823      	ldr	r0, [pc, #140]	; (8001488 <MX_GPIO_Init+0x288>)
 80013fc:	f003 fa0a 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001400:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f003 f9fc 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800141c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800142e:	230a      	movs	r3, #10
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143c:	f003 f9ea 	bl	8004814 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 13, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	210d      	movs	r1, #13
 8001444:	2007      	movs	r0, #7
 8001446:	f003 f834 	bl	80044b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800144a:	2007      	movs	r0, #7
 800144c:	f003 f84d 	bl	80044ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	2017      	movs	r0, #23
 8001456:	f003 f82c 	bl	80044b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800145a:	2017      	movs	r0, #23
 800145c:	f003 f845 	bl	80044ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	2028      	movs	r0, #40	; 0x28
 8001466:	f003 f824 	bl	80044b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800146a:	2028      	movs	r0, #40	; 0x28
 800146c:	f003 f83d 	bl	80044ea <HAL_NVIC_EnableIRQ>

}
 8001470:	bf00      	nop
 8001472:	3730      	adds	r7, #48	; 0x30
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	48001000 	.word	0x48001000
 8001480:	48000400 	.word	0x48000400
 8001484:	48000c00 	.word	0x48000c00
 8001488:	48000800 	.word	0x48000800
 800148c:	10110000 	.word	0x10110000

08001490 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_I2C1_Init+0x74>)
 8001496:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <MX_I2C1_Init+0x78>)
 8001498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_I2C1_Init+0x74>)
 800149c:	4a1b      	ldr	r2, [pc, #108]	; (800150c <MX_I2C1_Init+0x7c>)
 800149e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_I2C1_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <MX_I2C1_Init+0x74>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <MX_I2C1_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_I2C1_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_I2C1_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_I2C1_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_I2C1_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ca:	480e      	ldr	r0, [pc, #56]	; (8001504 <MX_I2C1_Init+0x74>)
 80014cc:	f003 fc88 	bl	8004de0 <HAL_I2C_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014d6:	f000 fb6f 	bl	8001bb8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014da:	2100      	movs	r1, #0
 80014dc:	4809      	ldr	r0, [pc, #36]	; (8001504 <MX_I2C1_Init+0x74>)
 80014de:	f003 fd0e 	bl	8004efe <HAL_I2CEx_ConfigAnalogFilter>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014e8:	f000 fb66 	bl	8001bb8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014ec:	2100      	movs	r1, #0
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_I2C1_Init+0x74>)
 80014f0:	f003 fd50 	bl	8004f94 <HAL_I2CEx_ConfigDigitalFilter>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014fa:	f000 fb5d 	bl	8001bb8 <Error_Handler>
  }

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200002cc 	.word	0x200002cc
 8001508:	40005400 	.word	0x40005400
 800150c:	307075b1 	.word	0x307075b1

08001510 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <MX_I2C2_Init+0x74>)
 8001516:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <MX_I2C2_Init+0x78>)
 8001518:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <MX_I2C2_Init+0x74>)
 800151c:	4a1b      	ldr	r2, [pc, #108]	; (800158c <MX_I2C2_Init+0x7c>)
 800151e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <MX_I2C2_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <MX_I2C2_Init+0x74>)
 8001528:	2201      	movs	r2, #1
 800152a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <MX_I2C2_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_I2C2_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <MX_I2C2_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_I2C2_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_I2C2_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800154a:	480e      	ldr	r0, [pc, #56]	; (8001584 <MX_I2C2_Init+0x74>)
 800154c:	f003 fc48 	bl	8004de0 <HAL_I2C_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001556:	f000 fb2f 	bl	8001bb8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800155a:	2100      	movs	r1, #0
 800155c:	4809      	ldr	r0, [pc, #36]	; (8001584 <MX_I2C2_Init+0x74>)
 800155e:	f003 fcce 	bl	8004efe <HAL_I2CEx_ConfigAnalogFilter>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001568:	f000 fb26 	bl	8001bb8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_I2C2_Init+0x74>)
 8001570:	f003 fd10 	bl	8004f94 <HAL_I2CEx_ConfigDigitalFilter>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800157a:	f000 fb1d 	bl	8001bb8 <Error_Handler>
  }

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000318 	.word	0x20000318
 8001588:	40005800 	.word	0x40005800
 800158c:	307075b1 	.word	0x307075b1

08001590 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08c      	sub	sp, #48	; 0x30
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a2f      	ldr	r2, [pc, #188]	; (800166c <HAL_I2C_MspInit+0xdc>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d129      	bne.n	8001606 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <HAL_I2C_MspInit+0xe0>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	4a2e      	ldr	r2, [pc, #184]	; (8001670 <HAL_I2C_MspInit+0xe0>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015be:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <HAL_I2C_MspInit+0xe0>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80015ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d0:	2312      	movs	r3, #18
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015dc:	2304      	movs	r3, #4
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	4823      	ldr	r0, [pc, #140]	; (8001674 <HAL_I2C_MspInit+0xe4>)
 80015e8:	f003 f914 	bl	8004814 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ec:	4b20      	ldr	r3, [pc, #128]	; (8001670 <HAL_I2C_MspInit+0xe0>)
 80015ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f0:	4a1f      	ldr	r2, [pc, #124]	; (8001670 <HAL_I2C_MspInit+0xe0>)
 80015f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015f6:	6593      	str	r3, [r2, #88]	; 0x58
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <HAL_I2C_MspInit+0xe0>)
 80015fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001604:	e02d      	b.n	8001662 <HAL_I2C_MspInit+0xd2>
  else if(i2cHandle->Instance==I2C2)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <HAL_I2C_MspInit+0xe8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d128      	bne.n	8001662 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_I2C_MspInit+0xe0>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001614:	4a16      	ldr	r2, [pc, #88]	; (8001670 <HAL_I2C_MspInit+0xe0>)
 8001616:	f043 0302 	orr.w	r3, r3, #2
 800161a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_I2C_MspInit+0xe0>)
 800161e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001628:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800162c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162e:	2312      	movs	r3, #18
 8001630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001632:	2301      	movs	r3, #1
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800163a:	2304      	movs	r3, #4
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	480b      	ldr	r0, [pc, #44]	; (8001674 <HAL_I2C_MspInit+0xe4>)
 8001646:	f003 f8e5 	bl	8004814 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_I2C_MspInit+0xe0>)
 800164c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_I2C_MspInit+0xe0>)
 8001650:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001654:	6593      	str	r3, [r2, #88]	; 0x58
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_I2C_MspInit+0xe0>)
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
}
 8001662:	bf00      	nop
 8001664:	3730      	adds	r7, #48	; 0x30
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40005400 	.word	0x40005400
 8001670:	40021000 	.word	0x40021000
 8001674:	48000400 	.word	0x48000400
 8001678:	40005800 	.word	0x40005800

0800167c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b0a      	cmp	r3, #10
 8001688:	d10a      	bne.n	80016a0 <__io_putchar+0x24>
	{
		uint8_t send_data[2] = {'\r','\n'};
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <__io_putchar+0x44>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, send_data, 2, 1);
 8001690:	f107 010c 	add.w	r1, r7, #12
 8001694:	2301      	movs	r3, #1
 8001696:	2202      	movs	r2, #2
 8001698:	480a      	ldr	r0, [pc, #40]	; (80016c4 <__io_putchar+0x48>)
 800169a:	f006 ff41 	bl	8008520 <HAL_UART_Transmit>
 800169e:	e00a      	b.n	80016b6 <__io_putchar+0x3a>
	}
	else
	{
		while (HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) & ch, 1, 30000))
 80016a0:	bf00      	nop
 80016a2:	1d39      	adds	r1, r7, #4
 80016a4:	f247 5330 	movw	r3, #30000	; 0x7530
 80016a8:	2201      	movs	r2, #1
 80016aa:	4806      	ldr	r0, [pc, #24]	; (80016c4 <__io_putchar+0x48>)
 80016ac:	f006 ff38 	bl	8008520 <HAL_UART_Transmit>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f5      	bne.n	80016a2 <__io_putchar+0x26>
		{

		}
	}
	return ch;
 80016b6:	687b      	ldr	r3, [r7, #4]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	0800d8b0 	.word	0x0800d8b0
 80016c4:	20000508 	.word	0x20000508

080016c8 <_read>:
//  }
//  return ch;
//}

int _read(int32_t file, uint8_t *result, int32_t len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;
    int retcode = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]

    if (len != 0) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d012      	beq.n	8001704 <_read+0x3c>
        status = HAL_UART_Receive( &huart1, (uint8_t *) result, len, HAL_MAX_DELAY);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	4809      	ldr	r0, [pc, #36]	; (8001710 <_read+0x48>)
 80016ea:	f006 ffb0 	bl	800864e <HAL_UART_Receive>
 80016ee:	4603      	mov	r3, r0
 80016f0:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK) {
 80016f2:	7cfb      	ldrb	r3, [r7, #19]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <_read+0x36>
            retcode = len;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	e002      	b.n	8001704 <_read+0x3c>
        } else {
            retcode = -1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	617b      	str	r3, [r7, #20]
        }
    }
    return(retcode);
 8001704:	697b      	ldr	r3, [r7, #20]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000508 	.word	0x20000508

08001714 <Nextion_Send_String>:

void Nextion_Send_String(char *Id, char *String)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b092      	sub	sp, #72	; 0x48
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
	uint8_t Cmd_End[3] = { 0xFF, 0xFF, 0xFF};
 800171e:	4a16      	ldr	r2, [pc, #88]	; (8001778 <Nextion_Send_String+0x64>)
 8001720:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	4611      	mov	r1, r2
 8001728:	8019      	strh	r1, [r3, #0]
 800172a:	3302      	adds	r3, #2
 800172c:	0c12      	lsrs	r2, r2, #16
 800172e:	701a      	strb	r2, [r3, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%s\"", Id, String);
 8001730:	f107 000c 	add.w	r0, r7, #12
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	4910      	ldr	r1, [pc, #64]	; (800177c <Nextion_Send_String+0x68>)
 800173a:	f008 fcb5 	bl	800a0a8 <siprintf>
 800173e:	6478      	str	r0, [r7, #68]	; 0x44
	printf("Stringr=%s\n", buf);
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4619      	mov	r1, r3
 8001746:	480e      	ldr	r0, [pc, #56]	; (8001780 <Nextion_Send_String+0x6c>)
 8001748:	f008 fc2c 	bl	8009fa4 <iprintf>
	HAL_UART_Transmit(&huart4, (uint8_t *)buf, len, 1000);
 800174c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800174e:	b29a      	uxth	r2, r3
 8001750:	f107 010c 	add.w	r1, r7, #12
 8001754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001758:	480a      	ldr	r0, [pc, #40]	; (8001784 <Nextion_Send_String+0x70>)
 800175a:	f006 fee1 	bl	8008520 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, Cmd_End, sizeof(Cmd_End), 1000);
 800175e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	2203      	movs	r2, #3
 8001768:	4806      	ldr	r0, [pc, #24]	; (8001784 <Nextion_Send_String+0x70>)
 800176a:	f006 fed9 	bl	8008520 <HAL_UART_Transmit>
}
 800176e:	bf00      	nop
 8001770:	3748      	adds	r7, #72	; 0x48
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	0800d8cc 	.word	0x0800d8cc
 800177c:	0800d8b4 	.word	0x0800d8b4
 8001780:	0800d8c0 	.word	0x0800d8c0
 8001784:	20000594 	.word	0x20000594

08001788 <Nextion_Send_Number>:

void Nextion_Send_Number(char *Id, int no)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b092      	sub	sp, #72	; 0x48
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
	uint8_t Cmd_End[3] = { 0xFF, 0xFF, 0xFF};
 8001792:	4a16      	ldr	r2, [pc, #88]	; (80017ec <Nextion_Send_Number+0x64>)
 8001794:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	4611      	mov	r1, r2
 800179c:	8019      	strh	r1, [r3, #0]
 800179e:	3302      	adds	r3, #2
 80017a0:	0c12      	lsrs	r2, r2, #16
 80017a2:	701a      	strb	r2, [r3, #0]
	char buf[50];
	int len = sprintf(buf, "%s.val=%d", Id, no);
 80017a4:	f107 000c 	add.w	r0, r7, #12
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4910      	ldr	r1, [pc, #64]	; (80017f0 <Nextion_Send_Number+0x68>)
 80017ae:	f008 fc7b 	bl	800a0a8 <siprintf>
 80017b2:	6478      	str	r0, [r7, #68]	; 0x44
	printf("Number=%s\n", buf);
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	4619      	mov	r1, r3
 80017ba:	480e      	ldr	r0, [pc, #56]	; (80017f4 <Nextion_Send_Number+0x6c>)
 80017bc:	f008 fbf2 	bl	8009fa4 <iprintf>
	HAL_UART_Transmit(&huart4, (uint8_t *)buf, len, 1000);
 80017c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	f107 010c 	add.w	r1, r7, #12
 80017c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017cc:	480a      	ldr	r0, [pc, #40]	; (80017f8 <Nextion_Send_Number+0x70>)
 80017ce:	f006 fea7 	bl	8008520 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, Cmd_End, sizeof(Cmd_End), 1000);
 80017d2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	2203      	movs	r2, #3
 80017dc:	4806      	ldr	r0, [pc, #24]	; (80017f8 <Nextion_Send_Number+0x70>)
 80017de:	f006 fe9f 	bl	8008520 <HAL_UART_Transmit>
}
 80017e2:	bf00      	nop
 80017e4:	3748      	adds	r7, #72	; 0x48
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	0800d8cc 	.word	0x0800d8cc
 80017f0:	0800d8d0 	.word	0x0800d8d0
 80017f4:	0800d8dc 	.word	0x0800d8dc
 80017f8:	20000594 	.word	0x20000594

080017fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017fc:	b5b0      	push	{r4, r5, r7, lr}
 80017fe:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
 8001802:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	char *SSID = "jmkim";
 8001804:	4b7a      	ldr	r3, [pc, #488]	; (80019f0 <main+0x1f4>)
 8001806:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
	char *PASSWD = "qaz12345";
 800180a:	4b7a      	ldr	r3, [pc, #488]	; (80019f4 <main+0x1f8>)
 800180c:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
    char req_data[BUF_SZ];
#ifdef THINGSPARK
    uint16_t sent_data_len = 0;
	float field1, field2;
#endif
	int count = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001816:	f001 fdd5 	bl	80033c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800181a:	f000 f909 	bl	8001a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800181e:	f7ff fcef 	bl	8001200 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001822:	f7ff fbc9 	bl	8000fb8 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8001826:	f7ff fc6b 	bl	8001100 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 800182a:	f7ff fe31 	bl	8001490 <MX_I2C1_Init>
  MX_I2C2_Init();
 800182e:	f7ff fe6f 	bl	8001510 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8001832:	f000 f9c5 	bl	8001bc0 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8001836:	f000 fa69 	bl	8001d0c <MX_SPI1_Init>
  MX_SPI3_Init();
 800183a:	f000 faa5 	bl	8001d88 <MX_SPI3_Init>
  MX_UART4_Init();
 800183e:	f000 fcdb 	bl	80021f8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001842:	f000 fd25 	bl	8002290 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001846:	f000 fd6f 	bl	8002328 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800184a:	f000 fdbb 	bl	80023c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800184e:	f000 fedd 	bl	800260c <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  printf("WIFI Init ...\n");
 8001852:	4869      	ldr	r0, [pc, #420]	; (80019f8 <main+0x1fc>)
 8001854:	f008 fc1a 	bl	800a08c <puts>
      WIFI_Status_t ret = WIFI_Init();
 8001858:	f001 fd34 	bl	80032c4 <WIFI_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
      if (ret != WIFI_STATUS_OK) {
 8001862:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 8001866:	2b00      	cmp	r3, #0
 8001868:	d005      	beq.n	8001876 <main+0x7a>
        printf("Failed to initialize Wi-Fi [%d]\n", ret);
 800186a:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 800186e:	4619      	mov	r1, r3
 8001870:	4862      	ldr	r0, [pc, #392]	; (80019fc <main+0x200>)
 8001872:	f008 fb97 	bl	8009fa4 <iprintf>
      }
      uint8_t  MAC_Addr[6];
      if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8001876:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800187a:	4618      	mov	r0, r3
 800187c:	f001 fd70 	bl	8003360 <WIFI_GetMAC_Address>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d120      	bne.n	80018c8 <main+0xcc>
      {
      	printf("WIFI MAC Address : %X:%X:%X:%X:%X:%X\n",
      	MAC_Addr[0], MAC_Addr[1], MAC_Addr[2],
 8001886:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800188a:	781b      	ldrb	r3, [r3, #0]
      	printf("WIFI MAC Address : %X:%X:%X:%X:%X:%X\n",
 800188c:	4618      	mov	r0, r3
      	MAC_Addr[0], MAC_Addr[1], MAC_Addr[2],
 800188e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001892:	785b      	ldrb	r3, [r3, #1]
      	printf("WIFI MAC Address : %X:%X:%X:%X:%X:%X\n",
 8001894:	461c      	mov	r4, r3
      	MAC_Addr[0], MAC_Addr[1], MAC_Addr[2],
 8001896:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800189a:	789b      	ldrb	r3, [r3, #2]
      	printf("WIFI MAC Address : %X:%X:%X:%X:%X:%X\n",
 800189c:	461d      	mov	r5, r3
      	MAC_Addr[3], MAC_Addr[4], MAC_Addr[5]);
 800189e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018a2:	78db      	ldrb	r3, [r3, #3]
      	printf("WIFI MAC Address : %X:%X:%X:%X:%X:%X\n",
 80018a4:	461a      	mov	r2, r3
      	MAC_Addr[3], MAC_Addr[4], MAC_Addr[5]);
 80018a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018aa:	791b      	ldrb	r3, [r3, #4]
      	printf("WIFI MAC Address : %X:%X:%X:%X:%X:%X\n",
 80018ac:	4619      	mov	r1, r3
      	MAC_Addr[3], MAC_Addr[4], MAC_Addr[5]);
 80018ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018b2:	795b      	ldrb	r3, [r3, #5]
      	printf("WIFI MAC Address : %X:%X:%X:%X:%X:%X\n",
 80018b4:	9302      	str	r3, [sp, #8]
 80018b6:	9101      	str	r1, [sp, #4]
 80018b8:	9200      	str	r2, [sp, #0]
 80018ba:	462b      	mov	r3, r5
 80018bc:	4622      	mov	r2, r4
 80018be:	4601      	mov	r1, r0
 80018c0:	484f      	ldr	r0, [pc, #316]	; (8001a00 <main+0x204>)
 80018c2:	f008 fb6f 	bl	8009fa4 <iprintf>
 80018c6:	e002      	b.n	80018ce <main+0xd2>
      }
      else
      {
      	printf("> ERROR : CANNOT get MAC address\r\n");
 80018c8:	484e      	ldr	r0, [pc, #312]	; (8001a04 <main+0x208>)
 80018ca:	f008 fbdf 	bl	800a08c <puts>
      }

      printf("WIFI Connect to %s ...\n", SSID);
 80018ce:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 80018d2:	484d      	ldr	r0, [pc, #308]	; (8001a08 <main+0x20c>)
 80018d4:	f008 fb66 	bl	8009fa4 <iprintf>
      ret = WIFI_Connect(SSID, PASSWD, WIFI_ECN_WPA2_PSK);
 80018d8:	2203      	movs	r2, #3
 80018da:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 80018de:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 80018e2:	f001 fd1b 	bl	800331c <WIFI_Connect>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
      if (ret != WIFI_STATUS_OK)
 80018ec:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <main+0x104>
      {
        printf("Failed to connect AP [%d]\n", ret);
 80018f4:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 80018f8:	4619      	mov	r1, r3
 80018fa:	4844      	ldr	r0, [pc, #272]	; (8001a0c <main+0x210>)
 80018fc:	f008 fb52 	bl	8009fa4 <iprintf>
      }


      uint8_t IP_Addr[4];
      if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8001900:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001904:	4618      	mov	r0, r3
 8001906:	f001 fd41 	bl	800338c <WIFI_GetIP_Address>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d13b      	bne.n	8001988 <main+0x18c>
      {
        printf("WIFI IP Address : %d.%d.%d.%d\n",
        IP_Addr[0], IP_Addr[1],	IP_Addr[2], IP_Addr[3]);
 8001910:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001914:	781b      	ldrb	r3, [r3, #0]
        printf("WIFI IP Address : %d.%d.%d.%d\n",
 8001916:	4619      	mov	r1, r3
        IP_Addr[0], IP_Addr[1],	IP_Addr[2], IP_Addr[3]);
 8001918:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800191c:	785b      	ldrb	r3, [r3, #1]
        printf("WIFI IP Address : %d.%d.%d.%d\n",
 800191e:	461a      	mov	r2, r3
        IP_Addr[0], IP_Addr[1],	IP_Addr[2], IP_Addr[3]);
 8001920:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001924:	789b      	ldrb	r3, [r3, #2]
        printf("WIFI IP Address : %d.%d.%d.%d\n",
 8001926:	4618      	mov	r0, r3
        IP_Addr[0], IP_Addr[1],	IP_Addr[2], IP_Addr[3]);
 8001928:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800192c:	78db      	ldrb	r3, [r3, #3]
        printf("WIFI IP Address : %d.%d.%d.%d\n",
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	4603      	mov	r3, r0
 8001932:	4837      	ldr	r0, [pc, #220]	; (8001a10 <main+0x214>)
 8001934:	f008 fb36 	bl	8009fa4 <iprintf>
        sprintf(req_data, "WIFI IP Address : %d.%d.%d.%d",
                IP_Addr[0], IP_Addr[1],	IP_Addr[2], IP_Addr[3]);
 8001938:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800193c:	781b      	ldrb	r3, [r3, #0]
        sprintf(req_data, "WIFI IP Address : %d.%d.%d.%d",
 800193e:	4619      	mov	r1, r3
                IP_Addr[0], IP_Addr[1],	IP_Addr[2], IP_Addr[3]);
 8001940:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001944:	785b      	ldrb	r3, [r3, #1]
        sprintf(req_data, "WIFI IP Address : %d.%d.%d.%d",
 8001946:	461c      	mov	r4, r3
                IP_Addr[0], IP_Addr[1],	IP_Addr[2], IP_Addr[3]);
 8001948:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800194c:	789b      	ldrb	r3, [r3, #2]
        sprintf(req_data, "WIFI IP Address : %d.%d.%d.%d",
 800194e:	461a      	mov	r2, r3
                IP_Addr[0], IP_Addr[1],	IP_Addr[2], IP_Addr[3]);
 8001950:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001954:	78db      	ldrb	r3, [r3, #3]
        sprintf(req_data, "WIFI IP Address : %d.%d.%d.%d",
 8001956:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	9200      	str	r2, [sp, #0]
 800195e:	4623      	mov	r3, r4
 8001960:	460a      	mov	r2, r1
 8001962:	492c      	ldr	r1, [pc, #176]	; (8001a14 <main+0x218>)
 8001964:	f008 fba0 	bl	800a0a8 <siprintf>
        Nextion_Send_String("t1", req_data);
 8001968:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800196c:	4619      	mov	r1, r3
 800196e:	482a      	ldr	r0, [pc, #168]	; (8001a18 <main+0x21c>)
 8001970:	f7ff fed0 	bl	8001714 <Nextion_Send_String>
        printf("send WIFI IP Address : %s\n", req_data);
 8001974:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001978:	4619      	mov	r1, r3
 800197a:	4828      	ldr	r0, [pc, #160]	; (8001a1c <main+0x220>)
 800197c:	f008 fb12 	bl	8009fa4 <iprintf>
        HAL_Delay(1000);
 8001980:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001984:	f001 fd92 	bl	80034ac <HAL_Delay>
      }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf("Connect to thinspark\n");
 8001988:	4825      	ldr	r0, [pc, #148]	; (8001a20 <main+0x224>)
 800198a:	f008 fb7f 	bl	800a08c <puts>
	bzero(req_data, BUF_SZ);
 800198e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001992:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001996:	4618      	mov	r0, r3
 8001998:	f007 fc84 	bl	80092a4 <bzero>
//	  HAL_GPIO_TogglePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin);
//	  HAL_Delay(1000);

// THINGSPARK
//	field1 = (float) HAL_GetTick();
	printf("count = %d\n", ++count);
 800199c:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80019a0:	3301      	adds	r3, #1
 80019a2:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 80019a6:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 80019aa:	481e      	ldr	r0, [pc, #120]	; (8001a24 <main+0x228>)
 80019ac:	f008 fafa 	bl	8009fa4 <iprintf>
	Nextion_Send_Number("n0", count);
 80019b0:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 80019b4:	481c      	ldr	r0, [pc, #112]	; (8001a28 <main+0x22c>)
 80019b6:	f7ff fee7 	bl	8001788 <Nextion_Send_Number>
	HAL_Delay(1000);
 80019ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019be:	f001 fd75 	bl	80034ac <HAL_Delay>
	sprintf(sbuf, "Try %6ld", HAL_GetTick()); //
 80019c2:	f001 fd67 	bl	8003494 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	463b      	mov	r3, r7
 80019ca:	4918      	ldr	r1, [pc, #96]	; (8001a2c <main+0x230>)
 80019cc:	4618      	mov	r0, r3
 80019ce:	f008 fb6b 	bl	800a0a8 <siprintf>
	printf("%s\n", sbuf);
 80019d2:	463b      	mov	r3, r7
 80019d4:	4618      	mov	r0, r3
 80019d6:	f008 fb59 	bl	800a08c <puts>
	Nextion_Send_String("t1", sbuf);
 80019da:	463b      	mov	r3, r7
 80019dc:	4619      	mov	r1, r3
 80019de:	480e      	ldr	r0, [pc, #56]	; (8001a18 <main+0x21c>)
 80019e0:	f7ff fe98 	bl	8001714 <Nextion_Send_String>
	HAL_Delay(1000);
 80019e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019e8:	f001 fd60 	bl	80034ac <HAL_Delay>
  {
 80019ec:	e7d6      	b.n	800199c <main+0x1a0>
 80019ee:	bf00      	nop
 80019f0:	0800d8e8 	.word	0x0800d8e8
 80019f4:	0800d8f0 	.word	0x0800d8f0
 80019f8:	0800d8fc 	.word	0x0800d8fc
 80019fc:	0800d90c 	.word	0x0800d90c
 8001a00:	0800d930 	.word	0x0800d930
 8001a04:	0800d958 	.word	0x0800d958
 8001a08:	0800d97c 	.word	0x0800d97c
 8001a0c:	0800d994 	.word	0x0800d994
 8001a10:	0800d9b0 	.word	0x0800d9b0
 8001a14:	0800d9d0 	.word	0x0800d9d0
 8001a18:	0800d9f0 	.word	0x0800d9f0
 8001a1c:	0800d9f4 	.word	0x0800d9f4
 8001a20:	0800da10 	.word	0x0800da10
 8001a24:	0800da28 	.word	0x0800da28
 8001a28:	0800da34 	.word	0x0800da34
 8001a2c:	0800da38 	.word	0x0800da38

08001a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b0bc      	sub	sp, #240	; 0xf0
 8001a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a3a:	2244      	movs	r2, #68	; 0x44
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f007 fc69 	bl	8009316 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a44:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	2294      	movs	r2, #148	; 0x94
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f007 fc5b 	bl	8009316 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001a60:	2000      	movs	r0, #0
 8001a62:	f004 f809 	bl	8005a78 <HAL_PWREx_ControlVoltageScaling>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001a6c:	f000 f8a4 	bl	8001bb8 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a70:	f003 ffd2 	bl	8005a18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a74:	4b44      	ldr	r3, [pc, #272]	; (8001b88 <SystemClock_Config+0x158>)
 8001a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7a:	4a43      	ldr	r2, [pc, #268]	; (8001b88 <SystemClock_Config+0x158>)
 8001a7c:	f023 0318 	bic.w	r3, r3, #24
 8001a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001a84:	2314      	movs	r3, #20
 8001a86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a90:	2301      	movs	r3, #1
 8001a92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a9c:	2360      	movs	r3, #96	; 0x60
 8001a9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001ab4:	233c      	movs	r3, #60	; 0x3c
 8001ab6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aba:	2302      	movs	r3, #2
 8001abc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001acc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f004 f875 	bl	8005bc0 <HAL_RCC_OscConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001adc:	f000 f86c 	bl	8001bb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001afe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b02:	2105      	movs	r1, #5
 8001b04:	4618      	mov	r0, r3
 8001b06:	f004 fc81 	bl	800640c <HAL_RCC_ClockConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001b10:	f000 f852 	bl	8001bb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <SystemClock_Config+0x15c>)
 8001b16:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_OSPI;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001b24:	2300      	movs	r3, #0
 8001b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001b44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b48:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001b52:	2318      	movs	r3, #24
 8001b54:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001b56:	2302      	movs	r3, #2
 8001b58:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001b62:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001b66:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f004 fefe 	bl	800696c <HAL_RCCEx_PeriphCLKConfig>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8001b76:	f000 f81f 	bl	8001bb8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001b7a:	f005 fa1f 	bl	8006fbc <HAL_RCCEx_EnableMSIPLLMode>
}
 8001b7e:	bf00      	nop
 8001b80:	37f0      	adds	r7, #240	; 0xf0
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	010160cf 	.word	0x010160cf

08001b90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_BUTTON_Pin)
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba0:	d104      	bne.n	8001bac <HAL_GPIO_EXTI_Callback+0x1c>
	{
		HAL_GPIO_TogglePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin);
 8001ba2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ba6:	4803      	ldr	r0, [pc, #12]	; (8001bb4 <HAL_GPIO_EXTI_Callback+0x24>)
 8001ba8:	f003 f8e8 	bl	8004d7c <HAL_GPIO_TogglePin>
	}
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	48000400 	.word	0x48000400

08001bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bbc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <Error_Handler+0x6>

08001bc0 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]

  hospi1.Instance = OCTOSPI1;
 8001bd4:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <MX_OCTOSPI1_Init+0xa4>)
 8001bd6:	4a24      	ldr	r2, [pc, #144]	; (8001c68 <MX_OCTOSPI1_Init+0xa8>)
 8001bd8:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001bda:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <MX_OCTOSPI1_Init+0xa4>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001be0:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <MX_OCTOSPI1_Init+0xa4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001be6:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <MX_OCTOSPI1_Init+0xa4>)
 8001be8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bec:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001bee:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <MX_OCTOSPI1_Init+0xa4>)
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <MX_OCTOSPI1_Init+0xa4>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <MX_OCTOSPI1_Init+0xa4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001c00:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <MX_OCTOSPI1_Init+0xa4>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <MX_OCTOSPI1_Init+0xa4>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <MX_OCTOSPI1_Init+0xa4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <MX_OCTOSPI1_Init+0xa4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <MX_OCTOSPI1_Init+0xa4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <MX_OCTOSPI1_Init+0xa4>)
 8001c20:	2208      	movs	r2, #8
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001c24:	480f      	ldr	r0, [pc, #60]	; (8001c64 <MX_OCTOSPI1_Init+0xa4>)
 8001c26:	f003 fa01 	bl	800502c <HAL_OSPI_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001c30:	f7ff ffc2 	bl	8001bb8 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001c3c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001c40:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4806      	ldr	r0, [pc, #24]	; (8001c64 <MX_OCTOSPI1_Init+0xa4>)
 8001c4c:	f003 faa8 	bl	80051a0 <HAL_OSPIM_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001c56:	f7ff ffaf 	bl	8001bb8 <Error_Handler>
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000364 	.word	0x20000364
 8001c68:	a0001000 	.word	0xa0001000

08001c6c <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(ospiHandle->Instance==OCTOSPI1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <HAL_OSPI_MspInit+0x94>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d134      	bne.n	8001cf8 <HAL_OSPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_OSPI_MspInit+0x98>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <HAL_OSPI_MspInit+0x98>)
 8001c94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_OSPI_MspInit+0x98>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <HAL_OSPI_MspInit+0x98>)
 8001ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001caa:	4a16      	ldr	r2, [pc, #88]	; (8001d04 <HAL_OSPI_MspInit+0x98>)
 8001cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb0:	6513      	str	r3, [r2, #80]	; 0x50
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <HAL_OSPI_MspInit+0x98>)
 8001cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_OSPI_MspInit+0x98>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc2:	4a10      	ldr	r2, [pc, #64]	; (8001d04 <HAL_OSPI_MspInit+0x98>)
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <HAL_OSPI_MspInit+0x98>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001cd6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001cda:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001ce8:	230a      	movs	r3, #10
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <HAL_OSPI_MspInit+0x9c>)
 8001cf4:	f002 fd8e 	bl	8004814 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	a0001000 	.word	0xa0001000
 8001d04:	40021000 	.word	0x40021000
 8001d08:	48001000 	.word	0x48001000

08001d0c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <MX_SPI1_Init+0x74>)
 8001d12:	4a1c      	ldr	r2, [pc, #112]	; (8001d84 <MX_SPI1_Init+0x78>)
 8001d14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <MX_SPI1_Init+0x74>)
 8001d18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <MX_SPI1_Init+0x74>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d24:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <MX_SPI1_Init+0x74>)
 8001d26:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001d2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d2c:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <MX_SPI1_Init+0x74>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <MX_SPI1_Init+0x74>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_SPI1_Init+0x74>)
 8001d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <MX_SPI1_Init+0x74>)
 8001d42:	2208      	movs	r2, #8
 8001d44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_SPI1_Init+0x74>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_SPI1_Init+0x74>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <MX_SPI1_Init+0x74>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_SPI1_Init+0x74>)
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <MX_SPI1_Init+0x74>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_SPI1_Init+0x74>)
 8001d66:	2208      	movs	r2, #8
 8001d68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d6a:	4805      	ldr	r0, [pc, #20]	; (8001d80 <MX_SPI1_Init+0x74>)
 8001d6c:	f005 fb16 	bl	800739c <HAL_SPI_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d76:	f7ff ff1f 	bl	8001bb8 <Error_Handler>
  }

}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000418 	.word	0x20000418
 8001d84:	40013000 	.word	0x40013000

08001d88 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <MX_SPI3_Init+0x74>)
 8001d8e:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <MX_SPI3_Init+0x78>)
 8001d90:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d92:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <MX_SPI3_Init+0x74>)
 8001d94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d98:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <MX_SPI3_Init+0x74>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <MX_SPI3_Init+0x74>)
 8001da2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001da6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <MX_SPI3_Init+0x74>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <MX_SPI3_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <MX_SPI3_Init+0x74>)
 8001db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <MX_SPI3_Init+0x74>)
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <MX_SPI3_Init+0x74>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <MX_SPI3_Init+0x74>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <MX_SPI3_Init+0x74>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <MX_SPI3_Init+0x74>)
 8001dd6:	2207      	movs	r2, #7
 8001dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <MX_SPI3_Init+0x74>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <MX_SPI3_Init+0x74>)
 8001de2:	2208      	movs	r2, #8
 8001de4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_SPI3_Init+0x74>)
 8001de8:	f005 fad8 	bl	800739c <HAL_SPI_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001df2:	f7ff fee1 	bl	8001bb8 <Error_Handler>
  }

}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200003b4 	.word	0x200003b4
 8001e00:	40003c00 	.word	0x40003c00

08001e04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	; 0x30
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a33      	ldr	r2, [pc, #204]	; (8001ef0 <HAL_SPI_MspInit+0xec>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d129      	bne.n	8001e7a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e26:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <HAL_SPI_MspInit+0xf0>)
 8001e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e2a:	4a32      	ldr	r2, [pc, #200]	; (8001ef4 <HAL_SPI_MspInit+0xf0>)
 8001e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e30:	6613      	str	r3, [r2, #96]	; 0x60
 8001e32:	4b30      	ldr	r3, [pc, #192]	; (8001ef4 <HAL_SPI_MspInit+0xf0>)
 8001e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_SPI_MspInit+0xf0>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e42:	4a2c      	ldr	r2, [pc, #176]	; (8001ef4 <HAL_SPI_MspInit+0xf0>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_SPI_MspInit+0xf0>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001e56:	23e0      	movs	r3, #224	; 0xe0
 8001e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e66:	2305      	movs	r3, #5
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e74:	f002 fcce 	bl	8004814 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001e78:	e035      	b.n	8001ee6 <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <HAL_SPI_MspInit+0xf4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d130      	bne.n	8001ee6 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e84:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_SPI_MspInit+0xf0>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e88:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <HAL_SPI_MspInit+0xf0>)
 8001e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <HAL_SPI_MspInit+0xf0>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9c:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <HAL_SPI_MspInit+0xf0>)
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea0:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <HAL_SPI_MspInit+0xf0>)
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_SPI_MspInit+0xf0>)
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001eb4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ec6:	2306      	movs	r3, #6
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	4619      	mov	r1, r3
 8001ed0:	480a      	ldr	r0, [pc, #40]	; (8001efc <HAL_SPI_MspInit+0xf8>)
 8001ed2:	f002 fc9f 	bl	8004814 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 3, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2103      	movs	r1, #3
 8001eda:	2033      	movs	r0, #51	; 0x33
 8001edc:	f002 fae9 	bl	80044b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001ee0:	2033      	movs	r0, #51	; 0x33
 8001ee2:	f002 fb02 	bl	80044ea <HAL_NVIC_EnableIRQ>
}
 8001ee6:	bf00      	nop
 8001ee8:	3730      	adds	r7, #48	; 0x30
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40013000 	.word	0x40013000
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40003c00 	.word	0x40003c00
 8001efc:	48000800 	.word	0x48000800

08001f00 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <HAL_SPI_MspDeInit+0x58>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d10b      	bne.n	8001f2a <HAL_SPI_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_SPI_MspDeInit+0x5c>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <HAL_SPI_MspDeInit+0x5c>)
 8001f18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f1c:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin);
 8001f1e:	21e0      	movs	r1, #224	; 0xe0
 8001f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f24:	f002 fe08 	bl	8004b38 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 8001f28:	e012      	b.n	8001f50 <HAL_SPI_MspDeInit+0x50>
  else if(spiHandle->Instance==SPI3)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <HAL_SPI_MspDeInit+0x60>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d10d      	bne.n	8001f50 <HAL_SPI_MspDeInit+0x50>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_SPI_MspDeInit+0x5c>)
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	4a08      	ldr	r2, [pc, #32]	; (8001f5c <HAL_SPI_MspDeInit+0x5c>)
 8001f3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f3e:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8001f40:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001f44:	4807      	ldr	r0, [pc, #28]	; (8001f64 <HAL_SPI_MspDeInit+0x64>)
 8001f46:	f002 fdf7 	bl	8004b38 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8001f4a:	2033      	movs	r0, #51	; 0x33
 8001f4c:	f002 fadb 	bl	8004506 <HAL_NVIC_DisableIRQ>
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40013000 	.word	0x40013000
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40003c00 	.word	0x40003c00
 8001f64:	48000800 	.word	0x48000800

08001f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <HAL_MspInit+0x44>)
 8001f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f72:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <HAL_MspInit+0x44>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6613      	str	r3, [r2, #96]	; 0x60
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_MspInit+0x44>)
 8001f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_MspInit+0x44>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	4a08      	ldr	r2, [pc, #32]	; (8001fac <HAL_MspInit+0x44>)
 8001f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f90:	6593      	str	r3, [r2, #88]	; 0x58
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_MspInit+0x44>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000

08001fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <NMI_Handler+0x4>

08001fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fba:	e7fe      	b.n	8001fba <HardFault_Handler+0x4>

08001fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <MemManage_Handler+0x4>

08001fc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <BusFault_Handler+0x4>

08001fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <UsageFault_Handler+0x4>

08001fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ffc:	f001 fa36 	bl	800346c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}

08002004 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002008:	2002      	movs	r0, #2
 800200a:	f002 fed1 	bl	8004db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}

08002012 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002016:	2020      	movs	r0, #32
 8002018:	f002 feca 	bl	8004db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800201c:	2040      	movs	r0, #64	; 0x40
 800201e:	f002 fec7 	bl	8004db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002022:	2080      	movs	r0, #128	; 0x80
 8002024:	f002 fec4 	bl	8004db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002028:	f44f 7080 	mov.w	r0, #256	; 0x100
 800202c:	f002 fec0 	bl	8004db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}

08002034 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002038:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800203c:	f002 feb8 	bl	8004db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002040:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002044:	f002 feb4 	bl	8004db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002048:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800204c:	f002 feb0 	bl	8004db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002050:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002054:	f002 feac 	bl	8004db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002058:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800205c:	f002 fea8 	bl	8004db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002060:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002064:	f002 fea4 	bl	8004db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}

0800206c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <SPI3_IRQHandler+0x10>)
 8002072:	f005 ff0f 	bl	8007e94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200003b4 	.word	0x200003b4

08002080 <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	e009      	b.n	80020a6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	60ba      	str	r2, [r7, #8]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff faee 	bl	800167c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	3301      	adds	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	dbf1      	blt.n	8002092 <_write+0x12>
	}
	return len;
 80020ae:	687b      	ldr	r3, [r7, #4]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_close>:

int _close(int file)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	return -1;
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020e0:	605a      	str	r2, [r3, #4]
	return 0;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <_isatty>:

int _isatty(int file)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	return 1;
 80020f8:	2301      	movs	r3, #1
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002106:	b480      	push	{r7}
 8002108:	b085      	sub	sp, #20
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
	return 0;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002128:	4a14      	ldr	r2, [pc, #80]	; (800217c <_sbrk+0x5c>)
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <_sbrk+0x60>)
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <_sbrk+0x64>)
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <_sbrk+0x68>)
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	429a      	cmp	r2, r3
 800214e:	d207      	bcs.n	8002160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002150:	f007 f8ac 	bl	80092ac <__errno>
 8002154:	4602      	mov	r2, r0
 8002156:	230c      	movs	r3, #12
 8002158:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	e009      	b.n	8002174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <_sbrk+0x64>)
 8002170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	200a0000 	.word	0x200a0000
 8002180:	00000400 	.word	0x00000400
 8002184:	200001fc 	.word	0x200001fc
 8002188:	20000e80 	.word	0x20000e80

0800218c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002190:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <SystemInit+0x64>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002196:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <SystemInit+0x64>)
 8002198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800219c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <SystemInit+0x68>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <SystemInit+0x68>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <SystemInit+0x68>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <SystemInit+0x68>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a0f      	ldr	r2, [pc, #60]	; (80021f4 <SystemInit+0x68>)
 80021b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80021bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80021c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80021c2:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <SystemInit+0x68>)
 80021c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <SystemInit+0x68>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <SystemInit+0x68>)
 80021d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <SystemInit+0x68>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <SystemInit+0x64>)
 80021de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021e2:	609a      	str	r2, [r3, #8]
#endif
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000ed00 	.word	0xe000ed00
 80021f4:	40021000 	.word	0x40021000

080021f8 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80021fc:	4b22      	ldr	r3, [pc, #136]	; (8002288 <MX_UART4_Init+0x90>)
 80021fe:	4a23      	ldr	r2, [pc, #140]	; (800228c <MX_UART4_Init+0x94>)
 8002200:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002202:	4b21      	ldr	r3, [pc, #132]	; (8002288 <MX_UART4_Init+0x90>)
 8002204:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002208:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800220a:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <MX_UART4_Init+0x90>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <MX_UART4_Init+0x90>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002216:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <MX_UART4_Init+0x90>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800221c:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <MX_UART4_Init+0x90>)
 800221e:	220c      	movs	r2, #12
 8002220:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002222:	4b19      	ldr	r3, [pc, #100]	; (8002288 <MX_UART4_Init+0x90>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <MX_UART4_Init+0x90>)
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <MX_UART4_Init+0x90>)
 8002230:	2200      	movs	r2, #0
 8002232:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <MX_UART4_Init+0x90>)
 8002236:	2200      	movs	r2, #0
 8002238:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <MX_UART4_Init+0x90>)
 800223c:	2200      	movs	r2, #0
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002240:	4811      	ldr	r0, [pc, #68]	; (8002288 <MX_UART4_Init+0x90>)
 8002242:	f006 f91d 	bl	8008480 <HAL_UART_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800224c:	f7ff fcb4 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002250:	2100      	movs	r1, #0
 8002252:	480d      	ldr	r0, [pc, #52]	; (8002288 <MX_UART4_Init+0x90>)
 8002254:	f006 ff41 	bl	80090da <HAL_UARTEx_SetTxFifoThreshold>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800225e:	f7ff fcab 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002262:	2100      	movs	r1, #0
 8002264:	4808      	ldr	r0, [pc, #32]	; (8002288 <MX_UART4_Init+0x90>)
 8002266:	f006 ff76 	bl	8009156 <HAL_UARTEx_SetRxFifoThreshold>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002270:	f7ff fca2 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002274:	4804      	ldr	r0, [pc, #16]	; (8002288 <MX_UART4_Init+0x90>)
 8002276:	f006 fef7 	bl	8009068 <HAL_UARTEx_DisableFifoMode>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002280:	f7ff fc9a 	bl	8001bb8 <Error_Handler>
  }

}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000594 	.word	0x20000594
 800228c:	40004c00 	.word	0x40004c00

08002290 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002294:	4b22      	ldr	r3, [pc, #136]	; (8002320 <MX_USART1_UART_Init+0x90>)
 8002296:	4a23      	ldr	r2, [pc, #140]	; (8002324 <MX_USART1_UART_Init+0x94>)
 8002298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800229a:	4b21      	ldr	r3, [pc, #132]	; (8002320 <MX_USART1_UART_Init+0x90>)
 800229c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022a2:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <MX_USART1_UART_Init+0x90>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022a8:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <MX_USART1_UART_Init+0x90>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022ae:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <MX_USART1_UART_Init+0x90>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <MX_USART1_UART_Init+0x90>)
 80022b6:	220c      	movs	r2, #12
 80022b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ba:	4b19      	ldr	r3, [pc, #100]	; (8002320 <MX_USART1_UART_Init+0x90>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c0:	4b17      	ldr	r3, [pc, #92]	; (8002320 <MX_USART1_UART_Init+0x90>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022c6:	4b16      	ldr	r3, [pc, #88]	; (8002320 <MX_USART1_UART_Init+0x90>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <MX_USART1_UART_Init+0x90>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022d2:	4b13      	ldr	r3, [pc, #76]	; (8002320 <MX_USART1_UART_Init+0x90>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022d8:	4811      	ldr	r0, [pc, #68]	; (8002320 <MX_USART1_UART_Init+0x90>)
 80022da:	f006 f8d1 	bl	8008480 <HAL_UART_Init>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80022e4:	f7ff fc68 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022e8:	2100      	movs	r1, #0
 80022ea:	480d      	ldr	r0, [pc, #52]	; (8002320 <MX_USART1_UART_Init+0x90>)
 80022ec:	f006 fef5 	bl	80090da <HAL_UARTEx_SetTxFifoThreshold>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80022f6:	f7ff fc5f 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022fa:	2100      	movs	r1, #0
 80022fc:	4808      	ldr	r0, [pc, #32]	; (8002320 <MX_USART1_UART_Init+0x90>)
 80022fe:	f006 ff2a 	bl	8009156 <HAL_UARTEx_SetRxFifoThreshold>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002308:	f7ff fc56 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800230c:	4804      	ldr	r0, [pc, #16]	; (8002320 <MX_USART1_UART_Init+0x90>)
 800230e:	f006 feab 	bl	8009068 <HAL_UARTEx_DisableFifoMode>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002318:	f7ff fc4e 	bl	8001bb8 <Error_Handler>
  }

}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000508 	.word	0x20000508
 8002324:	40013800 	.word	0x40013800

08002328 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <MX_USART2_UART_Init+0x94>)
 800232e:	4a24      	ldr	r2, [pc, #144]	; (80023c0 <MX_USART2_UART_Init+0x98>)
 8002330:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002332:	4b22      	ldr	r3, [pc, #136]	; (80023bc <MX_USART2_UART_Init+0x94>)
 8002334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002338:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <MX_USART2_UART_Init+0x94>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002340:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <MX_USART2_UART_Init+0x94>)
 8002342:	2200      	movs	r2, #0
 8002344:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <MX_USART2_UART_Init+0x94>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800234c:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <MX_USART2_UART_Init+0x94>)
 800234e:	220c      	movs	r2, #12
 8002350:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002352:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <MX_USART2_UART_Init+0x94>)
 8002354:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002358:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <MX_USART2_UART_Init+0x94>)
 800235c:	2200      	movs	r2, #0
 800235e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002360:	4b16      	ldr	r3, [pc, #88]	; (80023bc <MX_USART2_UART_Init+0x94>)
 8002362:	2200      	movs	r2, #0
 8002364:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <MX_USART2_UART_Init+0x94>)
 8002368:	2200      	movs	r2, #0
 800236a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <MX_USART2_UART_Init+0x94>)
 800236e:	2200      	movs	r2, #0
 8002370:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002372:	4812      	ldr	r0, [pc, #72]	; (80023bc <MX_USART2_UART_Init+0x94>)
 8002374:	f006 f884 	bl	8008480 <HAL_UART_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800237e:	f7ff fc1b 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002382:	2100      	movs	r1, #0
 8002384:	480d      	ldr	r0, [pc, #52]	; (80023bc <MX_USART2_UART_Init+0x94>)
 8002386:	f006 fea8 	bl	80090da <HAL_UARTEx_SetTxFifoThreshold>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002390:	f7ff fc12 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002394:	2100      	movs	r1, #0
 8002396:	4809      	ldr	r0, [pc, #36]	; (80023bc <MX_USART2_UART_Init+0x94>)
 8002398:	f006 fedd 	bl	8009156 <HAL_UARTEx_SetRxFifoThreshold>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80023a2:	f7ff fc09 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80023a6:	4805      	ldr	r0, [pc, #20]	; (80023bc <MX_USART2_UART_Init+0x94>)
 80023a8:	f006 fe5e 	bl	8009068 <HAL_UARTEx_DisableFifoMode>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80023b2:	f7ff fc01 	bl	8001bb8 <Error_Handler>
  }

}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000620 	.word	0x20000620
 80023c0:	40004400 	.word	0x40004400

080023c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80023c8:	4b22      	ldr	r3, [pc, #136]	; (8002454 <MX_USART3_UART_Init+0x90>)
 80023ca:	4a23      	ldr	r2, [pc, #140]	; (8002458 <MX_USART3_UART_Init+0x94>)
 80023cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023ce:	4b21      	ldr	r3, [pc, #132]	; (8002454 <MX_USART3_UART_Init+0x90>)
 80023d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023d6:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <MX_USART3_UART_Init+0x90>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <MX_USART3_UART_Init+0x90>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <MX_USART3_UART_Init+0x90>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023e8:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <MX_USART3_UART_Init+0x90>)
 80023ea:	220c      	movs	r2, #12
 80023ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <MX_USART3_UART_Init+0x90>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f4:	4b17      	ldr	r3, [pc, #92]	; (8002454 <MX_USART3_UART_Init+0x90>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <MX_USART3_UART_Init+0x90>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002400:	4b14      	ldr	r3, [pc, #80]	; (8002454 <MX_USART3_UART_Init+0x90>)
 8002402:	2200      	movs	r2, #0
 8002404:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002406:	4b13      	ldr	r3, [pc, #76]	; (8002454 <MX_USART3_UART_Init+0x90>)
 8002408:	2200      	movs	r2, #0
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800240c:	4811      	ldr	r0, [pc, #68]	; (8002454 <MX_USART3_UART_Init+0x90>)
 800240e:	f006 f837 	bl	8008480 <HAL_UART_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002418:	f7ff fbce 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800241c:	2100      	movs	r1, #0
 800241e:	480d      	ldr	r0, [pc, #52]	; (8002454 <MX_USART3_UART_Init+0x90>)
 8002420:	f006 fe5b 	bl	80090da <HAL_UARTEx_SetTxFifoThreshold>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800242a:	f7ff fbc5 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800242e:	2100      	movs	r1, #0
 8002430:	4808      	ldr	r0, [pc, #32]	; (8002454 <MX_USART3_UART_Init+0x90>)
 8002432:	f006 fe90 	bl	8009156 <HAL_UARTEx_SetRxFifoThreshold>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800243c:	f7ff fbbc 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002440:	4804      	ldr	r0, [pc, #16]	; (8002454 <MX_USART3_UART_Init+0x90>)
 8002442:	f006 fe11 	bl	8009068 <HAL_UARTEx_DisableFifoMode>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800244c:	f7ff fbb4 	bl	8001bb8 <Error_Handler>
  }

}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	2000047c 	.word	0x2000047c
 8002458:	40004800 	.word	0x40004800

0800245c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b090      	sub	sp, #64	; 0x40
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a5d      	ldr	r2, [pc, #372]	; (80025f0 <HAL_UART_MspInit+0x194>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d129      	bne.n	80024d2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800247e:	4b5d      	ldr	r3, [pc, #372]	; (80025f4 <HAL_UART_MspInit+0x198>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	4a5c      	ldr	r2, [pc, #368]	; (80025f4 <HAL_UART_MspInit+0x198>)
 8002484:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002488:	6593      	str	r3, [r2, #88]	; 0x58
 800248a:	4b5a      	ldr	r3, [pc, #360]	; (80025f4 <HAL_UART_MspInit+0x198>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002496:	4b57      	ldr	r3, [pc, #348]	; (80025f4 <HAL_UART_MspInit+0x198>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249a:	4a56      	ldr	r2, [pc, #344]	; (80025f4 <HAL_UART_MspInit+0x198>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024a2:	4b54      	ldr	r3, [pc, #336]	; (80025f4 <HAL_UART_MspInit+0x198>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80024ae:	2303      	movs	r3, #3
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ba:	2303      	movs	r3, #3
 80024bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024be:	2308      	movs	r3, #8
 80024c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c6:	4619      	mov	r1, r3
 80024c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024cc:	f002 f9a2 	bl	8004814 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024d0:	e089      	b.n	80025e6 <HAL_UART_MspInit+0x18a>
  else if(uartHandle->Instance==USART1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a48      	ldr	r2, [pc, #288]	; (80025f8 <HAL_UART_MspInit+0x19c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d128      	bne.n	800252e <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80024dc:	4b45      	ldr	r3, [pc, #276]	; (80025f4 <HAL_UART_MspInit+0x198>)
 80024de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e0:	4a44      	ldr	r2, [pc, #272]	; (80025f4 <HAL_UART_MspInit+0x198>)
 80024e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e6:	6613      	str	r3, [r2, #96]	; 0x60
 80024e8:	4b42      	ldr	r3, [pc, #264]	; (80025f4 <HAL_UART_MspInit+0x198>)
 80024ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f0:	623b      	str	r3, [r7, #32]
 80024f2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f4:	4b3f      	ldr	r3, [pc, #252]	; (80025f4 <HAL_UART_MspInit+0x198>)
 80024f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f8:	4a3e      	ldr	r2, [pc, #248]	; (80025f4 <HAL_UART_MspInit+0x198>)
 80024fa:	f043 0302 	orr.w	r3, r3, #2
 80024fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002500:	4b3c      	ldr	r3, [pc, #240]	; (80025f4 <HAL_UART_MspInit+0x198>)
 8002502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800250c:	23c0      	movs	r3, #192	; 0xc0
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002510:	2302      	movs	r3, #2
 8002512:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800251c:	2307      	movs	r3, #7
 800251e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002524:	4619      	mov	r1, r3
 8002526:	4835      	ldr	r0, [pc, #212]	; (80025fc <HAL_UART_MspInit+0x1a0>)
 8002528:	f002 f974 	bl	8004814 <HAL_GPIO_Init>
}
 800252c:	e05b      	b.n	80025e6 <HAL_UART_MspInit+0x18a>
  else if(uartHandle->Instance==USART2)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a33      	ldr	r2, [pc, #204]	; (8002600 <HAL_UART_MspInit+0x1a4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d128      	bne.n	800258a <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002538:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <HAL_UART_MspInit+0x198>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	4a2d      	ldr	r2, [pc, #180]	; (80025f4 <HAL_UART_MspInit+0x198>)
 800253e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002542:	6593      	str	r3, [r2, #88]	; 0x58
 8002544:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <HAL_UART_MspInit+0x198>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002550:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <HAL_UART_MspInit+0x198>)
 8002552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002554:	4a27      	ldr	r2, [pc, #156]	; (80025f4 <HAL_UART_MspInit+0x198>)
 8002556:	f043 0308 	orr.w	r3, r3, #8
 800255a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255c:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <HAL_UART_MspInit+0x198>)
 800255e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002568:	2378      	movs	r3, #120	; 0x78
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002574:	2303      	movs	r3, #3
 8002576:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002578:	2307      	movs	r3, #7
 800257a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800257c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002580:	4619      	mov	r1, r3
 8002582:	4820      	ldr	r0, [pc, #128]	; (8002604 <HAL_UART_MspInit+0x1a8>)
 8002584:	f002 f946 	bl	8004814 <HAL_GPIO_Init>
}
 8002588:	e02d      	b.n	80025e6 <HAL_UART_MspInit+0x18a>
  else if(uartHandle->Instance==USART3)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <HAL_UART_MspInit+0x1ac>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d128      	bne.n	80025e6 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002594:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <HAL_UART_MspInit+0x198>)
 8002596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002598:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <HAL_UART_MspInit+0x198>)
 800259a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800259e:	6593      	str	r3, [r2, #88]	; 0x58
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <HAL_UART_MspInit+0x198>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_UART_MspInit+0x198>)
 80025ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b0:	4a10      	ldr	r2, [pc, #64]	; (80025f4 <HAL_UART_MspInit+0x198>)
 80025b2:	f043 0308 	orr.w	r3, r3, #8
 80025b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b8:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <HAL_UART_MspInit+0x198>)
 80025ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80025c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d2:	2303      	movs	r3, #3
 80025d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025d6:	2307      	movs	r3, #7
 80025d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025de:	4619      	mov	r1, r3
 80025e0:	4808      	ldr	r0, [pc, #32]	; (8002604 <HAL_UART_MspInit+0x1a8>)
 80025e2:	f002 f917 	bl	8004814 <HAL_GPIO_Init>
}
 80025e6:	bf00      	nop
 80025e8:	3740      	adds	r7, #64	; 0x40
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40004c00 	.word	0x40004c00
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40013800 	.word	0x40013800
 80025fc:	48000400 	.word	0x48000400
 8002600:	40004400 	.word	0x40004400
 8002604:	48000c00 	.word	0x48000c00
 8002608:	40004800 	.word	0x40004800

0800260c <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0

}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800261c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002654 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002620:	f7ff fdb4 	bl	800218c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002624:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002626:	e003      	b.n	8002630 <LoopCopyDataInit>

08002628 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800262a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800262c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800262e:	3104      	adds	r1, #4

08002630 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002630:	480a      	ldr	r0, [pc, #40]	; (800265c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002634:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002636:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002638:	d3f6      	bcc.n	8002628 <CopyDataInit>
	ldr	r2, =_sbss
 800263a:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <LoopForever+0x12>)
	b	LoopFillZerobss
 800263c:	e002      	b.n	8002644 <LoopFillZerobss>

0800263e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800263e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002640:	f842 3b04 	str.w	r3, [r2], #4

08002644 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <LoopForever+0x16>)
	cmp	r2, r3
 8002646:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002648:	d3f9      	bcc.n	800263e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800264a:	f006 fe35 	bl	80092b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800264e:	f7ff f8d5 	bl	80017fc <main>

08002652 <LoopForever>:

LoopForever:
    b LoopForever
 8002652:	e7fe      	b.n	8002652 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002654:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8002658:	0800dff8 	.word	0x0800dff8
	ldr	r0, =_sdata
 800265c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002660:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8002664:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8002668:	20000e80 	.word	0x20000e80

0800266c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800266c:	e7fe      	b.n	800266c <ADC1_IRQHandler>

0800266e <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	2b2f      	cmp	r3, #47	; 0x2f
 800267c:	d906      	bls.n	800268c <Hex2Num+0x1e>
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	2b39      	cmp	r3, #57	; 0x39
 8002682:	d803      	bhi.n	800268c <Hex2Num+0x1e>
        return a - '0';
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	3b30      	subs	r3, #48	; 0x30
 8002688:	b2db      	uxtb	r3, r3
 800268a:	e014      	b.n	80026b6 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	2b60      	cmp	r3, #96	; 0x60
 8002690:	d906      	bls.n	80026a0 <Hex2Num+0x32>
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	2b66      	cmp	r3, #102	; 0x66
 8002696:	d803      	bhi.n	80026a0 <Hex2Num+0x32>
        return (a - 'a') + 10;
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	3b57      	subs	r3, #87	; 0x57
 800269c:	b2db      	uxtb	r3, r3
 800269e:	e00a      	b.n	80026b6 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	2b40      	cmp	r3, #64	; 0x40
 80026a4:	d906      	bls.n	80026b4 <Hex2Num+0x46>
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	2b46      	cmp	r3, #70	; 0x46
 80026aa:	d803      	bhi.n	80026b4 <Hex2Num+0x46>
        return (a - 'A') + 10;
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	3b37      	subs	r3, #55	; 0x37
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e000      	b.n	80026b6 <Hex2Num+0x48>
    }

    return 0;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                            /* Parse number */
 80026d4:	e012      	b.n	80026fc <ParseHexNumber+0x3a>
        sum <<= 4;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ffc4 	bl	800266e <Hex2Num>
 80026e6:	4603      	mov	r3, r0
 80026e8:	461a      	mov	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4413      	add	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
        ptr++;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3301      	adds	r3, #1
 80026f4:	607b      	str	r3, [r7, #4]
        i++;
 80026f6:	7afb      	ldrb	r3, [r7, #11]
 80026f8:	3301      	adds	r3, #1
 80026fa:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                            /* Parse number */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b2f      	cmp	r3, #47	; 0x2f
 8002702:	d903      	bls.n	800270c <ParseHexNumber+0x4a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b39      	cmp	r3, #57	; 0x39
 800270a:	d9e4      	bls.n	80026d6 <ParseHexNumber+0x14>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b60      	cmp	r3, #96	; 0x60
 8002712:	d903      	bls.n	800271c <ParseHexNumber+0x5a>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b66      	cmp	r3, #102	; 0x66
 800271a:	d9dc      	bls.n	80026d6 <ParseHexNumber+0x14>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b40      	cmp	r3, #64	; 0x40
 8002722:	d903      	bls.n	800272c <ParseHexNumber+0x6a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b46      	cmp	r3, #70	; 0x46
 800272a:	d9d4      	bls.n	80026d6 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <ParseHexNumber+0x76>
        *cnt = i;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	7afa      	ldrb	r2, [r7, #11]
 8002736:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 8002738:	68fb      	ldr	r3, [r7, #12]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	2300      	movs	r3, #0
 8002752:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b2d      	cmp	r3, #45	; 0x2d
 800275e:	d119      	bne.n	8002794 <ParseNumber+0x52>
        minus = 1;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3301      	adds	r3, #1
 8002768:	607b      	str	r3, [r7, #4]
        i++;
 800276a:	7bbb      	ldrb	r3, [r7, #14]
 800276c:	3301      	adds	r3, #1
 800276e:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8002770:	e010      	b.n	8002794 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	461a      	mov	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	3b30      	subs	r3, #48	; 0x30
 8002784:	4413      	add	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
        ptr++;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3301      	adds	r3, #1
 800278c:	607b      	str	r3, [r7, #4]
        i++;
 800278e:	7bbb      	ldrb	r3, [r7, #14]
 8002790:	3301      	adds	r3, #1
 8002792:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b2f      	cmp	r3, #47	; 0x2f
 800279a:	d903      	bls.n	80027a4 <ParseNumber+0x62>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b39      	cmp	r3, #57	; 0x39
 80027a2:	d9e6      	bls.n	8002772 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <ParseNumber+0x6e>
        *cnt = i;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	7bba      	ldrb	r2, [r7, #14]
 80027ae:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <ParseNumber+0x7a>
        return 0 - sum;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	425b      	negs	r3, r3
 80027ba:	e000      	b.n	80027be <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 80027bc:	68bb      	ldr	r3, [r7, #8]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80027d4:	2300      	movs	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80027d8:	e019      	b.n	800280e <ParseMAC+0x44>
    hexcnt = 1;
 80027da:	2301      	movs	r3, #1
 80027dc:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b3a      	cmp	r3, #58	; 0x3a
 80027e4:	d00e      	beq.n	8002804 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 80027e6:	f107 030e 	add.w	r3, r7, #14
 80027ea:	4619      	mov	r1, r3
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ff68 	bl	80026c2 <ParseHexNumber>
 80027f2:	4601      	mov	r1, r0
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	73fa      	strb	r2, [r7, #15]
 80027fa:	461a      	mov	r2, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	b2ca      	uxtb	r2, r1
 8002802:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8002804:	7bbb      	ldrb	r3, [r7, #14]
 8002806:	461a      	mov	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4413      	add	r3, r2
 800280c:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1e1      	bne.n	80027da <ParseMAC+0x10>
  }
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8002828:	2300      	movs	r3, #0
 800282a:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 800282c:	e019      	b.n	8002862 <ParseIP+0x44>
    hexcnt = 1;
 800282e:	2301      	movs	r3, #1
 8002830:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b2e      	cmp	r3, #46	; 0x2e
 8002838:	d00e      	beq.n	8002858 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 800283a:	f107 030e 	add.w	r3, r7, #14
 800283e:	4619      	mov	r1, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff ff7e 	bl	8002742 <ParseNumber>
 8002846:	4601      	mov	r1, r0
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	73fa      	strb	r2, [r7, #15]
 800284e:	461a      	mov	r2, r3
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	4413      	add	r3, r2
 8002854:	b2ca      	uxtb	r2, r1
 8002856:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8002858:	7bbb      	ldrb	r3, [r7, #14]
 800285a:	461a      	mov	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4413      	add	r3, r2
 8002860:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1e1      	bne.n	800282e <ParseIP+0x10>
  }
}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	3302      	adds	r3, #2
 8002886:	4934      	ldr	r1, [pc, #208]	; (8002958 <AT_ParseInfo+0xe4>)
 8002888:	4618      	mov	r0, r3
 800288a:	f008 fa7d 	bl	800ad88 <strtok>
 800288e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8002890:	e05a      	b.n	8002948 <AT_ParseInfo+0xd4>
    switch (num++) {
 8002892:	7afb      	ldrb	r3, [r7, #11]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	72fa      	strb	r2, [r7, #11]
 8002898:	2b06      	cmp	r3, #6
 800289a:	d84f      	bhi.n	800293c <AT_ParseInfo+0xc8>
 800289c:	a201      	add	r2, pc, #4	; (adr r2, 80028a4 <AT_ParseInfo+0x30>)
 800289e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a2:	bf00      	nop
 80028a4:	080028c1 	.word	0x080028c1
 80028a8:	080028cf 	.word	0x080028cf
 80028ac:	080028df 	.word	0x080028df
 80028b0:	080028ef 	.word	0x080028ef
 80028b4:	080028ff 	.word	0x080028ff
 80028b8:	0800290f 	.word	0x0800290f
 80028bc:	08002923 	.word	0x08002923
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	68f9      	ldr	r1, [r7, #12]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f007 fc0e 	bl	800a0e8 <strncpy>
      break;
 80028cc:	e037      	b.n	800293e <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3320      	adds	r3, #32
 80028d2:	2210      	movs	r2, #16
 80028d4:	68f9      	ldr	r1, [r7, #12]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f007 fc06 	bl	800a0e8 <strncpy>
      break;
 80028dc:	e02f      	b.n	800293e <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3330      	adds	r3, #48	; 0x30
 80028e2:	2210      	movs	r2, #16
 80028e4:	68f9      	ldr	r1, [r7, #12]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f007 fbfe 	bl	800a0e8 <strncpy>
      break;
 80028ec:	e027      	b.n	800293e <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3340      	adds	r3, #64	; 0x40
 80028f2:	2210      	movs	r2, #16
 80028f4:	68f9      	ldr	r1, [r7, #12]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f007 fbf6 	bl	800a0e8 <strncpy>
      break;
 80028fc:	e01f      	b.n	800293e <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3350      	adds	r3, #80	; 0x50
 8002902:	2210      	movs	r2, #16
 8002904:	68f9      	ldr	r1, [r7, #12]
 8002906:	4618      	mov	r0, r3
 8002908:	f007 fbee 	bl	800a0e8 <strncpy>
      break;
 800290c:	e017      	b.n	800293e <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 800290e:	2100      	movs	r1, #0
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7ff ff16 	bl	8002742 <ParseNumber>
 8002916:	4603      	mov	r3, r0
 8002918:	461a      	mov	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;
 8002920:	e00d      	b.n	800293e <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8002922:	490e      	ldr	r1, [pc, #56]	; (800295c <AT_ParseInfo+0xe8>)
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f008 fa2f 	bl	800ad88 <strtok>
 800292a:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3360      	adds	r3, #96	; 0x60
 8002930:	2220      	movs	r2, #32
 8002932:	68f9      	ldr	r1, [r7, #12]
 8002934:	4618      	mov	r0, r3
 8002936:	f007 fbd7 	bl	800a0e8 <strncpy>
      break;
 800293a:	e000      	b.n	800293e <AT_ParseInfo+0xca>

    default: break;
 800293c:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800293e:	4906      	ldr	r1, [pc, #24]	; (8002958 <AT_ParseInfo+0xe4>)
 8002940:	2000      	movs	r0, #0
 8002942:	f008 fa21 	bl	800ad88 <strtok>
 8002946:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1a1      	bne.n	8002892 <AT_ParseInfo+0x1e>
  }
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	0800da74 	.word	0x0800da74
 800295c:	0800da78 	.word	0x0800da78

08002960 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3302      	adds	r3, #2
 8002972:	4952      	ldr	r1, [pc, #328]	; (8002abc <AT_ParseConnSettings+0x15c>)
 8002974:	4618      	mov	r0, r3
 8002976:	f008 fa07 	bl	800ad88 <strtok>
 800297a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800297c:	e095      	b.n	8002aaa <AT_ParseConnSettings+0x14a>
    switch (num++) {
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	73fa      	strb	r2, [r7, #15]
 8002984:	2b0b      	cmp	r3, #11
 8002986:	d87f      	bhi.n	8002a88 <AT_ParseConnSettings+0x128>
 8002988:	a201      	add	r2, pc, #4	; (adr r2, 8002990 <AT_ParseConnSettings+0x30>)
 800298a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298e:	bf00      	nop
 8002990:	080029c1 	.word	0x080029c1
 8002994:	080029cf 	.word	0x080029cf
 8002998:	080029df 	.word	0x080029df
 800299c:	080029f3 	.word	0x080029f3
 80029a0:	08002a07 	.word	0x08002a07
 80029a4:	08002a1b 	.word	0x08002a1b
 80029a8:	08002a29 	.word	0x08002a29
 80029ac:	08002a37 	.word	0x08002a37
 80029b0:	08002a45 	.word	0x08002a45
 80029b4:	08002a53 	.word	0x08002a53
 80029b8:	08002a61 	.word	0x08002a61
 80029bc:	08002a75 	.word	0x08002a75
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2221      	movs	r2, #33	; 0x21
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f007 fb8e 	bl	800a0e8 <strncpy>
      break;
 80029cc:	e05d      	b.n	8002a8a <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	3321      	adds	r3, #33	; 0x21
 80029d2:	2221      	movs	r2, #33	; 0x21
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f007 fb86 	bl	800a0e8 <strncpy>
      break;
 80029dc:	e055      	b.n	8002a8a <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80029de:	2100      	movs	r1, #0
 80029e0:	68b8      	ldr	r0, [r7, #8]
 80029e2:	f7ff feae 	bl	8002742 <ParseNumber>
 80029e6:	4603      	mov	r3, r0
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 80029f0:	e04b      	b.n	8002a8a <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 80029f2:	2100      	movs	r1, #0
 80029f4:	68b8      	ldr	r0, [r7, #8]
 80029f6:	f7ff fea4 	bl	8002742 <ParseNumber>
 80029fa:	4603      	mov	r3, r0
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8002a04:	e041      	b.n	8002a8a <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8002a06:	2100      	movs	r1, #0
 8002a08:	68b8      	ldr	r0, [r7, #8]
 8002a0a:	f7ff fe9a 	bl	8002742 <ParseNumber>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8002a18:	e037      	b.n	8002a8a <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	3348      	adds	r3, #72	; 0x48
 8002a1e:	4619      	mov	r1, r3
 8002a20:	68b8      	ldr	r0, [r7, #8]
 8002a22:	f7ff fefc 	bl	800281e <ParseIP>
      break;
 8002a26:	e030      	b.n	8002a8a <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	334c      	adds	r3, #76	; 0x4c
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	68b8      	ldr	r0, [r7, #8]
 8002a30:	f7ff fef5 	bl	800281e <ParseIP>
      break;
 8002a34:	e029      	b.n	8002a8a <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	3350      	adds	r3, #80	; 0x50
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	68b8      	ldr	r0, [r7, #8]
 8002a3e:	f7ff feee 	bl	800281e <ParseIP>
      break;
 8002a42:	e022      	b.n	8002a8a <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	3354      	adds	r3, #84	; 0x54
 8002a48:	4619      	mov	r1, r3
 8002a4a:	68b8      	ldr	r0, [r7, #8]
 8002a4c:	f7ff fee7 	bl	800281e <ParseIP>
      break;
 8002a50:	e01b      	b.n	8002a8a <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	3358      	adds	r3, #88	; 0x58
 8002a56:	4619      	mov	r1, r3
 8002a58:	68b8      	ldr	r0, [r7, #8]
 8002a5a:	f7ff fee0 	bl	800281e <ParseIP>
      break;
 8002a5e:	e014      	b.n	8002a8a <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8002a60:	2100      	movs	r1, #0
 8002a62:	68b8      	ldr	r0, [r7, #8]
 8002a64:	f7ff fe6d 	bl	8002742 <ParseNumber>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8002a72:	e00a      	b.n	8002a8a <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8002a74:	2100      	movs	r1, #0
 8002a76:	68b8      	ldr	r0, [r7, #8]
 8002a78:	f7ff fe63 	bl	8002742 <ParseNumber>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8002a86:	e000      	b.n	8002a8a <AT_ParseConnSettings+0x12a>

    default:
      break;
 8002a88:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8002a8a:	490c      	ldr	r1, [pc, #48]	; (8002abc <AT_ParseConnSettings+0x15c>)
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f008 f97b 	bl	800ad88 <strtok>
 8002a92:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <AT_ParseConnSettings+0x14a>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b2c      	cmp	r3, #44	; 0x2c
 8002aa2:	d102      	bne.n	8002aaa <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f47f af66 	bne.w	800297e <AT_ParseConnSettings+0x1e>
    }
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	0800da74 	.word	0x0800da74

08002ac0 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 8002ad2:	68b8      	ldr	r0, [r7, #8]
 8002ad4:	f7fd fb94 	bl	8000200 <strlen>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	b299      	uxth	r1, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68b8      	ldr	r0, [r7, #8]
 8002ae6:	47a0      	blx	r4
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	dd26      	ble.n	8002b3c <AT_ExecuteCommand+0x7c>
  {
    int16_t n=Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 8002afa:	2100      	movs	r1, #0
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4798      	blx	r3
 8002b00:	4603      	mov	r3, r0
 8002b02:	82fb      	strh	r3, [r7, #22]
    if(n > 0)
 8002b04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	dd17      	ble.n	8002b3c <AT_ExecuteCommand+0x7c>
    {
      *(pdata+n)=0;
 8002b0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8002b18:	490b      	ldr	r1, [pc, #44]	; (8002b48 <AT_ExecuteCommand+0x88>)
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f007 faf9 	bl	800a112 <strstr>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <AT_ExecuteCommand+0x6a>
      {
        return ES_WIFI_STATUS_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	e009      	b.n	8002b3e <AT_ExecuteCommand+0x7e>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8002b2a:	4908      	ldr	r1, [pc, #32]	; (8002b4c <AT_ExecuteCommand+0x8c>)
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f007 faf0 	bl	800a112 <strstr>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <AT_ExecuteCommand+0x7c>
      {
        return ES_WIFI_STATUS_ERROR;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e000      	b.n	8002b3e <AT_ExecuteCommand+0x7e>
      }
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8002b3c:	2304      	movs	r3, #4
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd90      	pop	{r4, r7, pc}
 8002b46:	bf00      	nop
 8002b48:	0800da7c 	.word	0x0800da7c
 8002b4c:	0800da88 	.word	0x0800da88

08002b50 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	73fb      	strb	r3, [r7, #15]

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8002b62:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760

  if (Obj->fops.IO_Init() == 0)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002b6c:	4798      	blx	r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d113      	bne.n	8002b9c <ES_WIFI_Init+0x4c>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	490a      	ldr	r1, [pc, #40]	; (8002ba8 <ES_WIFI_Init+0x58>)
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff ff9e 	bl	8002ac0 <AT_ExecuteCommand>
 8002b84:	4603      	mov	r3, r0
 8002b86:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <ES_WIFI_Init+0x4c>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002b94:	4619      	mov	r1, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff fe6c 	bl	8002874 <AT_ParseInfo>
    }
  }
  return ret;
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	0800da90 	.word	0x0800da90

08002bac <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00b      	beq.n	8002bd8 <ES_WIFI_RegisterBusIO+0x2c>
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <ES_WIFI_RegisterBusIO+0x2c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <ES_WIFI_RegisterBusIO+0x2c>
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <ES_WIFI_RegisterBusIO+0x2c>
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e010      	b.n	8002bfe <ES_WIFI_RegisterBusIO+0x52>
  }

  Obj->fops.IO_Init = IO_Init;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  Obj->fops.IO_Send = IO_Send;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Receive = IO_Receive;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  Obj->fops.IO_Delay = IO_Delay;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  return ES_WIFI_STATUS_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	4931      	ldr	r1, [pc, #196]	; (8002ce8 <ES_WIFI_Connect+0xdc>)
 8002c24:	4618      	mov	r0, r3
 8002c26:	f007 fa3f 	bl	800a0a8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002c36:	461a      	mov	r2, r3
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f7ff ff41 	bl	8002ac0 <AT_ExecuteCommand>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d14a      	bne.n	8002cde <ES_WIFI_Connect+0xd2>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4926      	ldr	r1, [pc, #152]	; (8002cec <ES_WIFI_Connect+0xe0>)
 8002c52:	4618      	mov	r0, r3
 8002c54:	f007 fa28 	bl	800a0a8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002c64:	461a      	mov	r2, r3
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f7ff ff2a 	bl	8002ac0 <AT_ExecuteCommand>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d133      	bne.n	8002cde <ES_WIFI_Connect+0xd2>
    {
      Obj->Security = SecType;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	491a      	ldr	r1, [pc, #104]	; (8002cf0 <ES_WIFI_Connect+0xe4>)
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f007 fa0d 	bl	800a0a8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f7ff ff0f 	bl	8002ac0 <AT_ExecuteCommand>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d118      	bne.n	8002cde <ES_WIFI_Connect+0xd2>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002cb2:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <ES_WIFI_Connect+0xe8>)
 8002cb4:	6810      	ldr	r0, [r2, #0]
 8002cb6:	6018      	str	r0, [r3, #0]
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f7ff fefa 	bl	8002ac0 <AT_ExecuteCommand>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d103      	bne.n	8002cde <ES_WIFI_Connect+0xd2>
        {
           Obj->NetSettings.IsConnected = 1;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
        }
      }
    }
  }
  return ret;
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	0800da9c 	.word	0x0800da9c
 8002cec:	0800daa4 	.word	0x0800daa4
 8002cf0:	0800daac 	.word	0x0800daac
 8002cf4:	0800dab4 	.word	0x0800dab4

08002cf8 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  sprintf((char*)Obj->CmdData,"C?\r");
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002d06:	4a10      	ldr	r2, [pc, #64]	; (8002d48 <ES_WIFI_GetNetworkSettings+0x50>)
 8002d08:	6810      	ldr	r0, [r2, #0]
 8002d0a:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002d18:	461a      	mov	r2, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff fed0 	bl	8002ac0 <AT_ExecuteCommand>
 8002d20:	4603      	mov	r3, r0
 8002d22:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d108      	bne.n	8002d3c <ES_WIFI_GetNetworkSettings+0x44>
  {
    AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3385      	adds	r3, #133	; 0x85
 8002d34:	4619      	mov	r1, r3
 8002d36:	4610      	mov	r0, r2
 8002d38:	f7ff fe12 	bl	8002960 <AT_ParseConnSettings>
  }
  return ret;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	0800dabc 	.word	0x0800dabc

08002d4c <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;

  sprintf((char*)Obj->CmdData,"Z5\r");
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002d5c:	4a11      	ldr	r2, [pc, #68]	; (8002da4 <ES_WIFI_GetMACAddress+0x58>)
 8002d5e:	6810      	ldr	r0, [r2, #0]
 8002d60:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002d6e:	461a      	mov	r2, r3
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff fea5 	bl	8002ac0 <AT_ExecuteCommand>
 8002d76:	4603      	mov	r3, r0
 8002d78:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10c      	bne.n	8002d9a <ES_WIFI_GetMACAddress+0x4e>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002d86:	3302      	adds	r3, #2
 8002d88:	4907      	ldr	r1, [pc, #28]	; (8002da8 <ES_WIFI_GetMACAddress+0x5c>)
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f007 fffc 	bl	800ad88 <strtok>
 8002d90:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8002d92:	6839      	ldr	r1, [r7, #0]
 8002d94:	68b8      	ldr	r0, [r7, #8]
 8002d96:	f7ff fd18 	bl	80027ca <ParseMAC>
  }
  return ret;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	0800db1c 	.word	0x0800db1c
 8002da8:	0800db20 	.word	0x0800db20

08002dac <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08c      	sub	sp, #48	; 0x30
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8002db4:	4b56      	ldr	r3, [pc, #344]	; (8002f10 <SPI_WIFI_MspInit+0x164>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	4a55      	ldr	r2, [pc, #340]	; (8002f10 <SPI_WIFI_MspInit+0x164>)
 8002dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8002dc0:	4b53      	ldr	r3, [pc, #332]	; (8002f10 <SPI_WIFI_MspInit+0x164>)
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dcc:	4b50      	ldr	r3, [pc, #320]	; (8002f10 <SPI_WIFI_MspInit+0x164>)
 8002dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd0:	4a4f      	ldr	r2, [pc, #316]	; (8002f10 <SPI_WIFI_MspInit+0x164>)
 8002dd2:	f043 0302 	orr.w	r3, r3, #2
 8002dd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dd8:	4b4d      	ldr	r3, [pc, #308]	; (8002f10 <SPI_WIFI_MspInit+0x164>)
 8002dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de4:	4b4a      	ldr	r3, [pc, #296]	; (8002f10 <SPI_WIFI_MspInit+0x164>)
 8002de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de8:	4a49      	ldr	r2, [pc, #292]	; (8002f10 <SPI_WIFI_MspInit+0x164>)
 8002dea:	f043 0304 	orr.w	r3, r3, #4
 8002dee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002df0:	4b47      	ldr	r3, [pc, #284]	; (8002f10 <SPI_WIFI_MspInit+0x164>)
 8002df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dfc:	4b44      	ldr	r3, [pc, #272]	; (8002f10 <SPI_WIFI_MspInit+0x164>)
 8002dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e00:	4a43      	ldr	r2, [pc, #268]	; (8002f10 <SPI_WIFI_MspInit+0x164>)
 8002e02:	f043 0310 	orr.w	r3, r3, #16
 8002e06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e08:	4b41      	ldr	r3, [pc, #260]	; (8002f10 <SPI_WIFI_MspInit+0x164>)
 8002e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
  
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8002e14:	2200      	movs	r2, #0
 8002e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e1a:	483e      	ldr	r0, [pc, #248]	; (8002f14 <SPI_WIFI_MspInit+0x168>)
 8002e1c:	f001 ff96 	bl	8004d4c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e24:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002e26:	2301      	movs	r3, #1
 8002e28:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8002e32:	f107 031c 	add.w	r3, r7, #28
 8002e36:	4619      	mov	r1, r3
 8002e38:	4836      	ldr	r0, [pc, #216]	; (8002f14 <SPI_WIFI_MspInit+0x168>)
 8002e3a:	f001 fceb 	bl	8004814 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8002e42:	4b35      	ldr	r3, [pc, #212]	; (8002f18 <SPI_WIFI_MspInit+0x16c>)
 8002e44:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002e4e:	f107 031c 	add.w	r3, r7, #28
 8002e52:	4619      	mov	r1, r3
 8002e54:	4831      	ldr	r0, [pc, #196]	; (8002f1c <SPI_WIFI_MspInit+0x170>)
 8002e56:	f001 fcdd 	bl	8004814 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8002e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e5e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002e60:	2301      	movs	r3, #1
 8002e62:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002e70:	f107 031c 	add.w	r3, r7, #28
 8002e74:	4619      	mov	r1, r3
 8002e76:	4829      	ldr	r0, [pc, #164]	; (8002f1c <SPI_WIFI_MspInit+0x170>)
 8002e78:	f001 fccc 	bl	8004814 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE, GPIO_PIN_0, GPIO_PIN_SET ); 
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	2101      	movs	r1, #1
 8002e80:	4826      	ldr	r0, [pc, #152]	; (8002f1c <SPI_WIFI_MspInit+0x170>)
 8002e82:	f001 ff63 	bl	8004d4c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_0;
 8002e86:	2301      	movs	r3, #1
 8002e88:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002e92:	2301      	movs	r3, #1
 8002e94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8002e96:	f107 031c 	add.w	r3, r7, #28
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	481f      	ldr	r0, [pc, #124]	; (8002f1c <SPI_WIFI_MspInit+0x170>)
 8002e9e:	f001 fcb9 	bl	8004814 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       = GPIO_PIN_10;
 8002ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ea6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002eb4:	2306      	movs	r3, #6
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002eb8:	f107 031c 	add.w	r3, r7, #28
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4818      	ldr	r0, [pc, #96]	; (8002f20 <SPI_WIFI_MspInit+0x174>)
 8002ec0:	f001 fca8 	bl	8004814 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8002ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002ed6:	2306      	movs	r3, #6
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002eda:	f107 031c 	add.w	r3, r7, #28
 8002ede:	4619      	mov	r1, r3
 8002ee0:	480f      	ldr	r0, [pc, #60]	; (8002f20 <SPI_WIFI_MspInit+0x174>)
 8002ee2:	f001 fc97 	bl	8004814 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8002ee6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eea:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002eec:	2302      	movs	r3, #2
 8002eee:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002ef8:	2306      	movs	r3, #6
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002efc:	f107 031c 	add.w	r3, r7, #28
 8002f00:	4619      	mov	r1, r3
 8002f02:	4807      	ldr	r0, [pc, #28]	; (8002f20 <SPI_WIFI_MspInit+0x174>)
 8002f04:	f001 fc86 	bl	8004814 <HAL_GPIO_Init>
}
 8002f08:	bf00      	nop
 8002f0a:	3730      	adds	r7, #48	; 0x30
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000
 8002f14:	48000400 	.word	0x48000400
 8002f18:	10110000 	.word	0x10110000
 8002f1c:	48001000 	.word	0x48001000
 8002f20:	48000800 	.word	0x48000800

08002f24 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8002f2a:	f000 fab3 	bl	8003494 <HAL_GetTick>
 8002f2e:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
  
  hspi.Instance               = SPI3;
 8002f34:	4b51      	ldr	r3, [pc, #324]	; (800307c <SPI_WIFI_Init+0x158>)
 8002f36:	4a52      	ldr	r2, [pc, #328]	; (8003080 <SPI_WIFI_Init+0x15c>)
 8002f38:	601a      	str	r2, [r3, #0]
  SPI_WIFI_MspInit(&hspi);
 8002f3a:	4850      	ldr	r0, [pc, #320]	; (800307c <SPI_WIFI_Init+0x158>)
 8002f3c:	f7ff ff36 	bl	8002dac <SPI_WIFI_MspInit>
  
  hspi.Init.Mode              = SPI_MODE_MASTER;
 8002f40:	4b4e      	ldr	r3, [pc, #312]	; (800307c <SPI_WIFI_Init+0x158>)
 8002f42:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f46:	605a      	str	r2, [r3, #4]
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8002f48:	4b4c      	ldr	r3, [pc, #304]	; (800307c <SPI_WIFI_Init+0x158>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
  hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8002f4e:	4b4b      	ldr	r3, [pc, #300]	; (800307c <SPI_WIFI_Init+0x158>)
 8002f50:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8002f54:	60da      	str	r2, [r3, #12]
  hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8002f56:	4b49      	ldr	r3, [pc, #292]	; (800307c <SPI_WIFI_Init+0x158>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002f5c:	4b47      	ldr	r3, [pc, #284]	; (800307c <SPI_WIFI_Init+0x158>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	615a      	str	r2, [r3, #20]
  hspi.Init.NSS               = SPI_NSS_SOFT;
 8002f62:	4b46      	ldr	r3, [pc, #280]	; (800307c <SPI_WIFI_Init+0x158>)
 8002f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f68:	619a      	str	r2, [r3, #24]
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;  /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8002f6a:	4b44      	ldr	r3, [pc, #272]	; (800307c <SPI_WIFI_Init+0x158>)
 8002f6c:	2210      	movs	r2, #16
 8002f6e:	61da      	str	r2, [r3, #28]
  hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002f70:	4b42      	ldr	r3, [pc, #264]	; (800307c <SPI_WIFI_Init+0x158>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	621a      	str	r2, [r3, #32]
  hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8002f76:	4b41      	ldr	r3, [pc, #260]	; (800307c <SPI_WIFI_Init+0x158>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8002f7c:	4b3f      	ldr	r3, [pc, #252]	; (800307c <SPI_WIFI_Init+0x158>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.CRCPolynomial     = 0;
 8002f82:	4b3e      	ldr	r3, [pc, #248]	; (800307c <SPI_WIFI_Init+0x158>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	62da      	str	r2, [r3, #44]	; 0x2c
  
  if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8002f88:	483c      	ldr	r0, [pc, #240]	; (800307c <SPI_WIFI_Init+0x158>)
 8002f8a:	f004 fa07 	bl	800739c <HAL_SPI_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <SPI_WIFI_Init+0x76>
  {
    return -1;
 8002f94:	f04f 33ff 	mov.w	r3, #4294967295
 8002f98:	e06c      	b.n	8003074 <SPI_WIFI_Init+0x150>
  }
  
  WIFI_RESET_MODULE();
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fa0:	4838      	ldr	r0, [pc, #224]	; (8003084 <SPI_WIFI_Init+0x160>)
 8002fa2:	f001 fed3 	bl	8004d4c <HAL_GPIO_WritePin>
 8002fa6:	200a      	movs	r0, #10
 8002fa8:	f000 fa80 	bl	80034ac <HAL_Delay>
 8002fac:	2201      	movs	r2, #1
 8002fae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fb2:	4834      	ldr	r0, [pc, #208]	; (8003084 <SPI_WIFI_Init+0x160>)
 8002fb4:	f001 feca 	bl	8004d4c <HAL_GPIO_WritePin>
 8002fb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fbc:	f000 fa76 	bl	80034ac <HAL_Delay>
  
  WIFI_ENABLE_NSS(); 
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	482f      	ldr	r0, [pc, #188]	; (8003084 <SPI_WIFI_Init+0x160>)
 8002fc6:	f001 fec1 	bl	8004d4c <HAL_GPIO_WritePin>
 8002fca:	200a      	movs	r0, #10
 8002fcc:	f000 fa6e 	bl	80034ac <HAL_Delay>
  
  while (WIFI_IS_CMDDATA_READY())
 8002fd0:	e023      	b.n	800301a <SPI_WIFI_Init+0xf6>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	463a      	mov	r2, r7
 8002fd6:	18d1      	adds	r1, r2, r3
 8002fd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fdc:	2201      	movs	r2, #1
 8002fde:	4827      	ldr	r0, [pc, #156]	; (800307c <SPI_WIFI_Init+0x158>)
 8002fe0:	f004 fc15 	bl	800780e <HAL_SPI_Receive>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	3302      	adds	r3, #2
 8002fec:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8002fee:	f000 fa51 	bl	8003494 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffc:	d202      	bcs.n	8003004 <SPI_WIFI_Init+0xe0>
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <SPI_WIFI_Init+0xf6>
    {
      WIFI_DISABLE_NSS(); 
 8003004:	2201      	movs	r2, #1
 8003006:	2101      	movs	r1, #1
 8003008:	481e      	ldr	r0, [pc, #120]	; (8003084 <SPI_WIFI_Init+0x160>)
 800300a:	f001 fe9f 	bl	8004d4c <HAL_GPIO_WritePin>
 800300e:	200a      	movs	r0, #10
 8003010:	f000 fa4c 	bl	80034ac <HAL_Delay>
      return -1;
 8003014:	f04f 33ff 	mov.w	r3, #4294967295
 8003018:	e02c      	b.n	8003074 <SPI_WIFI_Init+0x150>
  while (WIFI_IS_CMDDATA_READY())
 800301a:	2102      	movs	r1, #2
 800301c:	4819      	ldr	r0, [pc, #100]	; (8003084 <SPI_WIFI_Init+0x160>)
 800301e:	f001 fe7d 	bl	8004d1c <HAL_GPIO_ReadPin>
 8003022:	4603      	mov	r3, r0
 8003024:	2b01      	cmp	r3, #1
 8003026:	d0d4      	beq.n	8002fd2 <SPI_WIFI_Init+0xae>
    }    
  }
  
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8003028:	783b      	ldrb	r3, [r7, #0]
 800302a:	2b15      	cmp	r3, #21
 800302c:	d10e      	bne.n	800304c <SPI_WIFI_Init+0x128>
 800302e:	787b      	ldrb	r3, [r7, #1]
 8003030:	2b15      	cmp	r3, #21
 8003032:	d10b      	bne.n	800304c <SPI_WIFI_Init+0x128>
 8003034:	78bb      	ldrb	r3, [r7, #2]
 8003036:	2b0d      	cmp	r3, #13
 8003038:	d108      	bne.n	800304c <SPI_WIFI_Init+0x128>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800303a:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800303c:	2b0a      	cmp	r3, #10
 800303e:	d105      	bne.n	800304c <SPI_WIFI_Init+0x128>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8003040:	793b      	ldrb	r3, [r7, #4]
 8003042:	2b3e      	cmp	r3, #62	; 0x3e
 8003044:	d102      	bne.n	800304c <SPI_WIFI_Init+0x128>
 8003046:	797b      	ldrb	r3, [r7, #5]
 8003048:	2b20      	cmp	r3, #32
 800304a:	d00a      	beq.n	8003062 <SPI_WIFI_Init+0x13e>
  {
    WIFI_DISABLE_NSS(); 
 800304c:	2201      	movs	r2, #1
 800304e:	2101      	movs	r1, #1
 8003050:	480c      	ldr	r0, [pc, #48]	; (8003084 <SPI_WIFI_Init+0x160>)
 8003052:	f001 fe7b 	bl	8004d4c <HAL_GPIO_WritePin>
 8003056:	200a      	movs	r0, #10
 8003058:	f000 fa28 	bl	80034ac <HAL_Delay>
    return -1;
 800305c:	f04f 33ff 	mov.w	r3, #4294967295
 8003060:	e008      	b.n	8003074 <SPI_WIFI_Init+0x150>
  }    
   
  WIFI_DISABLE_NSS(); 
 8003062:	2201      	movs	r2, #1
 8003064:	2101      	movs	r1, #1
 8003066:	4807      	ldr	r0, [pc, #28]	; (8003084 <SPI_WIFI_Init+0x160>)
 8003068:	f001 fe70 	bl	8004d4c <HAL_GPIO_WritePin>
 800306c:	200a      	movs	r0, #10
 800306e:	f000 fa1d 	bl	80034ac <HAL_Delay>
  return 0;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	200006ac 	.word	0x200006ac
 8003080:	40003c00 	.word	0x40003c00
 8003084:	48001000 	.word	0x48001000

08003088 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800308c:	4802      	ldr	r0, [pc, #8]	; (8003098 <SPI_WIFI_DeInit+0x10>)
 800308e:	f004 fa28 	bl	80074e2 <HAL_SPI_DeInit>
  return 0;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	bd80      	pop	{r7, pc}
 8003098:	200006ac 	.word	0x200006ac

0800309c <SPI_WIFI_ReceiveData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	460b      	mov	r3, r1
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80030aa:	f000 f9f3 	bl	8003494 <HAL_GetTick>
 80030ae:	61b8      	str	r0, [r7, #24]
  int16_t length = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	83fb      	strh	r3, [r7, #30]
  uint8_t tmp[2];
  
  HAL_SPIEx_FlushRxFifo(&hspi);
 80030b4:	4842      	ldr	r0, [pc, #264]	; (80031c0 <SPI_WIFI_ReceiveData+0x124>)
 80030b6:	f005 f9c1 	bl	800843c <HAL_SPIEx_FlushRxFifo>
  
  WIFI_DISABLE_NSS(); 
 80030ba:	2201      	movs	r2, #1
 80030bc:	2101      	movs	r1, #1
 80030be:	4841      	ldr	r0, [pc, #260]	; (80031c4 <SPI_WIFI_ReceiveData+0x128>)
 80030c0:	f001 fe44 	bl	8004d4c <HAL_GPIO_WritePin>
 80030c4:	200a      	movs	r0, #10
 80030c6:	f000 f9f1 	bl	80034ac <HAL_Delay>
  
  while (!WIFI_IS_CMDDATA_READY())
 80030ca:	e00a      	b.n	80030e2 <SPI_WIFI_ReceiveData+0x46>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80030cc:	f000 f9e2 	bl	8003494 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d202      	bcs.n	80030e2 <SPI_WIFI_ReceiveData+0x46>
    {
      return -1;
 80030dc:	f04f 33ff 	mov.w	r3, #4294967295
 80030e0:	e06a      	b.n	80031b8 <SPI_WIFI_ReceiveData+0x11c>
  while (!WIFI_IS_CMDDATA_READY())
 80030e2:	2102      	movs	r1, #2
 80030e4:	4837      	ldr	r0, [pc, #220]	; (80031c4 <SPI_WIFI_ReceiveData+0x128>)
 80030e6:	f001 fe19 	bl	8004d1c <HAL_GPIO_ReadPin>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d1ed      	bne.n	80030cc <SPI_WIFI_ReceiveData+0x30>
    }
  }
  
  WIFI_ENABLE_NSS(); 
 80030f0:	2200      	movs	r2, #0
 80030f2:	2101      	movs	r1, #1
 80030f4:	4833      	ldr	r0, [pc, #204]	; (80031c4 <SPI_WIFI_ReceiveData+0x128>)
 80030f6:	f001 fe29 	bl	8004d4c <HAL_GPIO_WritePin>
 80030fa:	200a      	movs	r0, #10
 80030fc:	f000 f9d6 	bl	80034ac <HAL_Delay>
  
  while (WIFI_IS_CMDDATA_READY())
 8003100:	e049      	b.n	8003196 <SPI_WIFI_ReceiveData+0xfa>
  {
    if((length < len) || (!len))
 8003102:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003106:	897b      	ldrh	r3, [r7, #10]
 8003108:	429a      	cmp	r2, r3
 800310a:	db02      	blt.n	8003112 <SPI_WIFI_ReceiveData+0x76>
 800310c:	897b      	ldrh	r3, [r7, #10]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d148      	bne.n	80031a4 <SPI_WIFI_ReceiveData+0x108>
    {
      HAL_SPI_Receive(&hspi, tmp, 1, timeout) ;    
 8003112:	f107 0114 	add.w	r1, r7, #20
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	4829      	ldr	r0, [pc, #164]	; (80031c0 <SPI_WIFI_ReceiveData+0x124>)
 800311c:	f004 fb77 	bl	800780e <HAL_SPI_Receive>
      /* let some time to hardware to change CMDDATA signal */
      if(tmp[1] == 0x15)
 8003120:	7d7b      	ldrb	r3, [r7, #21]
 8003122:	2b15      	cmp	r3, #21
 8003124:	d102      	bne.n	800312c <SPI_WIFI_ReceiveData+0x90>
      {
       SPI_WIFI_Delay(1);
 8003126:	2001      	movs	r0, #1
 8003128:	f000 f8c0 	bl	80032ac <SPI_WIFI_Delay>
      }
      /*This the last data */
      if(!WIFI_IS_CMDDATA_READY())
 800312c:	2102      	movs	r1, #2
 800312e:	4825      	ldr	r0, [pc, #148]	; (80031c4 <SPI_WIFI_ReceiveData+0x128>)
 8003130:	f001 fdf4 	bl	8004d1c <HAL_GPIO_ReadPin>
 8003134:	4603      	mov	r3, r0
 8003136:	2b01      	cmp	r3, #1
 8003138:	d00c      	beq.n	8003154 <SPI_WIFI_ReceiveData+0xb8>
      {
        if(tmp[1] == 0x15)
 800313a:	7d7b      	ldrb	r3, [r7, #21]
 800313c:	2b15      	cmp	r3, #21
 800313e:	d109      	bne.n	8003154 <SPI_WIFI_ReceiveData+0xb8>
        {
          pData[0] = tmp[0];
 8003140:	7d3a      	ldrb	r2, [r7, #20]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	701a      	strb	r2, [r3, #0]
          length++;
 8003146:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800314a:	b29b      	uxth	r3, r3
 800314c:	3301      	adds	r3, #1
 800314e:	b29b      	uxth	r3, r3
 8003150:	83fb      	strh	r3, [r7, #30]
          break;
 8003152:	e027      	b.n	80031a4 <SPI_WIFI_ReceiveData+0x108>
        }     
      }
      
      pData[0] = tmp[0];
 8003154:	7d3a      	ldrb	r2, [r7, #20]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3301      	adds	r3, #1
 800315e:	7d7a      	ldrb	r2, [r7, #21]
 8003160:	701a      	strb	r2, [r3, #0]
      length += 2;
 8003162:	8bfb      	ldrh	r3, [r7, #30]
 8003164:	3302      	adds	r3, #2
 8003166:	b29b      	uxth	r3, r3
 8003168:	83fb      	strh	r3, [r7, #30]
      pData  += 2;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3302      	adds	r3, #2
 800316e:	60fb      	str	r3, [r7, #12]
      
      if((HAL_GetTick() - tickstart ) > timeout)
 8003170:	f000 f990 	bl	8003494 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	429a      	cmp	r2, r3
 800317e:	d20a      	bcs.n	8003196 <SPI_WIFI_ReceiveData+0xfa>
      {
        WIFI_DISABLE_NSS(); 
 8003180:	2201      	movs	r2, #1
 8003182:	2101      	movs	r1, #1
 8003184:	480f      	ldr	r0, [pc, #60]	; (80031c4 <SPI_WIFI_ReceiveData+0x128>)
 8003186:	f001 fde1 	bl	8004d4c <HAL_GPIO_WritePin>
 800318a:	200a      	movs	r0, #10
 800318c:	f000 f98e 	bl	80034ac <HAL_Delay>
        return -1;
 8003190:	f04f 33ff 	mov.w	r3, #4294967295
 8003194:	e010      	b.n	80031b8 <SPI_WIFI_ReceiveData+0x11c>
  while (WIFI_IS_CMDDATA_READY())
 8003196:	2102      	movs	r1, #2
 8003198:	480a      	ldr	r0, [pc, #40]	; (80031c4 <SPI_WIFI_ReceiveData+0x128>)
 800319a:	f001 fdbf 	bl	8004d1c <HAL_GPIO_ReadPin>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d0ae      	beq.n	8003102 <SPI_WIFI_ReceiveData+0x66>
    {
      break;
    }
  }
  
  WIFI_DISABLE_NSS(); 
 80031a4:	2201      	movs	r2, #1
 80031a6:	2101      	movs	r1, #1
 80031a8:	4806      	ldr	r0, [pc, #24]	; (80031c4 <SPI_WIFI_ReceiveData+0x128>)
 80031aa:	f001 fdcf 	bl	8004d4c <HAL_GPIO_WritePin>
 80031ae:	200a      	movs	r0, #10
 80031b0:	f000 f97c 	bl	80034ac <HAL_Delay>
  return length;
 80031b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	200006ac 	.word	0x200006ac
 80031c4:	48001000 	.word	0x48001000

080031c8 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	460b      	mov	r3, r1
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80031d6:	f000 f95d 	bl	8003494 <HAL_GetTick>
 80031da:	6178      	str	r0, [r7, #20]
  uint8_t Padding[2];
  
  while (!WIFI_IS_CMDDATA_READY())
 80031dc:	e012      	b.n	8003204 <SPI_WIFI_SendData+0x3c>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80031de:	f000 f959 	bl	8003494 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d20a      	bcs.n	8003204 <SPI_WIFI_SendData+0x3c>
    {
      WIFI_DISABLE_NSS();       
 80031ee:	2201      	movs	r2, #1
 80031f0:	2101      	movs	r1, #1
 80031f2:	482c      	ldr	r0, [pc, #176]	; (80032a4 <SPI_WIFI_SendData+0xdc>)
 80031f4:	f001 fdaa 	bl	8004d4c <HAL_GPIO_WritePin>
 80031f8:	200a      	movs	r0, #10
 80031fa:	f000 f957 	bl	80034ac <HAL_Delay>
      return -1;
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003202:	e04b      	b.n	800329c <SPI_WIFI_SendData+0xd4>
  while (!WIFI_IS_CMDDATA_READY())
 8003204:	2102      	movs	r1, #2
 8003206:	4827      	ldr	r0, [pc, #156]	; (80032a4 <SPI_WIFI_SendData+0xdc>)
 8003208:	f001 fd88 	bl	8004d1c <HAL_GPIO_ReadPin>
 800320c:	4603      	mov	r3, r0
 800320e:	2b01      	cmp	r3, #1
 8003210:	d1e5      	bne.n	80031de <SPI_WIFI_SendData+0x16>
    }
  }
  
  WIFI_ENABLE_NSS(); 
 8003212:	2200      	movs	r2, #0
 8003214:	2101      	movs	r1, #1
 8003216:	4823      	ldr	r0, [pc, #140]	; (80032a4 <SPI_WIFI_SendData+0xdc>)
 8003218:	f001 fd98 	bl	8004d4c <HAL_GPIO_WritePin>
 800321c:	200a      	movs	r0, #10
 800321e:	f000 f945 	bl	80034ac <HAL_Delay>
  if (len > 1)
 8003222:	897b      	ldrh	r3, [r7, #10]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d915      	bls.n	8003254 <SPI_WIFI_SendData+0x8c>
  {
   if( HAL_SPI_Transmit(&hspi, (uint8_t *)pdata , len/2, timeout) != HAL_OK)
 8003228:	897b      	ldrh	r3, [r7, #10]
 800322a:	085b      	lsrs	r3, r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68f9      	ldr	r1, [r7, #12]
 8003232:	481d      	ldr	r0, [pc, #116]	; (80032a8 <SPI_WIFI_SendData+0xe0>)
 8003234:	f004 f97d 	bl	8007532 <HAL_SPI_Transmit>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <SPI_WIFI_SendData+0x8c>
   {
     WIFI_DISABLE_NSS(); 
 800323e:	2201      	movs	r2, #1
 8003240:	2101      	movs	r1, #1
 8003242:	4818      	ldr	r0, [pc, #96]	; (80032a4 <SPI_WIFI_SendData+0xdc>)
 8003244:	f001 fd82 	bl	8004d4c <HAL_GPIO_WritePin>
 8003248:	200a      	movs	r0, #10
 800324a:	f000 f92f 	bl	80034ac <HAL_Delay>
     return -1;
 800324e:	f04f 33ff 	mov.w	r3, #4294967295
 8003252:	e023      	b.n	800329c <SPI_WIFI_SendData+0xd4>
   }
  }
  
  if ( len & 1)
 8003254:	897b      	ldrh	r3, [r7, #10]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d01c      	beq.n	8003298 <SPI_WIFI_SendData+0xd0>
  {
    Padding[0] = pdata[len-1];
 800325e:	897b      	ldrh	r3, [r7, #10]
 8003260:	3b01      	subs	r3, #1
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4413      	add	r3, r2
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	743b      	strb	r3, [r7, #16]
    Padding[1] = '\n';
 800326a:	230a      	movs	r3, #10
 800326c:	747b      	strb	r3, [r7, #17]
    
    if( HAL_SPI_Transmit(&hspi, Padding, 1, timeout) != HAL_OK)
 800326e:	f107 0110 	add.w	r1, r7, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	480c      	ldr	r0, [pc, #48]	; (80032a8 <SPI_WIFI_SendData+0xe0>)
 8003278:	f004 f95b 	bl	8007532 <HAL_SPI_Transmit>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <SPI_WIFI_SendData+0xd0>
    {
      WIFI_DISABLE_NSS();       
 8003282:	2201      	movs	r2, #1
 8003284:	2101      	movs	r1, #1
 8003286:	4807      	ldr	r0, [pc, #28]	; (80032a4 <SPI_WIFI_SendData+0xdc>)
 8003288:	f001 fd60 	bl	8004d4c <HAL_GPIO_WritePin>
 800328c:	200a      	movs	r0, #10
 800328e:	f000 f90d 	bl	80034ac <HAL_Delay>
      return -1;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
 8003296:	e001      	b.n	800329c <SPI_WIFI_SendData+0xd4>
    }
  }
  
  return len;
 8003298:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	48001000 	.word	0x48001000
 80032a8:	200006ac 	.word	0x200006ac

080032ac <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f8f9 	bl	80034ac <HAL_Delay>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 80032ce:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <WIFI_Init+0x40>)
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <WIFI_Init+0x44>)
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	4b0d      	ldr	r3, [pc, #52]	; (800330c <WIFI_Init+0x48>)
 80032d8:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <WIFI_Init+0x4c>)
 80032da:	490e      	ldr	r1, [pc, #56]	; (8003314 <WIFI_Init+0x50>)
 80032dc:	480e      	ldr	r0, [pc, #56]	; (8003318 <WIFI_Init+0x54>)
 80032de:	f7ff fc65 	bl	8002bac <ES_WIFI_RegisterBusIO>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d107      	bne.n	80032f8 <WIFI_Init+0x34>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {

    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80032e8:	480b      	ldr	r0, [pc, #44]	; (8003318 <WIFI_Init+0x54>)
 80032ea:	f7ff fc31 	bl	8002b50 <ES_WIFI_Init>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 80032f8:	79fb      	ldrb	r3, [r7, #7]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	0800309d 	.word	0x0800309d
 8003308:	080031c9 	.word	0x080031c9
 800330c:	080032ad 	.word	0x080032ad
 8003310:	08003089 	.word	0x08003089
 8003314:	08002f25 	.word	0x08002f25
 8003318:	20000710 	.word	0x20000710

0800331c <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	4613      	mov	r3, r2
 8003328:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	68f9      	ldr	r1, [r7, #12]
 8003334:	4809      	ldr	r0, [pc, #36]	; (800335c <WIFI_Connect+0x40>)
 8003336:	f7ff fc69 	bl	8002c0c <ES_WIFI_Connect>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d107      	bne.n	8003350 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003340:	4806      	ldr	r0, [pc, #24]	; (800335c <WIFI_Connect+0x40>)
 8003342:	f7ff fcd9 	bl	8002cf8 <ES_WIFI_GetNetworkSettings>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	75fb      	strb	r3, [r7, #23]
    }

  }
  return ret;
 8003350:	7dfb      	ldrb	r3, [r7, #23]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000710 	.word	0x20000710

08003360 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]

  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4806      	ldr	r0, [pc, #24]	; (8003388 <WIFI_GetMAC_Address+0x28>)
 8003370:	f7ff fcec 	bl	8002d4c <ES_WIFI_GetMACAddress>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800337e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000710 	.word	0x20000710

0800338c <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]

  if(EsWifiObj.NetSettings.IsConnected)
 8003398:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <WIFI_GetIP_Address+0x34>)
 800339a:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <WIFI_GetIP_Address+0x26>
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 80033a2:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <WIFI_GetIP_Address+0x34>)
 80033a4:	f8d3 30cd 	ldr.w	r3, [r3, #205]	; 0xcd
 80033a8:	461a      	mov	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	20000710 	.word	0x20000710

080033c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033ce:	2003      	movs	r0, #3
 80033d0:	f001 f864 	bl	800449c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033d4:	2000      	movs	r0, #0
 80033d6:	f000 f80d 	bl	80033f4 <HAL_InitTick>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	71fb      	strb	r3, [r7, #7]
 80033e4:	e001      	b.n	80033ea <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033e6:	f7fe fdbf 	bl	8001f68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033ea:	79fb      	ldrb	r3, [r7, #7]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003400:	4b17      	ldr	r3, [pc, #92]	; (8003460 <HAL_InitTick+0x6c>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d023      	beq.n	8003450 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003408:	4b16      	ldr	r3, [pc, #88]	; (8003464 <HAL_InitTick+0x70>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4b14      	ldr	r3, [pc, #80]	; (8003460 <HAL_InitTick+0x6c>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	4619      	mov	r1, r3
 8003412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003416:	fbb3 f3f1 	udiv	r3, r3, r1
 800341a:	fbb2 f3f3 	udiv	r3, r2, r3
 800341e:	4618      	mov	r0, r3
 8003420:	f001 f87f 	bl	8004522 <HAL_SYSTICK_Config>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10f      	bne.n	800344a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b0f      	cmp	r3, #15
 800342e:	d809      	bhi.n	8003444 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003430:	2200      	movs	r2, #0
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	f04f 30ff 	mov.w	r0, #4294967295
 8003438:	f001 f83b 	bl	80044b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800343c:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <HAL_InitTick+0x74>)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e007      	b.n	8003454 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
 8003448:	e004      	b.n	8003454 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	e001      	b.n	8003454 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003454:	7bfb      	ldrb	r3, [r7, #15]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000008 	.word	0x20000008
 8003464:	20000000 	.word	0x20000000
 8003468:	20000004 	.word	0x20000004

0800346c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_IncTick+0x20>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <HAL_IncTick+0x24>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4413      	add	r3, r2
 800347c:	4a04      	ldr	r2, [pc, #16]	; (8003490 <HAL_IncTick+0x24>)
 800347e:	6013      	str	r3, [r2, #0]
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000008 	.word	0x20000008
 8003490:	20000e78 	.word	0x20000e78

08003494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return uwTick;
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <HAL_GetTick+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000e78 	.word	0x20000e78

080034ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034b4:	f7ff ffee 	bl	8003494 <HAL_GetTick>
 80034b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d005      	beq.n	80034d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <HAL_Delay+0x40>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4413      	add	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034d2:	bf00      	nop
 80034d4:	f7ff ffde 	bl	8003494 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d8f7      	bhi.n	80034d4 <HAL_Delay+0x28>
  {
  }
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000008 	.word	0x20000008

080034f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	609a      	str	r2, [r3, #8]
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	609a      	str	r2, [r3, #8]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	3360      	adds	r3, #96	; 0x60
 800356a:	461a      	mov	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b08      	ldr	r3, [pc, #32]	; (800359c <LL_ADC_SetOffset+0x44>)
 800357a:	4013      	ands	r3, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	4313      	orrs	r3, r2
 8003588:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	03fff000 	.word	0x03fff000

080035a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3360      	adds	r3, #96	; 0x60
 80035ae:	461a      	mov	r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3360      	adds	r3, #96	; 0x60
 80035dc:	461a      	mov	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	615a      	str	r2, [r3, #20]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	3330      	adds	r3, #48	; 0x30
 8003638:	461a      	mov	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	0a1b      	lsrs	r3, r3, #8
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	f003 030c 	and.w	r3, r3, #12
 8003644:	4413      	add	r3, r2
 8003646:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f003 031f 	and.w	r3, r3, #31
 8003652:	211f      	movs	r1, #31
 8003654:	fa01 f303 	lsl.w	r3, r1, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	401a      	ands	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	f003 011f 	and.w	r1, r3, #31
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	431a      	orrs	r2, r3
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3314      	adds	r3, #20
 8003690:	461a      	mov	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	0e5b      	lsrs	r3, r3, #25
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	4413      	add	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	0d1b      	lsrs	r3, r3, #20
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	2107      	movs	r1, #7
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	401a      	ands	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	0d1b      	lsrs	r3, r3, #20
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	fa01 f303 	lsl.w	r3, r1, r3
 80036c4:	431a      	orrs	r2, r3
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036ca:	bf00      	nop
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f0:	43db      	mvns	r3, r3
 80036f2:	401a      	ands	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f003 0318 	and.w	r3, r3, #24
 80036fa:	4908      	ldr	r1, [pc, #32]	; (800371c <LL_ADC_SetChannelSingleDiff+0x44>)
 80036fc:	40d9      	lsrs	r1, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	400b      	ands	r3, r1
 8003702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003706:	431a      	orrs	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800370e:	bf00      	nop
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	0007ffff 	.word	0x0007ffff

08003720 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003730:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6093      	str	r3, [r2, #8]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003758:	d101      	bne.n	800375e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800377c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003780:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037a8:	d101      	bne.n	80037ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <LL_ADC_IsEnabled+0x18>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <LL_ADC_IsEnabled+0x1a>
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d101      	bne.n	80037fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b08      	cmp	r3, #8
 800381a:	d101      	bne.n	8003820 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800383c:	2300      	movs	r3, #0
 800383e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e12d      	b.n	8003aa6 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7fd fc11 	bl	8001080 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff ff67 	bl	8003744 <LL_ADC_IsDeepPowerDownEnabled>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d004      	beq.n	8003886 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff ff4d 	bl	8003720 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff ff82 	bl	8003794 <LL_ADC_IsInternalRegulatorEnabled>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d113      	bne.n	80038be <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff ff66 	bl	800376c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80038a0:	4b83      	ldr	r3, [pc, #524]	; (8003ab0 <HAL_ADC_Init+0x280>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	099b      	lsrs	r3, r3, #6
 80038a6:	4a83      	ldr	r2, [pc, #524]	; (8003ab4 <HAL_ADC_Init+0x284>)
 80038a8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ac:	099b      	lsrs	r3, r3, #6
 80038ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038b0:	e002      	b.n	80038b8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f9      	bne.n	80038b2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff ff66 	bl	8003794 <LL_ADC_IsInternalRegulatorEnabled>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10d      	bne.n	80038ea <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	f043 0210 	orr.w	r2, r3, #16
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	f043 0201 	orr.w	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff ff77 	bl	80037e2 <LL_ADC_REG_IsConversionOngoing>
 80038f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f040 80c8 	bne.w	8003a94 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	f040 80c4 	bne.w	8003a94 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003914:	f043 0202 	orr.w	r2, r3, #2
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff ff4b 	bl	80037bc <LL_ADC_IsEnabled>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10b      	bne.n	8003944 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800392c:	4862      	ldr	r0, [pc, #392]	; (8003ab8 <HAL_ADC_Init+0x288>)
 800392e:	f7ff ff45 	bl	80037bc <LL_ADC_IsEnabled>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d105      	bne.n	8003944 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	4619      	mov	r1, r3
 800393e:	485f      	ldr	r0, [pc, #380]	; (8003abc <HAL_ADC_Init+0x28c>)
 8003940:	f7ff fdd6 	bl	80034f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	7e5b      	ldrb	r3, [r3, #25]
 8003948:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800394e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003954:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800395a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003962:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d106      	bne.n	8003980 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	3b01      	subs	r3, #1
 8003978:	045b      	lsls	r3, r3, #17
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	2b00      	cmp	r3, #0
 8003986:	d009      	beq.n	800399c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4313      	orrs	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	4b47      	ldr	r3, [pc, #284]	; (8003ac0 <HAL_ADC_Init+0x290>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6812      	ldr	r2, [r2, #0]
 80039aa:	69b9      	ldr	r1, [r7, #24]
 80039ac:	430b      	orrs	r3, r1
 80039ae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ff14 	bl	80037e2 <LL_ADC_REG_IsConversionOngoing>
 80039ba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff ff21 	bl	8003808 <LL_ADC_INJ_IsConversionOngoing>
 80039c6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d140      	bne.n	8003a50 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d13d      	bne.n	8003a50 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	7e1b      	ldrb	r3, [r3, #24]
 80039dc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80039de:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039e6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039f6:	f023 0306 	bic.w	r3, r3, #6
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	69b9      	ldr	r1, [r7, #24]
 8003a00:	430b      	orrs	r3, r1
 8003a02:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d118      	bne.n	8003a40 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003a18:	f023 0304 	bic.w	r3, r3, #4
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a24:	4311      	orrs	r1, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a2a:	4311      	orrs	r1, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a30:	430a      	orrs	r2, r1
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0201 	orr.w	r2, r2, #1
 8003a3c:	611a      	str	r2, [r3, #16]
 8003a3e:	e007      	b.n	8003a50 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d10c      	bne.n	8003a72 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	f023 010f 	bic.w	r1, r3, #15
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	1e5a      	subs	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a70:	e007      	b.n	8003a82 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 020f 	bic.w	r2, r2, #15
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a86:	f023 0303 	bic.w	r3, r3, #3
 8003a8a:	f043 0201 	orr.w	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	659a      	str	r2, [r3, #88]	; 0x58
 8003a92:	e007      	b.n	8003aa4 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a98:	f043 0210 	orr.w	r2, r3, #16
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003aa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000000 	.word	0x20000000
 8003ab4:	053e2d63 	.word	0x053e2d63
 8003ab8:	50040000 	.word	0x50040000
 8003abc:	50040300 	.word	0x50040300
 8003ac0:	fff0c007 	.word	0xfff0c007

08003ac4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b0b6      	sub	sp, #216	; 0xd8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x22>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e3d4      	b.n	8004290 <HAL_ADC_ConfigChannel+0x7cc>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff fe75 	bl	80037e2 <LL_ADC_REG_IsConversionOngoing>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f040 83b9 	bne.w	8004272 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d824      	bhi.n	8003b52 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	3b02      	subs	r3, #2
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d81b      	bhi.n	8003b4a <HAL_ADC_ConfigChannel+0x86>
 8003b12:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <HAL_ADC_ConfigChannel+0x54>)
 8003b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b18:	08003b29 	.word	0x08003b29
 8003b1c:	08003b31 	.word	0x08003b31
 8003b20:	08003b39 	.word	0x08003b39
 8003b24:	08003b41 	.word	0x08003b41
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	220c      	movs	r2, #12
 8003b2c:	605a      	str	r2, [r3, #4]
          break;
 8003b2e:	e011      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2212      	movs	r2, #18
 8003b34:	605a      	str	r2, [r3, #4]
          break;
 8003b36:	e00d      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2218      	movs	r2, #24
 8003b3c:	605a      	str	r2, [r3, #4]
          break;
 8003b3e:	e009      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b46:	605a      	str	r2, [r3, #4]
          break;
 8003b48:	e004      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2206      	movs	r2, #6
 8003b4e:	605a      	str	r2, [r3, #4]
          break;
 8003b50:	e000      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003b52:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	f7ff fd61 	bl	8003628 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff fe39 	bl	80037e2 <LL_ADC_REG_IsConversionOngoing>
 8003b70:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff fe45 	bl	8003808 <LL_ADC_INJ_IsConversionOngoing>
 8003b7e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f040 81c1 	bne.w	8003f0e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f040 81bc 	bne.w	8003f0e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b9e:	d10f      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	4619      	mov	r1, r3
 8003bac:	f7ff fd68 	bl	8003680 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fd22 	bl	8003602 <LL_ADC_SetSamplingTimeCommonConfig>
 8003bbe:	e00e      	b.n	8003bde <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	6819      	ldr	r1, [r3, #0]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f7ff fd57 	bl	8003680 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff fd12 	bl	8003602 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	08db      	lsrs	r3, r3, #3
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d00a      	beq.n	8003c16 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	6919      	ldr	r1, [r3, #16]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c10:	f7ff fca2 	bl	8003558 <LL_ADC_SetOffset>
 8003c14:	e17b      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fcbf 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <HAL_ADC_ConfigChannel+0x17e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2100      	movs	r1, #0
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fcb4 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	0e9b      	lsrs	r3, r3, #26
 8003c3c:	f003 021f 	and.w	r2, r3, #31
 8003c40:	e01e      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x1bc>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2100      	movs	r1, #0
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fca9 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c58:	fa93 f3a3 	rbit	r3, r3
 8003c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003c70:	2320      	movs	r3, #32
 8003c72:	e004      	b.n	8003c7e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003c74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c78:	fab3 f383 	clz	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d105      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x1d4>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	0e9b      	lsrs	r3, r3, #26
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	e018      	b.n	8003cca <HAL_ADC_ConfigChannel+0x206>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ca4:	fa93 f3a3 	rbit	r3, r3
 8003ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003cb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003cbc:	2320      	movs	r3, #32
 8003cbe:	e004      	b.n	8003cca <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003cc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003cc4:	fab3 f383 	clz	r3, r3
 8003cc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d106      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff fc78 	bl	80035cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fc5c 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x244>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fc51 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	0e9b      	lsrs	r3, r3, #26
 8003d02:	f003 021f 	and.w	r2, r3, #31
 8003d06:	e01e      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x282>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fc46 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d1e:	fa93 f3a3 	rbit	r3, r3
 8003d22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003d26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003d2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003d36:	2320      	movs	r3, #32
 8003d38:	e004      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003d3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d3e:	fab3 f383 	clz	r3, r3
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d105      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x29a>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	0e9b      	lsrs	r3, r3, #26
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	e018      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x2cc>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003d72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003d7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003d82:	2320      	movs	r3, #32
 8003d84:	e004      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003d86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d8a:	fab3 f383 	clz	r3, r3
 8003d8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d106      	bne.n	8003da2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fc15 	bl	80035cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2102      	movs	r1, #2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fbf9 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10a      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x30a>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2102      	movs	r1, #2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff fbee 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	0e9b      	lsrs	r3, r3, #26
 8003dc8:	f003 021f 	and.w	r2, r3, #31
 8003dcc:	e01e      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x348>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2102      	movs	r1, #2
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff fbe3 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003de4:	fa93 f3a3 	rbit	r3, r3
 8003de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003dec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003df0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003dfc:	2320      	movs	r3, #32
 8003dfe:	e004      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003e00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e04:	fab3 f383 	clz	r3, r3
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d105      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x360>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	0e9b      	lsrs	r3, r3, #26
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	e016      	b.n	8003e52 <HAL_ADC_ConfigChannel+0x38e>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e30:	fa93 f3a3 	rbit	r3, r3
 8003e34:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003e36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003e44:	2320      	movs	r3, #32
 8003e46:	e004      	b.n	8003e52 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003e48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e4c:	fab3 f383 	clz	r3, r3
 8003e50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d106      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fbb4 	bl	80035cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2103      	movs	r1, #3
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff fb98 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x3cc>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2103      	movs	r1, #3
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff fb8d 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8003e86:	4603      	mov	r3, r0
 8003e88:	0e9b      	lsrs	r3, r3, #26
 8003e8a:	f003 021f 	and.w	r2, r3, #31
 8003e8e:	e017      	b.n	8003ec0 <HAL_ADC_ConfigChannel+0x3fc>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2103      	movs	r1, #3
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff fb82 	bl	80035a0 <LL_ADC_GetOffsetChannel>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea2:	fa93 f3a3 	rbit	r3, r3
 8003ea6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003ea8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eaa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003eac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003eb2:	2320      	movs	r3, #32
 8003eb4:	e003      	b.n	8003ebe <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eb8:	fab3 f383 	clz	r3, r3
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x414>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	0e9b      	lsrs	r3, r3, #26
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	e011      	b.n	8003efc <HAL_ADC_ConfigChannel+0x438>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ee0:	fa93 f3a3 	rbit	r3, r3
 8003ee4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003ee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003ef0:	2320      	movs	r3, #32
 8003ef2:	e003      	b.n	8003efc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d106      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2200      	movs	r2, #0
 8003f06:	2103      	movs	r1, #3
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fb5f 	bl	80035cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fc52 	bl	80037bc <LL_ADC_IsEnabled>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f040 8140 	bne.w	80041a0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	6819      	ldr	r1, [r3, #0]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f7ff fbd3 	bl	80036d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	4a8f      	ldr	r2, [pc, #572]	; (8004174 <HAL_ADC_ConfigChannel+0x6b0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	f040 8131 	bne.w	80041a0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10b      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x4a2>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	0e9b      	lsrs	r3, r3, #26
 8003f54:	3301      	adds	r3, #1
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	2b09      	cmp	r3, #9
 8003f5c:	bf94      	ite	ls
 8003f5e:	2301      	movls	r3, #1
 8003f60:	2300      	movhi	r3, #0
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	e019      	b.n	8003f9a <HAL_ADC_ConfigChannel+0x4d6>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f6e:	fa93 f3a3 	rbit	r3, r3
 8003f72:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003f74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f76:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003f78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003f7e:	2320      	movs	r3, #32
 8003f80:	e003      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f84:	fab3 f383 	clz	r3, r3
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	f003 031f 	and.w	r3, r3, #31
 8003f90:	2b09      	cmp	r3, #9
 8003f92:	bf94      	ite	ls
 8003f94:	2301      	movls	r3, #1
 8003f96:	2300      	movhi	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d079      	beq.n	8004092 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d107      	bne.n	8003fba <HAL_ADC_ConfigChannel+0x4f6>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	0e9b      	lsrs	r3, r3, #26
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	069b      	lsls	r3, r3, #26
 8003fb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fb8:	e015      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x522>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fc2:	fa93 f3a3 	rbit	r3, r3
 8003fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fca:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003fd2:	2320      	movs	r3, #32
 8003fd4:	e003      	b.n	8003fde <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fd8:	fab3 f383 	clz	r3, r3
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	3301      	adds	r3, #1
 8003fe0:	069b      	lsls	r3, r3, #26
 8003fe2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <HAL_ADC_ConfigChannel+0x542>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	0e9b      	lsrs	r3, r3, #26
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2101      	movs	r1, #1
 8004000:	fa01 f303 	lsl.w	r3, r1, r3
 8004004:	e017      	b.n	8004036 <HAL_ADC_ConfigChannel+0x572>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400e:	fa93 f3a3 	rbit	r3, r3
 8004012:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004016:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800401e:	2320      	movs	r3, #32
 8004020:	e003      	b.n	800402a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8004022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004024:	fab3 f383 	clz	r3, r3
 8004028:	b2db      	uxtb	r3, r3
 800402a:	3301      	adds	r3, #1
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	2101      	movs	r1, #1
 8004032:	fa01 f303 	lsl.w	r3, r1, r3
 8004036:	ea42 0103 	orr.w	r1, r2, r3
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10a      	bne.n	800405c <HAL_ADC_ConfigChannel+0x598>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	0e9b      	lsrs	r3, r3, #26
 800404c:	3301      	adds	r3, #1
 800404e:	f003 021f 	and.w	r2, r3, #31
 8004052:	4613      	mov	r3, r2
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	4413      	add	r3, r2
 8004058:	051b      	lsls	r3, r3, #20
 800405a:	e018      	b.n	800408e <HAL_ADC_ConfigChannel+0x5ca>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004064:	fa93 f3a3 	rbit	r3, r3
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800406a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800406e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8004074:	2320      	movs	r3, #32
 8004076:	e003      	b.n	8004080 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8004078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	3301      	adds	r3, #1
 8004082:	f003 021f 	and.w	r2, r3, #31
 8004086:	4613      	mov	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800408e:	430b      	orrs	r3, r1
 8004090:	e081      	b.n	8004196 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409a:	2b00      	cmp	r3, #0
 800409c:	d107      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x5ea>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	0e9b      	lsrs	r3, r3, #26
 80040a4:	3301      	adds	r3, #1
 80040a6:	069b      	lsls	r3, r3, #26
 80040a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040ac:	e015      	b.n	80040da <HAL_ADC_ConfigChannel+0x616>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b6:	fa93 f3a3 	rbit	r3, r3
 80040ba:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040be:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80040c6:	2320      	movs	r3, #32
 80040c8:	e003      	b.n	80040d2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	fab3 f383 	clz	r3, r3
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	3301      	adds	r3, #1
 80040d4:	069b      	lsls	r3, r3, #26
 80040d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d109      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x636>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	0e9b      	lsrs	r3, r3, #26
 80040ec:	3301      	adds	r3, #1
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	2101      	movs	r1, #1
 80040f4:	fa01 f303 	lsl.w	r3, r1, r3
 80040f8:	e017      	b.n	800412a <HAL_ADC_ConfigChannel+0x666>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	fa93 f3a3 	rbit	r3, r3
 8004106:	61fb      	str	r3, [r7, #28]
  return result;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8004112:	2320      	movs	r3, #32
 8004114:	e003      	b.n	800411e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	fab3 f383 	clz	r3, r3
 800411c:	b2db      	uxtb	r3, r3
 800411e:	3301      	adds	r3, #1
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	2101      	movs	r1, #1
 8004126:	fa01 f303 	lsl.w	r3, r1, r3
 800412a:	ea42 0103 	orr.w	r1, r2, r3
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10d      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x692>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	0e9b      	lsrs	r3, r3, #26
 8004140:	3301      	adds	r3, #1
 8004142:	f003 021f 	and.w	r2, r3, #31
 8004146:	4613      	mov	r3, r2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	4413      	add	r3, r2
 800414c:	3b1e      	subs	r3, #30
 800414e:	051b      	lsls	r3, r3, #20
 8004150:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004154:	e01e      	b.n	8004194 <HAL_ADC_ConfigChannel+0x6d0>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	fa93 f3a3 	rbit	r3, r3
 8004162:	613b      	str	r3, [r7, #16]
  return result;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d104      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800416e:	2320      	movs	r3, #32
 8004170:	e006      	b.n	8004180 <HAL_ADC_ConfigChannel+0x6bc>
 8004172:	bf00      	nop
 8004174:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	fab3 f383 	clz	r3, r3
 800417e:	b2db      	uxtb	r3, r3
 8004180:	3301      	adds	r3, #1
 8004182:	f003 021f 	and.w	r2, r3, #31
 8004186:	4613      	mov	r3, r2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	4413      	add	r3, r2
 800418c:	3b1e      	subs	r3, #30
 800418e:	051b      	lsls	r3, r3, #20
 8004190:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004194:	430b      	orrs	r3, r1
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	6892      	ldr	r2, [r2, #8]
 800419a:	4619      	mov	r1, r3
 800419c:	f7ff fa70 	bl	8003680 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	4b3c      	ldr	r3, [pc, #240]	; (8004298 <HAL_ADC_ConfigChannel+0x7d4>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d06b      	beq.n	8004284 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041ac:	483b      	ldr	r0, [pc, #236]	; (800429c <HAL_ADC_ConfigChannel+0x7d8>)
 80041ae:	f7ff f9c5 	bl	800353c <LL_ADC_GetCommonPathInternalCh>
 80041b2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a39      	ldr	r2, [pc, #228]	; (80042a0 <HAL_ADC_ConfigChannel+0x7dc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d126      	bne.n	800420e <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d120      	bne.n	800420e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a34      	ldr	r2, [pc, #208]	; (80042a4 <HAL_ADC_ConfigChannel+0x7e0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d156      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041de:	4619      	mov	r1, r3
 80041e0:	482e      	ldr	r0, [pc, #184]	; (800429c <HAL_ADC_ConfigChannel+0x7d8>)
 80041e2:	f7ff f998 	bl	8003516 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80041e6:	4b30      	ldr	r3, [pc, #192]	; (80042a8 <HAL_ADC_ConfigChannel+0x7e4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	099b      	lsrs	r3, r3, #6
 80041ec:	4a2f      	ldr	r2, [pc, #188]	; (80042ac <HAL_ADC_ConfigChannel+0x7e8>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	099a      	lsrs	r2, r3, #6
 80041f4:	4613      	mov	r3, r2
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041fe:	e002      	b.n	8004206 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	3b01      	subs	r3, #1
 8004204:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f9      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800420c:	e03a      	b.n	8004284 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a27      	ldr	r2, [pc, #156]	; (80042b0 <HAL_ADC_ConfigChannel+0x7ec>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d113      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x77c>
 8004218:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800421c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10d      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <HAL_ADC_ConfigChannel+0x7e0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d12a      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800422e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004236:	4619      	mov	r1, r3
 8004238:	4818      	ldr	r0, [pc, #96]	; (800429c <HAL_ADC_ConfigChannel+0x7d8>)
 800423a:	f7ff f96c 	bl	8003516 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800423e:	e021      	b.n	8004284 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1b      	ldr	r2, [pc, #108]	; (80042b4 <HAL_ADC_ConfigChannel+0x7f0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d11c      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800424a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800424e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d116      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a12      	ldr	r2, [pc, #72]	; (80042a4 <HAL_ADC_ConfigChannel+0x7e0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d111      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004260:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004264:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004268:	4619      	mov	r1, r3
 800426a:	480c      	ldr	r0, [pc, #48]	; (800429c <HAL_ADC_ConfigChannel+0x7d8>)
 800426c:	f7ff f953 	bl	8003516 <LL_ADC_SetCommonPathInternalCh>
 8004270:	e008      	b.n	8004284 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004276:	f043 0220 	orr.w	r2, r3, #32
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800428c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004290:	4618      	mov	r0, r3
 8004292:	37d8      	adds	r7, #216	; 0xd8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	80080000 	.word	0x80080000
 800429c:	50040300 	.word	0x50040300
 80042a0:	c7520000 	.word	0xc7520000
 80042a4:	50040000 	.word	0x50040000
 80042a8:	20000000 	.word	0x20000000
 80042ac:	053e2d63 	.word	0x053e2d63
 80042b0:	cb840000 	.word	0xcb840000
 80042b4:	80000001 	.word	0x80000001

080042b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042c8:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <__NVIC_SetPriorityGrouping+0x44>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042d4:	4013      	ands	r3, r2
 80042d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ea:	4a04      	ldr	r2, [pc, #16]	; (80042fc <__NVIC_SetPriorityGrouping+0x44>)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	60d3      	str	r3, [r2, #12]
}
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	e000ed00 	.word	0xe000ed00

08004300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004304:	4b04      	ldr	r3, [pc, #16]	; (8004318 <__NVIC_GetPriorityGrouping+0x18>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	0a1b      	lsrs	r3, r3, #8
 800430a:	f003 0307 	and.w	r3, r3, #7
}
 800430e:	4618      	mov	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	e000ed00 	.word	0xe000ed00

0800431c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432a:	2b00      	cmp	r3, #0
 800432c:	db0b      	blt.n	8004346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	f003 021f 	and.w	r2, r3, #31
 8004334:	4907      	ldr	r1, [pc, #28]	; (8004354 <__NVIC_EnableIRQ+0x38>)
 8004336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	2001      	movs	r0, #1
 800433e:	fa00 f202 	lsl.w	r2, r0, r2
 8004342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	e000e100 	.word	0xe000e100

08004358 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004366:	2b00      	cmp	r3, #0
 8004368:	db10      	blt.n	800438c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	f003 021f 	and.w	r2, r3, #31
 8004370:	4909      	ldr	r1, [pc, #36]	; (8004398 <__NVIC_DisableIRQ+0x40>)
 8004372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	2001      	movs	r0, #1
 800437a:	fa00 f202 	lsl.w	r2, r0, r2
 800437e:	3320      	adds	r3, #32
 8004380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004384:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004388:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	e000e100 	.word	0xe000e100

0800439c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	6039      	str	r1, [r7, #0]
 80043a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	db0a      	blt.n	80043c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	490c      	ldr	r1, [pc, #48]	; (80043e8 <__NVIC_SetPriority+0x4c>)
 80043b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ba:	0112      	lsls	r2, r2, #4
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	440b      	add	r3, r1
 80043c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043c4:	e00a      	b.n	80043dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	4908      	ldr	r1, [pc, #32]	; (80043ec <__NVIC_SetPriority+0x50>)
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	3b04      	subs	r3, #4
 80043d4:	0112      	lsls	r2, r2, #4
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	440b      	add	r3, r1
 80043da:	761a      	strb	r2, [r3, #24]
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	e000e100 	.word	0xe000e100
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b089      	sub	sp, #36	; 0x24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f1c3 0307 	rsb	r3, r3, #7
 800440a:	2b04      	cmp	r3, #4
 800440c:	bf28      	it	cs
 800440e:	2304      	movcs	r3, #4
 8004410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	3304      	adds	r3, #4
 8004416:	2b06      	cmp	r3, #6
 8004418:	d902      	bls.n	8004420 <NVIC_EncodePriority+0x30>
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	3b03      	subs	r3, #3
 800441e:	e000      	b.n	8004422 <NVIC_EncodePriority+0x32>
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004424:	f04f 32ff 	mov.w	r2, #4294967295
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43da      	mvns	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	401a      	ands	r2, r3
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004438:	f04f 31ff 	mov.w	r1, #4294967295
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	fa01 f303 	lsl.w	r3, r1, r3
 8004442:	43d9      	mvns	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004448:	4313      	orrs	r3, r2
         );
}
 800444a:	4618      	mov	r0, r3
 800444c:	3724      	adds	r7, #36	; 0x24
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3b01      	subs	r3, #1
 8004464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004468:	d301      	bcc.n	800446e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800446a:	2301      	movs	r3, #1
 800446c:	e00f      	b.n	800448e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800446e:	4a0a      	ldr	r2, [pc, #40]	; (8004498 <SysTick_Config+0x40>)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3b01      	subs	r3, #1
 8004474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004476:	210f      	movs	r1, #15
 8004478:	f04f 30ff 	mov.w	r0, #4294967295
 800447c:	f7ff ff8e 	bl	800439c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <SysTick_Config+0x40>)
 8004482:	2200      	movs	r2, #0
 8004484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004486:	4b04      	ldr	r3, [pc, #16]	; (8004498 <SysTick_Config+0x40>)
 8004488:	2207      	movs	r2, #7
 800448a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	e000e010 	.word	0xe000e010

0800449c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff ff07 	bl	80042b8 <__NVIC_SetPriorityGrouping>
}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	4603      	mov	r3, r0
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]
 80044be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044c4:	f7ff ff1c 	bl	8004300 <__NVIC_GetPriorityGrouping>
 80044c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	6978      	ldr	r0, [r7, #20]
 80044d0:	f7ff ff8e 	bl	80043f0 <NVIC_EncodePriority>
 80044d4:	4602      	mov	r2, r0
 80044d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044da:	4611      	mov	r1, r2
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff ff5d 	bl	800439c <__NVIC_SetPriority>
}
 80044e2:	bf00      	nop
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	4603      	mov	r3, r0
 80044f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff ff0f 	bl	800431c <__NVIC_EnableIRQ>
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	4603      	mov	r3, r0
 800450e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff ff1f 	bl	8004358 <__NVIC_DisableIRQ>
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff ff94 	bl	8004458 <SysTick_Config>
 8004530:	4603      	mov	r3, r0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e0ac      	b.n	80046a8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f000 f8b2 	bl	80046bc <DFSDM_GetChannelFromInstance>
 8004558:	4602      	mov	r2, r0
 800455a:	4b55      	ldr	r3, [pc, #340]	; (80046b0 <HAL_DFSDM_ChannelInit+0x174>)
 800455c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e09f      	b.n	80046a8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fc fe01 	bl	8001170 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800456e:	4b51      	ldr	r3, [pc, #324]	; (80046b4 <HAL_DFSDM_ChannelInit+0x178>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3301      	adds	r3, #1
 8004574:	4a4f      	ldr	r2, [pc, #316]	; (80046b4 <HAL_DFSDM_ChannelInit+0x178>)
 8004576:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004578:	4b4e      	ldr	r3, [pc, #312]	; (80046b4 <HAL_DFSDM_ChannelInit+0x178>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d125      	bne.n	80045cc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004580:	4b4d      	ldr	r3, [pc, #308]	; (80046b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a4c      	ldr	r2, [pc, #304]	; (80046b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004586:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800458a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800458c:	4b4a      	ldr	r3, [pc, #296]	; (80046b8 <HAL_DFSDM_ChannelInit+0x17c>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	4948      	ldr	r1, [pc, #288]	; (80046b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004596:	4313      	orrs	r3, r2
 8004598:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800459a:	4b47      	ldr	r3, [pc, #284]	; (80046b8 <HAL_DFSDM_ChannelInit+0x17c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a46      	ldr	r2, [pc, #280]	; (80046b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80045a0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80045a4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	791b      	ldrb	r3, [r3, #4]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d108      	bne.n	80045c0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80045ae:	4b42      	ldr	r3, [pc, #264]	; (80046b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	041b      	lsls	r3, r3, #16
 80045ba:	493f      	ldr	r1, [pc, #252]	; (80046b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80045c0:	4b3d      	ldr	r3, [pc, #244]	; (80046b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a3c      	ldr	r2, [pc, #240]	; (80046b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80045c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045ca:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80045da:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6819      	ldr	r1, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80045ea:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80045f0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 020f 	bic.w	r2, r2, #15
 8004608:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6819      	ldr	r1, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004630:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6899      	ldr	r1, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	3b01      	subs	r3, #1
 8004642:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f002 0207 	and.w	r2, r2, #7
 800465c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6859      	ldr	r1, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004688:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f810 	bl	80046bc <DFSDM_GetChannelFromInstance>
 800469c:	4601      	mov	r1, r0
 800469e:	4a04      	ldr	r2, [pc, #16]	; (80046b0 <HAL_DFSDM_ChannelInit+0x174>)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000204 	.word	0x20000204
 80046b4:	20000200 	.word	0x20000200
 80046b8:	40016000 	.word	0x40016000

080046bc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a1c      	ldr	r2, [pc, #112]	; (8004738 <DFSDM_GetChannelFromInstance+0x7c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d102      	bne.n	80046d2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	e02b      	b.n	800472a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a19      	ldr	r2, [pc, #100]	; (800473c <DFSDM_GetChannelFromInstance+0x80>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d102      	bne.n	80046e0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80046da:	2301      	movs	r3, #1
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	e024      	b.n	800472a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a17      	ldr	r2, [pc, #92]	; (8004740 <DFSDM_GetChannelFromInstance+0x84>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d102      	bne.n	80046ee <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80046e8:	2302      	movs	r3, #2
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	e01d      	b.n	800472a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a14      	ldr	r2, [pc, #80]	; (8004744 <DFSDM_GetChannelFromInstance+0x88>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d102      	bne.n	80046fc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80046f6:	2304      	movs	r3, #4
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	e016      	b.n	800472a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a12      	ldr	r2, [pc, #72]	; (8004748 <DFSDM_GetChannelFromInstance+0x8c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d102      	bne.n	800470a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004704:	2305      	movs	r3, #5
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	e00f      	b.n	800472a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a0f      	ldr	r2, [pc, #60]	; (800474c <DFSDM_GetChannelFromInstance+0x90>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d102      	bne.n	8004718 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004712:	2306      	movs	r3, #6
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	e008      	b.n	800472a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a0d      	ldr	r2, [pc, #52]	; (8004750 <DFSDM_GetChannelFromInstance+0x94>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d102      	bne.n	8004726 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004720:	2307      	movs	r3, #7
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	e001      	b.n	800472a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004726:	2303      	movs	r3, #3
 8004728:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800472a:	68fb      	ldr	r3, [r7, #12]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	40016000 	.word	0x40016000
 800473c:	40016020 	.word	0x40016020
 8004740:	40016040 	.word	0x40016040
 8004744:	40016080 	.word	0x40016080
 8004748:	400160a0 	.word	0x400160a0
 800474c:	400160c0 	.word	0x400160c0
 8004750:	400160e0 	.word	0x400160e0

08004754 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d005      	beq.n	8004778 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2204      	movs	r2, #4
 8004770:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	73fb      	strb	r3, [r7, #15]
 8004776:	e047      	b.n	8004808 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 020e 	bic.w	r2, r2, #14
 8004786:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ac:	f003 021c 	and.w	r2, r3, #28
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	2101      	movs	r1, #1
 80047b6:	fa01 f202 	lsl.w	r2, r1, r2
 80047ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047c4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00c      	beq.n	80047e8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047e6:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	4798      	blx	r3
    }
  }
  return status;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004822:	e166      	b.n	8004af2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	2101      	movs	r1, #1
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	fa01 f303 	lsl.w	r3, r1, r3
 8004830:	4013      	ands	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 8158 	beq.w	8004aec <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d00b      	beq.n	800485c <HAL_GPIO_Init+0x48>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b02      	cmp	r3, #2
 800484a:	d007      	beq.n	800485c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004850:	2b11      	cmp	r3, #17
 8004852:	d003      	beq.n	800485c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b12      	cmp	r3, #18
 800485a:	d130      	bne.n	80048be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	2203      	movs	r2, #3
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	43db      	mvns	r3, r3
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4013      	ands	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004892:	2201      	movs	r2, #1
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43db      	mvns	r3, r3
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4013      	ands	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 0201 	and.w	r2, r3, #1
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	2203      	movs	r2, #3
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	43db      	mvns	r3, r3
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4013      	ands	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d003      	beq.n	80048fe <HAL_GPIO_Init+0xea>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b12      	cmp	r3, #18
 80048fc:	d123      	bne.n	8004946 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	08da      	lsrs	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3208      	adds	r2, #8
 8004906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800490a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	220f      	movs	r2, #15
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43db      	mvns	r3, r3
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4013      	ands	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	08da      	lsrs	r2, r3, #3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3208      	adds	r2, #8
 8004940:	6939      	ldr	r1, [r7, #16]
 8004942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	2203      	movs	r2, #3
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	43db      	mvns	r3, r3
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4013      	ands	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f003 0203 	and.w	r2, r3, #3
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 80b2 	beq.w	8004aec <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004988:	4b61      	ldr	r3, [pc, #388]	; (8004b10 <HAL_GPIO_Init+0x2fc>)
 800498a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498c:	4a60      	ldr	r2, [pc, #384]	; (8004b10 <HAL_GPIO_Init+0x2fc>)
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	6613      	str	r3, [r2, #96]	; 0x60
 8004994:	4b5e      	ldr	r3, [pc, #376]	; (8004b10 <HAL_GPIO_Init+0x2fc>)
 8004996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	60bb      	str	r3, [r7, #8]
 800499e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80049a0:	4a5c      	ldr	r2, [pc, #368]	; (8004b14 <HAL_GPIO_Init+0x300>)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	089b      	lsrs	r3, r3, #2
 80049a6:	3302      	adds	r3, #2
 80049a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	220f      	movs	r2, #15
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	43db      	mvns	r3, r3
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4013      	ands	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049ca:	d02b      	beq.n	8004a24 <HAL_GPIO_Init+0x210>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a52      	ldr	r2, [pc, #328]	; (8004b18 <HAL_GPIO_Init+0x304>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d025      	beq.n	8004a20 <HAL_GPIO_Init+0x20c>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a51      	ldr	r2, [pc, #324]	; (8004b1c <HAL_GPIO_Init+0x308>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d01f      	beq.n	8004a1c <HAL_GPIO_Init+0x208>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a50      	ldr	r2, [pc, #320]	; (8004b20 <HAL_GPIO_Init+0x30c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d019      	beq.n	8004a18 <HAL_GPIO_Init+0x204>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a4f      	ldr	r2, [pc, #316]	; (8004b24 <HAL_GPIO_Init+0x310>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d013      	beq.n	8004a14 <HAL_GPIO_Init+0x200>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a4e      	ldr	r2, [pc, #312]	; (8004b28 <HAL_GPIO_Init+0x314>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00d      	beq.n	8004a10 <HAL_GPIO_Init+0x1fc>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a4d      	ldr	r2, [pc, #308]	; (8004b2c <HAL_GPIO_Init+0x318>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d007      	beq.n	8004a0c <HAL_GPIO_Init+0x1f8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a4c      	ldr	r2, [pc, #304]	; (8004b30 <HAL_GPIO_Init+0x31c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d101      	bne.n	8004a08 <HAL_GPIO_Init+0x1f4>
 8004a04:	2307      	movs	r3, #7
 8004a06:	e00e      	b.n	8004a26 <HAL_GPIO_Init+0x212>
 8004a08:	2308      	movs	r3, #8
 8004a0a:	e00c      	b.n	8004a26 <HAL_GPIO_Init+0x212>
 8004a0c:	2306      	movs	r3, #6
 8004a0e:	e00a      	b.n	8004a26 <HAL_GPIO_Init+0x212>
 8004a10:	2305      	movs	r3, #5
 8004a12:	e008      	b.n	8004a26 <HAL_GPIO_Init+0x212>
 8004a14:	2304      	movs	r3, #4
 8004a16:	e006      	b.n	8004a26 <HAL_GPIO_Init+0x212>
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e004      	b.n	8004a26 <HAL_GPIO_Init+0x212>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e002      	b.n	8004a26 <HAL_GPIO_Init+0x212>
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <HAL_GPIO_Init+0x212>
 8004a24:	2300      	movs	r3, #0
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	f002 0203 	and.w	r2, r2, #3
 8004a2c:	0092      	lsls	r2, r2, #2
 8004a2e:	4093      	lsls	r3, r2
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a36:	4937      	ldr	r1, [pc, #220]	; (8004b14 <HAL_GPIO_Init+0x300>)
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	089b      	lsrs	r3, r3, #2
 8004a3c:	3302      	adds	r3, #2
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a44:	4b3b      	ldr	r3, [pc, #236]	; (8004b34 <HAL_GPIO_Init+0x320>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4013      	ands	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a68:	4a32      	ldr	r2, [pc, #200]	; (8004b34 <HAL_GPIO_Init+0x320>)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004a6e:	4b31      	ldr	r3, [pc, #196]	; (8004b34 <HAL_GPIO_Init+0x320>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	43db      	mvns	r3, r3
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a92:	4a28      	ldr	r2, [pc, #160]	; (8004b34 <HAL_GPIO_Init+0x320>)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a98:	4b26      	ldr	r3, [pc, #152]	; (8004b34 <HAL_GPIO_Init+0x320>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004abc:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <HAL_GPIO_Init+0x320>)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <HAL_GPIO_Init+0x320>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	43db      	mvns	r3, r3
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ae6:	4a13      	ldr	r2, [pc, #76]	; (8004b34 <HAL_GPIO_Init+0x320>)
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	3301      	adds	r3, #1
 8004af0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	fa22 f303 	lsr.w	r3, r2, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f47f ae91 	bne.w	8004824 <HAL_GPIO_Init+0x10>
  }
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40021000 	.word	0x40021000
 8004b14:	40010000 	.word	0x40010000
 8004b18:	48000400 	.word	0x48000400
 8004b1c:	48000800 	.word	0x48000800
 8004b20:	48000c00 	.word	0x48000c00
 8004b24:	48001000 	.word	0x48001000
 8004b28:	48001400 	.word	0x48001400
 8004b2c:	48001800 	.word	0x48001800
 8004b30:	48001c00 	.word	0x48001c00
 8004b34:	40010400 	.word	0x40010400

08004b38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004b46:	e0c9      	b.n	8004cdc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004b48:	2201      	movs	r2, #1
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	4013      	ands	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 80bc 	beq.w	8004cd6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004b5e:	4a66      	ldr	r2, [pc, #408]	; (8004cf8 <HAL_GPIO_DeInit+0x1c0>)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	089b      	lsrs	r3, r3, #2
 8004b64:	3302      	adds	r3, #2
 8004b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	220f      	movs	r2, #15
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b86:	d02b      	beq.n	8004be0 <HAL_GPIO_DeInit+0xa8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a5c      	ldr	r2, [pc, #368]	; (8004cfc <HAL_GPIO_DeInit+0x1c4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d025      	beq.n	8004bdc <HAL_GPIO_DeInit+0xa4>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a5b      	ldr	r2, [pc, #364]	; (8004d00 <HAL_GPIO_DeInit+0x1c8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d01f      	beq.n	8004bd8 <HAL_GPIO_DeInit+0xa0>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a5a      	ldr	r2, [pc, #360]	; (8004d04 <HAL_GPIO_DeInit+0x1cc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d019      	beq.n	8004bd4 <HAL_GPIO_DeInit+0x9c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a59      	ldr	r2, [pc, #356]	; (8004d08 <HAL_GPIO_DeInit+0x1d0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d013      	beq.n	8004bd0 <HAL_GPIO_DeInit+0x98>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a58      	ldr	r2, [pc, #352]	; (8004d0c <HAL_GPIO_DeInit+0x1d4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00d      	beq.n	8004bcc <HAL_GPIO_DeInit+0x94>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a57      	ldr	r2, [pc, #348]	; (8004d10 <HAL_GPIO_DeInit+0x1d8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d007      	beq.n	8004bc8 <HAL_GPIO_DeInit+0x90>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a56      	ldr	r2, [pc, #344]	; (8004d14 <HAL_GPIO_DeInit+0x1dc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d101      	bne.n	8004bc4 <HAL_GPIO_DeInit+0x8c>
 8004bc0:	2307      	movs	r3, #7
 8004bc2:	e00e      	b.n	8004be2 <HAL_GPIO_DeInit+0xaa>
 8004bc4:	2308      	movs	r3, #8
 8004bc6:	e00c      	b.n	8004be2 <HAL_GPIO_DeInit+0xaa>
 8004bc8:	2306      	movs	r3, #6
 8004bca:	e00a      	b.n	8004be2 <HAL_GPIO_DeInit+0xaa>
 8004bcc:	2305      	movs	r3, #5
 8004bce:	e008      	b.n	8004be2 <HAL_GPIO_DeInit+0xaa>
 8004bd0:	2304      	movs	r3, #4
 8004bd2:	e006      	b.n	8004be2 <HAL_GPIO_DeInit+0xaa>
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e004      	b.n	8004be2 <HAL_GPIO_DeInit+0xaa>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e002      	b.n	8004be2 <HAL_GPIO_DeInit+0xaa>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <HAL_GPIO_DeInit+0xaa>
 8004be0:	2300      	movs	r3, #0
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	f002 0203 	and.w	r2, r2, #3
 8004be8:	0092      	lsls	r2, r2, #2
 8004bea:	4093      	lsls	r3, r2
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d132      	bne.n	8004c58 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004bf2:	4b49      	ldr	r3, [pc, #292]	; (8004d18 <HAL_GPIO_DeInit+0x1e0>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	4947      	ldr	r1, [pc, #284]	; (8004d18 <HAL_GPIO_DeInit+0x1e0>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004c00:	4b45      	ldr	r3, [pc, #276]	; (8004d18 <HAL_GPIO_DeInit+0x1e0>)
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	43db      	mvns	r3, r3
 8004c08:	4943      	ldr	r1, [pc, #268]	; (8004d18 <HAL_GPIO_DeInit+0x1e0>)
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004c0e:	4b42      	ldr	r3, [pc, #264]	; (8004d18 <HAL_GPIO_DeInit+0x1e0>)
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	43db      	mvns	r3, r3
 8004c16:	4940      	ldr	r1, [pc, #256]	; (8004d18 <HAL_GPIO_DeInit+0x1e0>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004c1c:	4b3e      	ldr	r3, [pc, #248]	; (8004d18 <HAL_GPIO_DeInit+0x1e0>)
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	43db      	mvns	r3, r3
 8004c24:	493c      	ldr	r1, [pc, #240]	; (8004d18 <HAL_GPIO_DeInit+0x1e0>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f003 0303 	and.w	r3, r3, #3
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	220f      	movs	r2, #15
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004c3a:	4a2f      	ldr	r2, [pc, #188]	; (8004cf8 <HAL_GPIO_DeInit+0x1c0>)
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	089b      	lsrs	r3, r3, #2
 8004c40:	3302      	adds	r3, #2
 8004c42:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	43da      	mvns	r2, r3
 8004c4a:	482b      	ldr	r0, [pc, #172]	; (8004cf8 <HAL_GPIO_DeInit+0x1c0>)
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	089b      	lsrs	r3, r3, #2
 8004c50:	400a      	ands	r2, r1
 8004c52:	3302      	adds	r3, #2
 8004c54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	2103      	movs	r1, #3
 8004c62:	fa01 f303 	lsl.w	r3, r1, r3
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	08da      	lsrs	r2, r3, #3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3208      	adds	r2, #8
 8004c74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	220f      	movs	r2, #15
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	43db      	mvns	r3, r3
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	08d2      	lsrs	r2, r2, #3
 8004c8c:	4019      	ands	r1, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3208      	adds	r2, #8
 8004c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	2103      	movs	r1, #3
 8004ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	401a      	ands	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	401a      	ands	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	2103      	movs	r1, #3
 8004cca:	fa01 f303 	lsl.w	r3, r1, r3
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	401a      	ands	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f47f af2f 	bne.w	8004b48 <HAL_GPIO_DeInit+0x10>
  }
}
 8004cea:	bf00      	nop
 8004cec:	371c      	adds	r7, #28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40010000 	.word	0x40010000
 8004cfc:	48000400 	.word	0x48000400
 8004d00:	48000800 	.word	0x48000800
 8004d04:	48000c00 	.word	0x48000c00
 8004d08:	48001000 	.word	0x48001000
 8004d0c:	48001400 	.word	0x48001400
 8004d10:	48001800 	.word	0x48001800
 8004d14:	48001c00 	.word	0x48001c00
 8004d18:	40010400 	.word	0x40010400

08004d1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	887b      	ldrh	r3, [r7, #2]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d34:	2301      	movs	r3, #1
 8004d36:	73fb      	strb	r3, [r7, #15]
 8004d38:	e001      	b.n	8004d3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	807b      	strh	r3, [r7, #2]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d5c:	787b      	ldrb	r3, [r7, #1]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d62:	887a      	ldrh	r2, [r7, #2]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d68:	e002      	b.n	8004d70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d6a:	887a      	ldrh	r2, [r7, #2]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	460b      	mov	r3, r1
 8004d86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d8e:	887a      	ldrh	r2, [r7, #2]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4013      	ands	r3, r2
 8004d94:	041a      	lsls	r2, r3, #16
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	43d9      	mvns	r1, r3
 8004d9a:	887b      	ldrh	r3, [r7, #2]
 8004d9c:	400b      	ands	r3, r1
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	619a      	str	r2, [r3, #24]
}
 8004da4:	bf00      	nop
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	4603      	mov	r3, r0
 8004db8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004dba:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dbc:	695a      	ldr	r2, [r3, #20]
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d006      	beq.n	8004dd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dc6:	4a05      	ldr	r2, [pc, #20]	; (8004ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dc8:	88fb      	ldrh	r3, [r7, #6]
 8004dca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dcc:	88fb      	ldrh	r3, [r7, #6]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fc fede 	bl	8001b90 <HAL_GPIO_EXTI_Callback>
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40010400 	.word	0x40010400

08004de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e081      	b.n	8004ef6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7fc fbc2 	bl	8001590 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2224      	movs	r2, #36	; 0x24
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0201 	bic.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d107      	bne.n	8004e5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e56:	609a      	str	r2, [r3, #8]
 8004e58:	e006      	b.n	8004e68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d104      	bne.n	8004e7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691a      	ldr	r2, [r3, #16]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	ea42 0103 	orr.w	r1, r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	021a      	lsls	r2, r3, #8
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69d9      	ldr	r1, [r3, #28]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1a      	ldr	r2, [r3, #32]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0201 	orr.w	r2, r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d138      	bne.n	8004f86 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e032      	b.n	8004f88 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2224      	movs	r2, #36	; 0x24
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0201 	bic.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f50:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6819      	ldr	r1, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0201 	orr.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	e000      	b.n	8004f88 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f86:	2302      	movs	r3, #2
  }
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	d139      	bne.n	800501e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e033      	b.n	8005020 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2224      	movs	r2, #36	; 0x24
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0201 	bic.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004fe6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f042 0201 	orr.w	r2, r2, #1
 8005008:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	e000      	b.n	8005020 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800501e:	2302      	movs	r3, #2
  }
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af02      	add	r7, sp, #8
 8005032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005038:	f7fe fa2c 	bl	8003494 <HAL_GetTick>
 800503c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d102      	bne.n	800504a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
 8005048:	e092      	b.n	8005170 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005054:	2b00      	cmp	r3, #0
 8005056:	f040 808b 	bne.w	8005170 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fc fe06 	bl	8001c6c <HAL_OSPI_MspInit>
#endif

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8005060:	f241 3188 	movw	r1, #5000	; 0x1388
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f88b 	bl	8005180 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	4b42      	ldr	r3, [pc, #264]	; (800517c <HAL_OSPI_Init+0x150>)
 8005072:	4013      	ands	r3, r2
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	68d1      	ldr	r1, [r2, #12]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6912      	ldr	r2, [r2, #16]
 800507c:	3a01      	subs	r2, #1
 800507e:	0412      	lsls	r2, r2, #16
 8005080:	4311      	orrs	r1, r2
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6952      	ldr	r2, [r2, #20]
 8005086:	3a01      	subs	r2, #1
 8005088:	0212      	lsls	r2, r2, #8
 800508a:	4311      	orrs	r1, r2
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005090:	4311      	orrs	r1, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	69d2      	ldr	r2, [r2, #28]
 8005096:	4311      	orrs	r1, r2
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6812      	ldr	r2, [r2, #0]
 800509c:	430b      	orrs	r3, r1
 800509e:	6093      	str	r3, [r2, #8]
#if   defined (OCTOSPI_DCR3_MAXTRAN)
      /* Configure chip select boundary and maximun transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) | (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	0412      	lsls	r2, r2, #16
 80050aa:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	021a      	lsls	r2, r3, #8
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2200      	movs	r2, #0
 80050d0:	2120      	movs	r1, #32
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fbb8 	bl	8005848 <OSPI_WaitFlagStateUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d146      	bne.n	8005170 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	1e5a      	subs	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	60da      	str	r2, [r3, #12]

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005118:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	431a      	orrs	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	2b02      	cmp	r3, #2
 8005146:	d107      	bne.n	8005158 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0202 	orr.w	r2, r2, #2
 8005156:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005160:	d103      	bne.n	800516a <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	645a      	str	r2, [r3, #68]	; 0x44
 8005168:	e002      	b.n	8005170 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8005170:	7bfb      	ldrb	r3, [r7, #15]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	f8e0f8f4 	.word	0xf8e0f8f4

08005180 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
	...

080051a0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b092      	sub	sp, #72	; 0x48
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index, ospi_enabled = 0U, other_instance;
 80051b2:	2300      	movs	r3, #0
 80051b4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a08      	ldr	r2, [pc, #32]	; (80051e0 <HAL_OSPIM_Config+0x40>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d105      	bne.n	80051ce <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80051c6:	2301      	movs	r3, #1
 80051c8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80051cc:	e004      	b.n	80051d8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80051ce:	2301      	movs	r3, #1
 80051d0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80051d8:	2300      	movs	r3, #0
 80051da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80051de:	e01f      	b.n	8005220 <HAL_OSPIM_Config+0x80>
 80051e0:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80051e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80051e8:	3301      	adds	r3, #1
 80051ea:	b2d8      	uxtb	r0, r3
 80051ec:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80051f0:	f107 0114 	add.w	r1, r7, #20
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	440b      	add	r3, r1
 80051fe:	4619      	mov	r1, r3
 8005200:	f000 fb5a 	bl	80058b8 <OSPIM_GetConfig>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d005      	beq.n	8005216 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2208      	movs	r2, #8
 8005214:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005216:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800521a:	3301      	adds	r3, #1
 800521c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005220:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005224:	2b01      	cmp	r3, #1
 8005226:	d9dd      	bls.n	80051e4 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8005228:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800522c:	2b00      	cmp	r3, #0
 800522e:	f040 82fe 	bne.w	800582e <HAL_OSPIM_Config+0x68e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8005232:	4bcd      	ldr	r3, [pc, #820]	; (8005568 <HAL_OSPIM_Config+0x3c8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00b      	beq.n	8005256 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800523e:	4bca      	ldr	r3, [pc, #808]	; (8005568 <HAL_OSPIM_Config+0x3c8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4ac9      	ldr	r2, [pc, #804]	; (8005568 <HAL_OSPIM_Config+0x3c8>)
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800524a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8005256:	4bc5      	ldr	r3, [pc, #788]	; (800556c <HAL_OSPIM_Config+0x3cc>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00b      	beq.n	800527a <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005262:	4bc2      	ldr	r3, [pc, #776]	; (800556c <HAL_OSPIM_Config+0x3cc>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4ac1      	ldr	r2, [pc, #772]	; (800556c <HAL_OSPIM_Config+0x3cc>)
 8005268:	f023 0301 	bic.w	r3, r3, #1
 800526c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800526e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005272:	f043 0302 	orr.w	r3, r3, #2
 8005276:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800527a:	49bd      	ldr	r1, [pc, #756]	; (8005570 <HAL_OSPIM_Config+0x3d0>)
 800527c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800527e:	4613      	mov	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800528a:	4413      	add	r3, r2
 800528c:	3b2c      	subs	r3, #44	; 0x2c
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3b01      	subs	r3, #1
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	6859      	ldr	r1, [r3, #4]
 8005298:	48b5      	ldr	r0, [pc, #724]	; (8005570 <HAL_OSPIM_Config+0x3d0>)
 800529a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80052a8:	4413      	add	r3, r2
 80052aa:	3b2c      	subs	r3, #44	; 0x2c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4403      	add	r3, r0
 80052b8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80052ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80052c8:	4413      	add	r3, r2
 80052ca:	3b34      	subs	r3, #52	; 0x34
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 80ac 	beq.w	800542c <HAL_OSPIM_Config+0x28c>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80052d4:	49a6      	ldr	r1, [pc, #664]	; (8005570 <HAL_OSPIM_Config+0x3d0>)
 80052d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80052e4:	4413      	add	r3, r2
 80052e6:	3b34      	subs	r3, #52	; 0x34
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	6859      	ldr	r1, [r3, #4]
 80052f2:	489f      	ldr	r0, [pc, #636]	; (8005570 <HAL_OSPIM_Config+0x3d0>)
 80052f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005302:	4413      	add	r3, r2
 8005304:	3b34      	subs	r3, #52	; 0x34
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3b01      	subs	r3, #1
 800530a:	f021 0201 	bic.w	r2, r1, #1
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4403      	add	r3, r0
 8005312:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8005314:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005316:	4613      	mov	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005322:	4413      	add	r3, r2
 8005324:	3b30      	subs	r3, #48	; 0x30
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01f      	beq.n	800536c <HAL_OSPIM_Config+0x1cc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800532c:	4990      	ldr	r1, [pc, #576]	; (8005570 <HAL_OSPIM_Config+0x3d0>)
 800532e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800533c:	4413      	add	r3, r2
 800533e:	3b30      	subs	r3, #48	; 0x30
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3b01      	subs	r3, #1
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	6859      	ldr	r1, [r3, #4]
 800534a:	4889      	ldr	r0, [pc, #548]	; (8005570 <HAL_OSPIM_Config+0x3d0>)
 800534c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800535a:	4413      	add	r3, r2
 800535c:	3b30      	subs	r3, #48	; 0x30
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3b01      	subs	r3, #1
 8005362:	f021 0210 	bic.w	r2, r1, #16
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4403      	add	r3, r0
 800536a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800536c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800537a:	4413      	add	r3, r2
 800537c:	3b28      	subs	r3, #40	; 0x28
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d023      	beq.n	80053cc <HAL_OSPIM_Config+0x22c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8005384:	497a      	ldr	r1, [pc, #488]	; (8005570 <HAL_OSPIM_Config+0x3d0>)
 8005386:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005394:	4413      	add	r3, r2
 8005396:	3b28      	subs	r3, #40	; 0x28
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3b01      	subs	r3, #1
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	440b      	add	r3, r1
 80053a4:	6859      	ldr	r1, [r3, #4]
 80053a6:	4872      	ldr	r0, [pc, #456]	; (8005570 <HAL_OSPIM_Config+0x3d0>)
 80053a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80053b6:	4413      	add	r3, r2
 80053b8:	3b28      	subs	r3, #40	; 0x28
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3b01      	subs	r3, #1
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4403      	add	r3, r0
 80053ca:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80053cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80053da:	4413      	add	r3, r2
 80053dc:	3b24      	subs	r3, #36	; 0x24
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d023      	beq.n	800542c <HAL_OSPIM_Config+0x28c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80053e4:	4962      	ldr	r1, [pc, #392]	; (8005570 <HAL_OSPIM_Config+0x3d0>)
 80053e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053e8:	4613      	mov	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80053f4:	4413      	add	r3, r2
 80053f6:	3b24      	subs	r3, #36	; 0x24
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	440b      	add	r3, r1
 8005404:	6859      	ldr	r1, [r3, #4]
 8005406:	485a      	ldr	r0, [pc, #360]	; (8005570 <HAL_OSPIM_Config+0x3d0>)
 8005408:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005416:	4413      	add	r3, r2
 8005418:	3b24      	subs	r3, #36	; 0x24
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3b01      	subs	r3, #1
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4403      	add	r3, r0
 800542a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	6819      	ldr	r1, [r3, #0]
 8005430:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005440:	4413      	add	r3, r2
 8005442:	3b34      	subs	r3, #52	; 0x34
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4299      	cmp	r1, r3
 8005448:	d03c      	beq.n	80054c4 <HAL_OSPIM_Config+0x324>
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6859      	ldr	r1, [r3, #4]
 800544e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005452:	4613      	mov	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800545e:	4413      	add	r3, r2
 8005460:	3b30      	subs	r3, #48	; 0x30
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4299      	cmp	r1, r3
 8005466:	d02d      	beq.n	80054c4 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	6899      	ldr	r1, [r3, #8]
 800546c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800547c:	4413      	add	r3, r2
 800547e:	3b2c      	subs	r3, #44	; 0x2c
 8005480:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8005482:	4299      	cmp	r1, r3
 8005484:	d01e      	beq.n	80054c4 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	68d9      	ldr	r1, [r3, #12]
 800548a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800549a:	4413      	add	r3, r2
 800549c:	3b28      	subs	r3, #40	; 0x28
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4299      	cmp	r1, r3
 80054a2:	d00f      	beq.n	80054c4 <HAL_OSPIM_Config+0x324>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	6919      	ldr	r1, [r3, #16]
 80054a8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80054b8:	4413      	add	r3, r2
 80054ba:	3b24      	subs	r3, #36	; 0x24
 80054bc:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80054be:	4299      	cmp	r1, r3
 80054c0:	f040 80e0 	bne.w	8005684 <HAL_OSPIM_Config+0x4e4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80054c4:	492a      	ldr	r1, [pc, #168]	; (8005570 <HAL_OSPIM_Config+0x3d0>)
 80054c6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80054d6:	4413      	add	r3, r2
 80054d8:	3b34      	subs	r3, #52	; 0x34
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3b01      	subs	r3, #1
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	6859      	ldr	r1, [r3, #4]
 80054e4:	4822      	ldr	r0, [pc, #136]	; (8005570 <HAL_OSPIM_Config+0x3d0>)
 80054e6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80054f6:	4413      	add	r3, r2
 80054f8:	3b34      	subs	r3, #52	; 0x34
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	f021 0201 	bic.w	r2, r1, #1
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4403      	add	r3, r0
 8005506:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005508:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005518:	4413      	add	r3, r2
 800551a:	3b30      	subs	r3, #48	; 0x30
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d028      	beq.n	8005574 <HAL_OSPIM_Config+0x3d4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8005522:	4913      	ldr	r1, [pc, #76]	; (8005570 <HAL_OSPIM_Config+0x3d0>)
 8005524:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005534:	4413      	add	r3, r2
 8005536:	3b30      	subs	r3, #48	; 0x30
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3b01      	subs	r3, #1
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	440b      	add	r3, r1
 8005540:	6859      	ldr	r1, [r3, #4]
 8005542:	480b      	ldr	r0, [pc, #44]	; (8005570 <HAL_OSPIM_Config+0x3d0>)
 8005544:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005548:	4613      	mov	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005554:	4413      	add	r3, r2
 8005556:	3b30      	subs	r3, #48	; 0x30
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3b01      	subs	r3, #1
 800555c:	f021 0210 	bic.w	r2, r1, #16
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4403      	add	r3, r0
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	e005      	b.n	8005574 <HAL_OSPIM_Config+0x3d4>
 8005568:	a0001000 	.word	0xa0001000
 800556c:	a0001400 	.word	0xa0001400
 8005570:	50061c00 	.word	0x50061c00
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8005574:	49b1      	ldr	r1, [pc, #708]	; (800583c <HAL_OSPIM_Config+0x69c>)
 8005576:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800557a:	4613      	mov	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005586:	4413      	add	r3, r2
 8005588:	3b2c      	subs	r3, #44	; 0x2c
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3b01      	subs	r3, #1
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	6859      	ldr	r1, [r3, #4]
 8005594:	48a9      	ldr	r0, [pc, #676]	; (800583c <HAL_OSPIM_Config+0x69c>)
 8005596:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80055a6:	4413      	add	r3, r2
 80055a8:	3b2c      	subs	r3, #44	; 0x2c
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3b01      	subs	r3, #1
 80055ae:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4403      	add	r3, r0
 80055b6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80055b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80055bc:	4613      	mov	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80055c8:	4413      	add	r3, r2
 80055ca:	3b28      	subs	r3, #40	; 0x28
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d025      	beq.n	800561e <HAL_OSPIM_Config+0x47e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80055d2:	499a      	ldr	r1, [pc, #616]	; (800583c <HAL_OSPIM_Config+0x69c>)
 80055d4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80055e4:	4413      	add	r3, r2
 80055e6:	3b28      	subs	r3, #40	; 0x28
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	440b      	add	r3, r1
 80055f4:	6859      	ldr	r1, [r3, #4]
 80055f6:	4891      	ldr	r0, [pc, #580]	; (800583c <HAL_OSPIM_Config+0x69c>)
 80055f8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005608:	4413      	add	r3, r2
 800560a:	3b28      	subs	r3, #40	; 0x28
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3b01      	subs	r3, #1
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4403      	add	r3, r0
 800561c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800561e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005622:	4613      	mov	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800562e:	4413      	add	r3, r2
 8005630:	3b24      	subs	r3, #36	; 0x24
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d025      	beq.n	8005684 <HAL_OSPIM_Config+0x4e4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8005638:	4980      	ldr	r1, [pc, #512]	; (800583c <HAL_OSPIM_Config+0x69c>)
 800563a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800563e:	4613      	mov	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800564a:	4413      	add	r3, r2
 800564c:	3b24      	subs	r3, #36	; 0x24
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3b01      	subs	r3, #1
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	6859      	ldr	r1, [r3, #4]
 800565c:	4877      	ldr	r0, [pc, #476]	; (800583c <HAL_OSPIM_Config+0x69c>)
 800565e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800566e:	4413      	add	r3, r2
 8005670:	3b24      	subs	r3, #36	; 0x24
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3b01      	subs	r3, #1
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4403      	add	r3, r0
 8005682:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort-1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC), (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));
 8005684:	4a6d      	ldr	r2, [pc, #436]	; (800583c <HAL_OSPIM_Config+0x69c>)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	3b01      	subs	r3, #1
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005698:	025b      	lsls	r3, r3, #9
 800569a:	431a      	orrs	r2, r3
 800569c:	4967      	ldr	r1, [pc, #412]	; (800583c <HAL_OSPIM_Config+0x69c>)
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
 80056ae:	4a63      	ldr	r2, [pc, #396]	; (800583c <HAL_OSPIM_Config+0x69c>)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f023 0203 	bic.w	r2, r3, #3
 80056c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	431a      	orrs	r2, r3
 80056c6:	495d      	ldr	r1, [pc, #372]	; (800583c <HAL_OSPIM_Config+0x69c>)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	440b      	add	r3, r1
 80056d6:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d014      	beq.n	800570a <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
 80056e0:	4a56      	ldr	r2, [pc, #344]	; (800583c <HAL_OSPIM_Config+0x69c>)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056f4:	015b      	lsls	r3, r3, #5
 80056f6:	431a      	orrs	r2, r3
 80056f8:	4950      	ldr	r1, [pc, #320]	; (800583c <HAL_OSPIM_Config+0x69c>)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	3b01      	subs	r3, #1
 8005700:	f042 0210 	orr.w	r2, r2, #16
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	440b      	add	r3, r1
 8005708:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d019      	beq.n	800574a <HAL_OSPIM_Config+0x5aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8005716:	4a49      	ldr	r2, [pc, #292]	; (800583c <HAL_OSPIM_Config+0x69c>)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	3b01      	subs	r3, #1
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800572c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800572e:	049b      	lsls	r3, r3, #18
 8005730:	431a      	orrs	r2, r3
 8005732:	4942      	ldr	r1, [pc, #264]	; (800583c <HAL_OSPIM_Config+0x69c>)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	3b01      	subs	r3, #1
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	605a      	str	r2, [r3, #4]
 8005748:	e01c      	b.n	8005784 <HAL_OSPIM_Config+0x5e4>
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d018      	beq.n	8005784 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8005752:	4a3a      	ldr	r2, [pc, #232]	; (800583c <HAL_OSPIM_Config+0x69c>)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	3b01      	subs	r3, #1
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800576a:	069b      	lsls	r3, r3, #26
 800576c:	431a      	orrs	r2, r3
 800576e:	4933      	ldr	r1, [pc, #204]	; (800583c <HAL_OSPIM_Config+0x69c>)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	3b01      	subs	r3, #1
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d019      	beq.n	80057c4 <HAL_OSPIM_Config+0x624>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8005790:	4a2a      	ldr	r2, [pc, #168]	; (800583c <HAL_OSPIM_Config+0x69c>)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	3b01      	subs	r3, #1
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80057a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a8:	049b      	lsls	r3, r3, #18
 80057aa:	431a      	orrs	r2, r3
 80057ac:	4923      	ldr	r1, [pc, #140]	; (800583c <HAL_OSPIM_Config+0x69c>)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	605a      	str	r2, [r3, #4]
 80057c2:	e01c      	b.n	80057fe <HAL_OSPIM_Config+0x65e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d018      	beq.n	80057fe <HAL_OSPIM_Config+0x65e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 80057cc:	4a1b      	ldr	r2, [pc, #108]	; (800583c <HAL_OSPIM_Config+0x69c>)
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80057e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e4:	069b      	lsls	r3, r3, #26
 80057e6:	431a      	orrs	r2, r3
 80057e8:	4914      	ldr	r1, [pc, #80]	; (800583c <HAL_OSPIM_Config+0x69c>)
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80057fe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <HAL_OSPIM_Config+0x676>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800580a:	4b0d      	ldr	r3, [pc, #52]	; (8005840 <HAL_OSPIM_Config+0x6a0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a0c      	ldr	r2, [pc, #48]	; (8005840 <HAL_OSPIM_Config+0x6a0>)
 8005810:	f043 0301 	orr.w	r3, r3, #1
 8005814:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8005816:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <HAL_OSPIM_Config+0x68e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005822:	4b08      	ldr	r3, [pc, #32]	; (8005844 <HAL_OSPIM_Config+0x6a4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a07      	ldr	r2, [pc, #28]	; (8005844 <HAL_OSPIM_Config+0x6a4>)
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800582e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005832:	4618      	mov	r0, r3
 8005834:	3748      	adds	r7, #72	; 0x48
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	50061c00 	.word	0x50061c00
 8005840:	a0001000 	.word	0xa0001000
 8005844:	a0001400 	.word	0xa0001400

08005848 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	603b      	str	r3, [r7, #0]
 8005854:	4613      	mov	r3, r2
 8005856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005858:	e01a      	b.n	8005890 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005860:	d016      	beq.n	8005890 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005862:	f7fd fe17 	bl	8003494 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	429a      	cmp	r2, r3
 8005870:	d302      	bcc.n	8005878 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10b      	bne.n	8005890 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800587e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005884:	f043 0201 	orr.w	r2, r3, #1
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e00e      	b.n	80058ae <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6a1a      	ldr	r2, [r3, #32]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	4013      	ands	r3, r2
 800589a:	2b00      	cmp	r3, #0
 800589c:	bf14      	ite	ne
 800589e:	2301      	movne	r3, #1
 80058a0:	2300      	moveq	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d1d6      	bne.n	800585a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	4603      	mov	r3, r0
 80058c0:	6039      	str	r1, [r7, #0]
 80058c2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg, value = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <OSPIM_GetConfig+0x26>
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d802      	bhi.n	80058de <OSPIM_GetConfig+0x26>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d102      	bne.n	80058e4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	75fb      	strb	r3, [r7, #23]
 80058e2:	e08e      	b.n	8005a02 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2200      	movs	r2, #0
 80058ee:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2200      	movs	r2, #0
 80058f4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2200      	movs	r2, #0
 80058fa:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2200      	movs	r2, #0
 8005900:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8005902:	79fb      	ldrb	r3, [r7, #7]
 8005904:	2b02      	cmp	r3, #2
 8005906:	d101      	bne.n	800590c <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
 8005908:	4b41      	ldr	r3, [pc, #260]	; (8005a10 <OSPIM_GetConfig+0x158>)
 800590a:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800590c:	2300      	movs	r3, #0
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	e074      	b.n	80059fc <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8005912:	4a40      	ldr	r2, [pc, #256]	; (8005a14 <OSPIM_GetConfig+0x15c>)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4053      	eors	r3, r2
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d103      	bne.n	800593e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f003 0310 	and.w	r3, r3, #16
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	4053      	eors	r3, r2
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d103      	bne.n	800595e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	4053      	eors	r3, r2
 800596e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005972:	2b00      	cmp	r3, #0
 8005974:	d103      	bne.n	800597e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d018      	beq.n	80059ba <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4053      	eors	r3, r2
 800598e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d111      	bne.n	80059ba <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d106      	bne.n	80059ae <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3301      	adds	r3, #1
 80059a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	60da      	str	r2, [r3, #12]
 80059ac:	e005      	b.n	80059ba <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3301      	adds	r3, #1
 80059b2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d018      	beq.n	80059f6 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	4053      	eors	r3, r2
 80059ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d111      	bne.n	80059f6 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d106      	bne.n	80059ea <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3301      	adds	r3, #1
 80059e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	611a      	str	r2, [r3, #16]
 80059e8:	e005      	b.n	80059f6 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3301      	adds	r3, #1
 80059ee:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3301      	adds	r3, #1
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d987      	bls.n	8005912 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	04040222 	.word	0x04040222
 8005a14:	50061c00 	.word	0x50061c00

08005a18 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a1c:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a04      	ldr	r2, [pc, #16]	; (8005a34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a26:	6013      	str	r3, [r2, #0]
}
 8005a28:	bf00      	nop
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40007000 	.word	0x40007000

08005a38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a3c:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a48:	d102      	bne.n	8005a50 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a4e:	e00b      	b.n	8005a68 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005a50:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a5e:	d102      	bne.n	8005a66 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a64:	e000      	b.n	8005a68 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005a66:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40007000 	.word	0x40007000

08005a78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d141      	bne.n	8005b0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a86:	4b4b      	ldr	r3, [pc, #300]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a92:	d131      	bne.n	8005af8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a94:	4b47      	ldr	r3, [pc, #284]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a9a:	4a46      	ldr	r2, [pc, #280]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005aa4:	4b43      	ldr	r3, [pc, #268]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005aac:	4a41      	ldr	r2, [pc, #260]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ab2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005ab4:	4b40      	ldr	r3, [pc, #256]	; (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2232      	movs	r2, #50	; 0x32
 8005aba:	fb02 f303 	mul.w	r3, r2, r3
 8005abe:	4a3f      	ldr	r2, [pc, #252]	; (8005bbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac4:	0c9b      	lsrs	r3, r3, #18
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005aca:	e002      	b.n	8005ad2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ad2:	4b38      	ldr	r3, [pc, #224]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ade:	d102      	bne.n	8005ae6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f2      	bne.n	8005acc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ae6:	4b33      	ldr	r3, [pc, #204]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af2:	d158      	bne.n	8005ba6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e057      	b.n	8005ba8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005af8:	4b2e      	ldr	r3, [pc, #184]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005afe:	4a2d      	ldr	r2, [pc, #180]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005b08:	e04d      	b.n	8005ba6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b10:	d141      	bne.n	8005b96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b12:	4b28      	ldr	r3, [pc, #160]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1e:	d131      	bne.n	8005b84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b20:	4b24      	ldr	r3, [pc, #144]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b26:	4a23      	ldr	r2, [pc, #140]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b30:	4b20      	ldr	r3, [pc, #128]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b38:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005b40:	4b1d      	ldr	r3, [pc, #116]	; (8005bb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2232      	movs	r2, #50	; 0x32
 8005b46:	fb02 f303 	mul.w	r3, r2, r3
 8005b4a:	4a1c      	ldr	r2, [pc, #112]	; (8005bbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b50:	0c9b      	lsrs	r3, r3, #18
 8005b52:	3301      	adds	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b56:	e002      	b.n	8005b5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b5e:	4b15      	ldr	r3, [pc, #84]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b6a:	d102      	bne.n	8005b72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1f2      	bne.n	8005b58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b72:	4b10      	ldr	r3, [pc, #64]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b7e:	d112      	bne.n	8005ba6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e011      	b.n	8005ba8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b84:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b8a:	4a0a      	ldr	r2, [pc, #40]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005b94:	e007      	b.n	8005ba6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b96:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b9e:	4a05      	ldr	r2, [pc, #20]	; (8005bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ba0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ba4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	40007000 	.word	0x40007000
 8005bb8:	20000000 	.word	0x20000000
 8005bbc:	431bde83 	.word	0x431bde83

08005bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d102      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f000 bc16 	b.w	8006400 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bd4:	4ba0      	ldr	r3, [pc, #640]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f003 030c 	and.w	r3, r3, #12
 8005bdc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bde:	4b9e      	ldr	r3, [pc, #632]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80e4 	beq.w	8005dbe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d007      	beq.n	8005c0c <HAL_RCC_OscConfig+0x4c>
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	2b0c      	cmp	r3, #12
 8005c00:	f040 808b 	bne.w	8005d1a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	f040 8087 	bne.w	8005d1a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c0c:	4b92      	ldr	r3, [pc, #584]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_RCC_OscConfig+0x64>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e3ed      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1a      	ldr	r2, [r3, #32]
 8005c28:	4b8b      	ldr	r3, [pc, #556]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d004      	beq.n	8005c3e <HAL_RCC_OscConfig+0x7e>
 8005c34:	4b88      	ldr	r3, [pc, #544]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c3c:	e005      	b.n	8005c4a <HAL_RCC_OscConfig+0x8a>
 8005c3e:	4b86      	ldr	r3, [pc, #536]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c44:	091b      	lsrs	r3, r3, #4
 8005c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d223      	bcs.n	8005c96 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fdc8 	bl	80067e8 <RCC_SetFlashLatencyFromMSIRange>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e3ce      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c62:	4b7d      	ldr	r3, [pc, #500]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a7c      	ldr	r2, [pc, #496]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005c68:	f043 0308 	orr.w	r3, r3, #8
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	4b7a      	ldr	r3, [pc, #488]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	4977      	ldr	r1, [pc, #476]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c80:	4b75      	ldr	r3, [pc, #468]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	4972      	ldr	r1, [pc, #456]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	604b      	str	r3, [r1, #4]
 8005c94:	e025      	b.n	8005ce2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c96:	4b70      	ldr	r3, [pc, #448]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a6f      	ldr	r2, [pc, #444]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005c9c:	f043 0308 	orr.w	r3, r3, #8
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	4b6d      	ldr	r3, [pc, #436]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	496a      	ldr	r1, [pc, #424]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cb4:	4b68      	ldr	r3, [pc, #416]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	4965      	ldr	r1, [pc, #404]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d109      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fd88 	bl	80067e8 <RCC_SetFlashLatencyFromMSIRange>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e38e      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ce2:	f000 fcbf 	bl	8006664 <HAL_RCC_GetSysClockFreq>
 8005ce6:	4601      	mov	r1, r0
 8005ce8:	4b5b      	ldr	r3, [pc, #364]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	091b      	lsrs	r3, r3, #4
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	4a5a      	ldr	r2, [pc, #360]	; (8005e5c <HAL_RCC_OscConfig+0x29c>)
 8005cf4:	5cd3      	ldrb	r3, [r2, r3]
 8005cf6:	f003 031f 	and.w	r3, r3, #31
 8005cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8005cfe:	4a58      	ldr	r2, [pc, #352]	; (8005e60 <HAL_RCC_OscConfig+0x2a0>)
 8005d00:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005d02:	4b58      	ldr	r3, [pc, #352]	; (8005e64 <HAL_RCC_OscConfig+0x2a4>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fd fb74 	bl	80033f4 <HAL_InitTick>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d052      	beq.n	8005dbc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	e372      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d032      	beq.n	8005d88 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d22:	4b4d      	ldr	r3, [pc, #308]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a4c      	ldr	r2, [pc, #304]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005d28:	f043 0301 	orr.w	r3, r3, #1
 8005d2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d2e:	f7fd fbb1 	bl	8003494 <HAL_GetTick>
 8005d32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d34:	e008      	b.n	8005d48 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d36:	f7fd fbad 	bl	8003494 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e35b      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d48:	4b43      	ldr	r3, [pc, #268]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0f0      	beq.n	8005d36 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d54:	4b40      	ldr	r3, [pc, #256]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a3f      	ldr	r2, [pc, #252]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005d5a:	f043 0308 	orr.w	r3, r3, #8
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	4b3d      	ldr	r3, [pc, #244]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	493a      	ldr	r1, [pc, #232]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d72:	4b39      	ldr	r3, [pc, #228]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	4935      	ldr	r1, [pc, #212]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	604b      	str	r3, [r1, #4]
 8005d86:	e01a      	b.n	8005dbe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d88:	4b33      	ldr	r3, [pc, #204]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a32      	ldr	r2, [pc, #200]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005d8e:	f023 0301 	bic.w	r3, r3, #1
 8005d92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d94:	f7fd fb7e 	bl	8003494 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d9c:	f7fd fb7a 	bl	8003494 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e328      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005dae:	4b2a      	ldr	r3, [pc, #168]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x1dc>
 8005dba:	e000      	b.n	8005dbe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005dbc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d073      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d005      	beq.n	8005ddc <HAL_RCC_OscConfig+0x21c>
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	2b0c      	cmp	r3, #12
 8005dd4:	d10e      	bne.n	8005df4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d10b      	bne.n	8005df4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ddc:	4b1e      	ldr	r3, [pc, #120]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d063      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x2f0>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d15f      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e305      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dfc:	d106      	bne.n	8005e0c <HAL_RCC_OscConfig+0x24c>
 8005dfe:	4b16      	ldr	r3, [pc, #88]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a15      	ldr	r2, [pc, #84]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	e01d      	b.n	8005e48 <HAL_RCC_OscConfig+0x288>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e14:	d10c      	bne.n	8005e30 <HAL_RCC_OscConfig+0x270>
 8005e16:	4b10      	ldr	r3, [pc, #64]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a0f      	ldr	r2, [pc, #60]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	4b0d      	ldr	r3, [pc, #52]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a0c      	ldr	r2, [pc, #48]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	e00b      	b.n	8005e48 <HAL_RCC_OscConfig+0x288>
 8005e30:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a08      	ldr	r2, [pc, #32]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a05      	ldr	r2, [pc, #20]	; (8005e58 <HAL_RCC_OscConfig+0x298>)
 8005e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01b      	beq.n	8005e88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e50:	f7fd fb20 	bl	8003494 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e56:	e010      	b.n	8005e7a <HAL_RCC_OscConfig+0x2ba>
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	0800dc64 	.word	0x0800dc64
 8005e60:	20000000 	.word	0x20000000
 8005e64:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e68:	f7fd fb14 	bl	8003494 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b64      	cmp	r3, #100	; 0x64
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e2c2      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e7a:	4baf      	ldr	r3, [pc, #700]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0f0      	beq.n	8005e68 <HAL_RCC_OscConfig+0x2a8>
 8005e86:	e014      	b.n	8005eb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e88:	f7fd fb04 	bl	8003494 <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e90:	f7fd fb00 	bl	8003494 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b64      	cmp	r3, #100	; 0x64
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e2ae      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ea2:	4ba5      	ldr	r3, [pc, #660]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f0      	bne.n	8005e90 <HAL_RCC_OscConfig+0x2d0>
 8005eae:	e000      	b.n	8005eb2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d060      	beq.n	8005f80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d005      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x310>
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2b0c      	cmp	r3, #12
 8005ec8:	d119      	bne.n	8005efe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d116      	bne.n	8005efe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ed0:	4b99      	ldr	r3, [pc, #612]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x328>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e28b      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee8:	4b93      	ldr	r3, [pc, #588]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	061b      	lsls	r3, r3, #24
 8005ef6:	4990      	ldr	r1, [pc, #576]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005efc:	e040      	b.n	8005f80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d023      	beq.n	8005f4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f06:	4b8c      	ldr	r3, [pc, #560]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a8b      	ldr	r2, [pc, #556]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f12:	f7fd fabf 	bl	8003494 <HAL_GetTick>
 8005f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f18:	e008      	b.n	8005f2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f1a:	f7fd fabb 	bl	8003494 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e269      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f2c:	4b82      	ldr	r3, [pc, #520]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0f0      	beq.n	8005f1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f38:	4b7f      	ldr	r3, [pc, #508]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	061b      	lsls	r3, r3, #24
 8005f46:	497c      	ldr	r1, [pc, #496]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	604b      	str	r3, [r1, #4]
 8005f4c:	e018      	b.n	8005f80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f4e:	4b7a      	ldr	r3, [pc, #488]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a79      	ldr	r2, [pc, #484]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5a:	f7fd fa9b 	bl	8003494 <HAL_GetTick>
 8005f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f60:	e008      	b.n	8005f74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f62:	f7fd fa97 	bl	8003494 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d901      	bls.n	8005f74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e245      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f74:	4b70      	ldr	r3, [pc, #448]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1f0      	bne.n	8005f62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d03c      	beq.n	8006006 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01c      	beq.n	8005fce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f94:	4b68      	ldr	r3, [pc, #416]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f9a:	4a67      	ldr	r2, [pc, #412]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005f9c:	f043 0301 	orr.w	r3, r3, #1
 8005fa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa4:	f7fd fa76 	bl	8003494 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fac:	f7fd fa72 	bl	8003494 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e220      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fbe:	4b5e      	ldr	r3, [pc, #376]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0ef      	beq.n	8005fac <HAL_RCC_OscConfig+0x3ec>
 8005fcc:	e01b      	b.n	8006006 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fce:	4b5a      	ldr	r3, [pc, #360]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fd4:	4a58      	ldr	r2, [pc, #352]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005fd6:	f023 0301 	bic.w	r3, r3, #1
 8005fda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fde:	f7fd fa59 	bl	8003494 <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fe6:	f7fd fa55 	bl	8003494 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e203      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ff8:	4b4f      	ldr	r3, [pc, #316]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8005ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1ef      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 80a6 	beq.w	8006160 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006014:	2300      	movs	r3, #0
 8006016:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006018:	4b47      	ldr	r3, [pc, #284]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 800601a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10d      	bne.n	8006040 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006024:	4b44      	ldr	r3, [pc, #272]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8006026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006028:	4a43      	ldr	r2, [pc, #268]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 800602a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800602e:	6593      	str	r3, [r2, #88]	; 0x58
 8006030:	4b41      	ldr	r3, [pc, #260]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8006032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006038:	60bb      	str	r3, [r7, #8]
 800603a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800603c:	2301      	movs	r3, #1
 800603e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006040:	4b3e      	ldr	r3, [pc, #248]	; (800613c <HAL_RCC_OscConfig+0x57c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006048:	2b00      	cmp	r3, #0
 800604a:	d118      	bne.n	800607e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800604c:	4b3b      	ldr	r3, [pc, #236]	; (800613c <HAL_RCC_OscConfig+0x57c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a3a      	ldr	r2, [pc, #232]	; (800613c <HAL_RCC_OscConfig+0x57c>)
 8006052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006056:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006058:	f7fd fa1c 	bl	8003494 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006060:	f7fd fa18 	bl	8003494 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e1c6      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006072:	4b32      	ldr	r3, [pc, #200]	; (800613c <HAL_RCC_OscConfig+0x57c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0f0      	beq.n	8006060 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d108      	bne.n	8006098 <HAL_RCC_OscConfig+0x4d8>
 8006086:	4b2c      	ldr	r3, [pc, #176]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 8006088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608c:	4a2a      	ldr	r2, [pc, #168]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 800608e:	f043 0301 	orr.w	r3, r3, #1
 8006092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006096:	e024      	b.n	80060e2 <HAL_RCC_OscConfig+0x522>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	2b05      	cmp	r3, #5
 800609e:	d110      	bne.n	80060c2 <HAL_RCC_OscConfig+0x502>
 80060a0:	4b25      	ldr	r3, [pc, #148]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 80060a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a6:	4a24      	ldr	r2, [pc, #144]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 80060a8:	f043 0304 	orr.w	r3, r3, #4
 80060ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060b0:	4b21      	ldr	r3, [pc, #132]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b6:	4a20      	ldr	r2, [pc, #128]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 80060b8:	f043 0301 	orr.w	r3, r3, #1
 80060bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060c0:	e00f      	b.n	80060e2 <HAL_RCC_OscConfig+0x522>
 80060c2:	4b1d      	ldr	r3, [pc, #116]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 80060c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c8:	4a1b      	ldr	r2, [pc, #108]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 80060ca:	f023 0301 	bic.w	r3, r3, #1
 80060ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060d2:	4b19      	ldr	r3, [pc, #100]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 80060d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d8:	4a17      	ldr	r2, [pc, #92]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 80060da:	f023 0304 	bic.w	r3, r3, #4
 80060de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d016      	beq.n	8006118 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ea:	f7fd f9d3 	bl	8003494 <HAL_GetTick>
 80060ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060f0:	e00a      	b.n	8006108 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f2:	f7fd f9cf 	bl	8003494 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006100:	4293      	cmp	r3, r2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e17b      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006108:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <HAL_RCC_OscConfig+0x578>)
 800610a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0ed      	beq.n	80060f2 <HAL_RCC_OscConfig+0x532>
 8006116:	e01a      	b.n	800614e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006118:	f7fd f9bc 	bl	8003494 <HAL_GetTick>
 800611c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800611e:	e00f      	b.n	8006140 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006120:	f7fd f9b8 	bl	8003494 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	f241 3288 	movw	r2, #5000	; 0x1388
 800612e:	4293      	cmp	r3, r2
 8006130:	d906      	bls.n	8006140 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e164      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
 8006136:	bf00      	nop
 8006138:	40021000 	.word	0x40021000
 800613c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006140:	4ba8      	ldr	r3, [pc, #672]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 8006142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e8      	bne.n	8006120 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800614e:	7ffb      	ldrb	r3, [r7, #31]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d105      	bne.n	8006160 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006154:	4ba3      	ldr	r3, [pc, #652]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 8006156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006158:	4aa2      	ldr	r2, [pc, #648]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 800615a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800615e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	2b00      	cmp	r3, #0
 800616a:	d03c      	beq.n	80061e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01c      	beq.n	80061ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006174:	4b9b      	ldr	r3, [pc, #620]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 8006176:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800617a:	4a9a      	ldr	r2, [pc, #616]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 800617c:	f043 0301 	orr.w	r3, r3, #1
 8006180:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006184:	f7fd f986 	bl	8003494 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800618c:	f7fd f982 	bl	8003494 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b02      	cmp	r3, #2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e130      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800619e:	4b91      	ldr	r3, [pc, #580]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 80061a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0ef      	beq.n	800618c <HAL_RCC_OscConfig+0x5cc>
 80061ac:	e01b      	b.n	80061e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061ae:	4b8d      	ldr	r3, [pc, #564]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 80061b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061b4:	4a8b      	ldr	r2, [pc, #556]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 80061b6:	f023 0301 	bic.w	r3, r3, #1
 80061ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061be:	f7fd f969 	bl	8003494 <HAL_GetTick>
 80061c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061c4:	e008      	b.n	80061d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061c6:	f7fd f965 	bl	8003494 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d901      	bls.n	80061d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e113      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061d8:	4b82      	ldr	r3, [pc, #520]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 80061da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1ef      	bne.n	80061c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8107 	beq.w	80063fe <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	f040 80cb 	bne.w	8006390 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80061fa:	4b7a      	ldr	r3, [pc, #488]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f003 0203 	and.w	r2, r3, #3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	429a      	cmp	r2, r3
 800620c:	d12c      	bne.n	8006268 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006218:	3b01      	subs	r3, #1
 800621a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800621c:	429a      	cmp	r2, r3
 800621e:	d123      	bne.n	8006268 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800622c:	429a      	cmp	r2, r3
 800622e:	d11b      	bne.n	8006268 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800623c:	429a      	cmp	r2, r3
 800623e:	d113      	bne.n	8006268 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624a:	085b      	lsrs	r3, r3, #1
 800624c:	3b01      	subs	r3, #1
 800624e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006250:	429a      	cmp	r2, r3
 8006252:	d109      	bne.n	8006268 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	085b      	lsrs	r3, r3, #1
 8006260:	3b01      	subs	r3, #1
 8006262:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006264:	429a      	cmp	r2, r3
 8006266:	d06d      	beq.n	8006344 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	2b0c      	cmp	r3, #12
 800626c:	d068      	beq.n	8006340 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800626e:	4b5d      	ldr	r3, [pc, #372]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d105      	bne.n	8006286 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800627a:	4b5a      	ldr	r3, [pc, #360]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e0ba      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800628a:	4b56      	ldr	r3, [pc, #344]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a55      	ldr	r2, [pc, #340]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 8006290:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006294:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006296:	f7fd f8fd 	bl	8003494 <HAL_GetTick>
 800629a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800629c:	e008      	b.n	80062b0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800629e:	f7fd f8f9 	bl	8003494 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e0a7      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062b0:	4b4c      	ldr	r3, [pc, #304]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1f0      	bne.n	800629e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062bc:	4b49      	ldr	r3, [pc, #292]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	4b49      	ldr	r3, [pc, #292]	; (80063e8 <HAL_RCC_OscConfig+0x828>)
 80062c2:	4013      	ands	r3, r2
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80062cc:	3a01      	subs	r2, #1
 80062ce:	0112      	lsls	r2, r2, #4
 80062d0:	4311      	orrs	r1, r2
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062d6:	0212      	lsls	r2, r2, #8
 80062d8:	4311      	orrs	r1, r2
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80062de:	0852      	lsrs	r2, r2, #1
 80062e0:	3a01      	subs	r2, #1
 80062e2:	0552      	lsls	r2, r2, #21
 80062e4:	4311      	orrs	r1, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80062ea:	0852      	lsrs	r2, r2, #1
 80062ec:	3a01      	subs	r2, #1
 80062ee:	0652      	lsls	r2, r2, #25
 80062f0:	4311      	orrs	r1, r2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062f6:	06d2      	lsls	r2, r2, #27
 80062f8:	430a      	orrs	r2, r1
 80062fa:	493a      	ldr	r1, [pc, #232]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006300:	4b38      	ldr	r3, [pc, #224]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a37      	ldr	r2, [pc, #220]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 8006306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800630a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800630c:	4b35      	ldr	r3, [pc, #212]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	4a34      	ldr	r2, [pc, #208]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 8006312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006316:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006318:	f7fd f8bc 	bl	8003494 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006320:	f7fd f8b8 	bl	8003494 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e066      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006332:	4b2c      	ldr	r3, [pc, #176]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0f0      	beq.n	8006320 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800633e:	e05e      	b.n	80063fe <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e05d      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006344:	4b27      	ldr	r3, [pc, #156]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d156      	bne.n	80063fe <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006350:	4b24      	ldr	r3, [pc, #144]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a23      	ldr	r2, [pc, #140]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 8006356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800635a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800635c:	4b21      	ldr	r3, [pc, #132]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	4a20      	ldr	r2, [pc, #128]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 8006362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006366:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006368:	f7fd f894 	bl	8003494 <HAL_GetTick>
 800636c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006370:	f7fd f890 	bl	8003494 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e03e      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006382:	4b18      	ldr	r3, [pc, #96]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0f0      	beq.n	8006370 <HAL_RCC_OscConfig+0x7b0>
 800638e:	e036      	b.n	80063fe <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	2b0c      	cmp	r3, #12
 8006394:	d031      	beq.n	80063fa <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006396:	4b13      	ldr	r3, [pc, #76]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a12      	ldr	r2, [pc, #72]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 800639c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063a0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80063a2:	4b10      	ldr	r3, [pc, #64]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d105      	bne.n	80063ba <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80063ae:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	4a0c      	ldr	r2, [pc, #48]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 80063b4:	f023 0303 	bic.w	r3, r3, #3
 80063b8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80063ba:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	4a09      	ldr	r2, [pc, #36]	; (80063e4 <HAL_RCC_OscConfig+0x824>)
 80063c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80063c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ca:	f7fd f863 	bl	8003494 <HAL_GetTick>
 80063ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063d0:	e00c      	b.n	80063ec <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063d2:	f7fd f85f 	bl	8003494 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d905      	bls.n	80063ec <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e00d      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
 80063e4:	40021000 	.word	0x40021000
 80063e8:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063ec:	4b06      	ldr	r3, [pc, #24]	; (8006408 <HAL_RCC_OscConfig+0x848>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1ec      	bne.n	80063d2 <HAL_RCC_OscConfig+0x812>
 80063f8:	e001      	b.n	80063fe <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3720      	adds	r7, #32
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40021000 	.word	0x40021000

0800640c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e10f      	b.n	8006644 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006424:	4b89      	ldr	r3, [pc, #548]	; (800664c <HAL_RCC_ClockConfig+0x240>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	429a      	cmp	r2, r3
 8006430:	d910      	bls.n	8006454 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006432:	4b86      	ldr	r3, [pc, #536]	; (800664c <HAL_RCC_ClockConfig+0x240>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f023 020f 	bic.w	r2, r3, #15
 800643a:	4984      	ldr	r1, [pc, #528]	; (800664c <HAL_RCC_ClockConfig+0x240>)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	4313      	orrs	r3, r2
 8006440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006442:	4b82      	ldr	r3, [pc, #520]	; (800664c <HAL_RCC_ClockConfig+0x240>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 030f 	and.w	r3, r3, #15
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	429a      	cmp	r2, r3
 800644e:	d001      	beq.n	8006454 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e0f7      	b.n	8006644 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 8089 	beq.w	8006574 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2b03      	cmp	r3, #3
 8006468:	d133      	bne.n	80064d2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800646a:	4b79      	ldr	r3, [pc, #484]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e0e4      	b.n	8006644 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800647a:	f000 fa0f 	bl	800689c <RCC_GetSysClockFreqFromPLLSource>
 800647e:	4602      	mov	r2, r0
 8006480:	4b74      	ldr	r3, [pc, #464]	; (8006654 <HAL_RCC_ClockConfig+0x248>)
 8006482:	429a      	cmp	r2, r3
 8006484:	d955      	bls.n	8006532 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006486:	4b72      	ldr	r3, [pc, #456]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10a      	bne.n	80064a8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006492:	4b6f      	ldr	r3, [pc, #444]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800649a:	4a6d      	ldr	r2, [pc, #436]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 800649c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80064a2:	2380      	movs	r3, #128	; 0x80
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	e044      	b.n	8006532 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d03e      	beq.n	8006532 <HAL_RCC_ClockConfig+0x126>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d13a      	bne.n	8006532 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064bc:	4b64      	ldr	r3, [pc, #400]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064c4:	4a62      	ldr	r2, [pc, #392]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 80064c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ca:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80064cc:	2380      	movs	r3, #128	; 0x80
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	e02f      	b.n	8006532 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d107      	bne.n	80064ea <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064da:	4b5d      	ldr	r3, [pc, #372]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d115      	bne.n	8006512 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e0ac      	b.n	8006644 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d107      	bne.n	8006502 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064f2:	4b57      	ldr	r3, [pc, #348]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d109      	bne.n	8006512 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e0a0      	b.n	8006644 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006502:	4b53      	ldr	r3, [pc, #332]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e098      	b.n	8006644 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006512:	f000 f8a7 	bl	8006664 <HAL_RCC_GetSysClockFreq>
 8006516:	4602      	mov	r2, r0
 8006518:	4b4e      	ldr	r3, [pc, #312]	; (8006654 <HAL_RCC_ClockConfig+0x248>)
 800651a:	429a      	cmp	r2, r3
 800651c:	d909      	bls.n	8006532 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800651e:	4b4c      	ldr	r3, [pc, #304]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006526:	4a4a      	ldr	r2, [pc, #296]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 8006528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800652c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800652e:	2380      	movs	r3, #128	; 0x80
 8006530:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006532:	4b47      	ldr	r3, [pc, #284]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f023 0203 	bic.w	r2, r3, #3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	4944      	ldr	r1, [pc, #272]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 8006540:	4313      	orrs	r3, r2
 8006542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006544:	f7fc ffa6 	bl	8003494 <HAL_GetTick>
 8006548:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800654a:	e00a      	b.n	8006562 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800654c:	f7fc ffa2 	bl	8003494 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	f241 3288 	movw	r2, #5000	; 0x1388
 800655a:	4293      	cmp	r3, r2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e070      	b.n	8006644 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006562:	4b3b      	ldr	r3, [pc, #236]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 020c 	and.w	r2, r3, #12
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	429a      	cmp	r2, r3
 8006572:	d1eb      	bne.n	800654c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d009      	beq.n	8006594 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006580:	4b33      	ldr	r3, [pc, #204]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	4930      	ldr	r1, [pc, #192]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 800658e:	4313      	orrs	r3, r2
 8006590:	608b      	str	r3, [r1, #8]
 8006592:	e008      	b.n	80065a6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2b80      	cmp	r3, #128	; 0x80
 8006598:	d105      	bne.n	80065a6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800659a:	4b2d      	ldr	r3, [pc, #180]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	4a2c      	ldr	r2, [pc, #176]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 80065a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065a4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065a6:	4b29      	ldr	r3, [pc, #164]	; (800664c <HAL_RCC_ClockConfig+0x240>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d210      	bcs.n	80065d6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b4:	4b25      	ldr	r3, [pc, #148]	; (800664c <HAL_RCC_ClockConfig+0x240>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f023 020f 	bic.w	r2, r3, #15
 80065bc:	4923      	ldr	r1, [pc, #140]	; (800664c <HAL_RCC_ClockConfig+0x240>)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c4:	4b21      	ldr	r3, [pc, #132]	; (800664c <HAL_RCC_ClockConfig+0x240>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 030f 	and.w	r3, r3, #15
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d001      	beq.n	80065d6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e036      	b.n	8006644 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0304 	and.w	r3, r3, #4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d008      	beq.n	80065f4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065e2:	4b1b      	ldr	r3, [pc, #108]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	4918      	ldr	r1, [pc, #96]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0308 	and.w	r3, r3, #8
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d009      	beq.n	8006614 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006600:	4b13      	ldr	r3, [pc, #76]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	4910      	ldr	r1, [pc, #64]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 8006610:	4313      	orrs	r3, r2
 8006612:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006614:	f000 f826 	bl	8006664 <HAL_RCC_GetSysClockFreq>
 8006618:	4601      	mov	r1, r0
 800661a:	4b0d      	ldr	r3, [pc, #52]	; (8006650 <HAL_RCC_ClockConfig+0x244>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	091b      	lsrs	r3, r3, #4
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	4a0c      	ldr	r2, [pc, #48]	; (8006658 <HAL_RCC_ClockConfig+0x24c>)
 8006626:	5cd3      	ldrb	r3, [r2, r3]
 8006628:	f003 031f 	and.w	r3, r3, #31
 800662c:	fa21 f303 	lsr.w	r3, r1, r3
 8006630:	4a0a      	ldr	r2, [pc, #40]	; (800665c <HAL_RCC_ClockConfig+0x250>)
 8006632:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006634:	4b0a      	ldr	r3, [pc, #40]	; (8006660 <HAL_RCC_ClockConfig+0x254>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4618      	mov	r0, r3
 800663a:	f7fc fedb 	bl	80033f4 <HAL_InitTick>
 800663e:	4603      	mov	r3, r0
 8006640:	73fb      	strb	r3, [r7, #15]

  return status;
 8006642:	7bfb      	ldrb	r3, [r7, #15]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	40022000 	.word	0x40022000
 8006650:	40021000 	.word	0x40021000
 8006654:	04c4b400 	.word	0x04c4b400
 8006658:	0800dc64 	.word	0x0800dc64
 800665c:	20000000 	.word	0x20000000
 8006660:	20000004 	.word	0x20000004

08006664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006664:	b480      	push	{r7}
 8006666:	b089      	sub	sp, #36	; 0x24
 8006668:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	61fb      	str	r3, [r7, #28]
 800666e:	2300      	movs	r3, #0
 8006670:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006672:	4b3d      	ldr	r3, [pc, #244]	; (8006768 <HAL_RCC_GetSysClockFreq+0x104>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f003 030c 	and.w	r3, r3, #12
 800667a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800667c:	4b3a      	ldr	r3, [pc, #232]	; (8006768 <HAL_RCC_GetSysClockFreq+0x104>)
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f003 0303 	and.w	r3, r3, #3
 8006684:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d005      	beq.n	8006698 <HAL_RCC_GetSysClockFreq+0x34>
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2b0c      	cmp	r3, #12
 8006690:	d121      	bne.n	80066d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d11e      	bne.n	80066d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006698:	4b33      	ldr	r3, [pc, #204]	; (8006768 <HAL_RCC_GetSysClockFreq+0x104>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d107      	bne.n	80066b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80066a4:	4b30      	ldr	r3, [pc, #192]	; (8006768 <HAL_RCC_GetSysClockFreq+0x104>)
 80066a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066aa:	0a1b      	lsrs	r3, r3, #8
 80066ac:	f003 030f 	and.w	r3, r3, #15
 80066b0:	61fb      	str	r3, [r7, #28]
 80066b2:	e005      	b.n	80066c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80066b4:	4b2c      	ldr	r3, [pc, #176]	; (8006768 <HAL_RCC_GetSysClockFreq+0x104>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	091b      	lsrs	r3, r3, #4
 80066ba:	f003 030f 	and.w	r3, r3, #15
 80066be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80066c0:	4a2a      	ldr	r2, [pc, #168]	; (800676c <HAL_RCC_GetSysClockFreq+0x108>)
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10d      	bne.n	80066ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066d4:	e00a      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d102      	bne.n	80066e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066dc:	4b24      	ldr	r3, [pc, #144]	; (8006770 <HAL_RCC_GetSysClockFreq+0x10c>)
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	e004      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d101      	bne.n	80066ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066e8:	4b22      	ldr	r3, [pc, #136]	; (8006774 <HAL_RCC_GetSysClockFreq+0x110>)
 80066ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	2b0c      	cmp	r3, #12
 80066f0:	d133      	bne.n	800675a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066f2:	4b1d      	ldr	r3, [pc, #116]	; (8006768 <HAL_RCC_GetSysClockFreq+0x104>)
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d002      	beq.n	8006708 <HAL_RCC_GetSysClockFreq+0xa4>
 8006702:	2b03      	cmp	r3, #3
 8006704:	d003      	beq.n	800670e <HAL_RCC_GetSysClockFreq+0xaa>
 8006706:	e005      	b.n	8006714 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006708:	4b19      	ldr	r3, [pc, #100]	; (8006770 <HAL_RCC_GetSysClockFreq+0x10c>)
 800670a:	617b      	str	r3, [r7, #20]
      break;
 800670c:	e005      	b.n	800671a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800670e:	4b19      	ldr	r3, [pc, #100]	; (8006774 <HAL_RCC_GetSysClockFreq+0x110>)
 8006710:	617b      	str	r3, [r7, #20]
      break;
 8006712:	e002      	b.n	800671a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	617b      	str	r3, [r7, #20]
      break;
 8006718:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800671a:	4b13      	ldr	r3, [pc, #76]	; (8006768 <HAL_RCC_GetSysClockFreq+0x104>)
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	091b      	lsrs	r3, r3, #4
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	3301      	adds	r3, #1
 8006726:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006728:	4b0f      	ldr	r3, [pc, #60]	; (8006768 <HAL_RCC_GetSysClockFreq+0x104>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	0a1b      	lsrs	r3, r3, #8
 800672e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	fb02 f203 	mul.w	r2, r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	fbb2 f3f3 	udiv	r3, r2, r3
 800673e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006740:	4b09      	ldr	r3, [pc, #36]	; (8006768 <HAL_RCC_GetSysClockFreq+0x104>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	0e5b      	lsrs	r3, r3, #25
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	3301      	adds	r3, #1
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	fbb2 f3f3 	udiv	r3, r2, r3
 8006758:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800675a:	69bb      	ldr	r3, [r7, #24]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3724      	adds	r7, #36	; 0x24
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	40021000 	.word	0x40021000
 800676c:	0800dc7c 	.word	0x0800dc7c
 8006770:	00f42400 	.word	0x00f42400
 8006774:	007a1200 	.word	0x007a1200

08006778 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006778:	b480      	push	{r7}
 800677a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800677c:	4b03      	ldr	r3, [pc, #12]	; (800678c <HAL_RCC_GetHCLKFreq+0x14>)
 800677e:	681b      	ldr	r3, [r3, #0]
}
 8006780:	4618      	mov	r0, r3
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	20000000 	.word	0x20000000

08006790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006794:	f7ff fff0 	bl	8006778 <HAL_RCC_GetHCLKFreq>
 8006798:	4601      	mov	r1, r0
 800679a:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	0a1b      	lsrs	r3, r3, #8
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	4a04      	ldr	r2, [pc, #16]	; (80067b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067a6:	5cd3      	ldrb	r3, [r2, r3]
 80067a8:	f003 031f 	and.w	r3, r3, #31
 80067ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	40021000 	.word	0x40021000
 80067b8:	0800dc74 	.word	0x0800dc74

080067bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80067c0:	f7ff ffda 	bl	8006778 <HAL_RCC_GetHCLKFreq>
 80067c4:	4601      	mov	r1, r0
 80067c6:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	0adb      	lsrs	r3, r3, #11
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	4a04      	ldr	r2, [pc, #16]	; (80067e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067d2:	5cd3      	ldrb	r3, [r2, r3]
 80067d4:	f003 031f 	and.w	r3, r3, #31
 80067d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80067dc:	4618      	mov	r0, r3
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40021000 	.word	0x40021000
 80067e4:	0800dc74 	.word	0x0800dc74

080067e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80067f0:	2300      	movs	r3, #0
 80067f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80067f4:	4b27      	ldr	r3, [pc, #156]	; (8006894 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80067f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006800:	f7ff f91a 	bl	8005a38 <HAL_PWREx_GetVoltageRange>
 8006804:	6178      	str	r0, [r7, #20]
 8006806:	e014      	b.n	8006832 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006808:	4b22      	ldr	r3, [pc, #136]	; (8006894 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800680a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680c:	4a21      	ldr	r2, [pc, #132]	; (8006894 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800680e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006812:	6593      	str	r3, [r2, #88]	; 0x58
 8006814:	4b1f      	ldr	r3, [pc, #124]	; (8006894 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006820:	f7ff f90a 	bl	8005a38 <HAL_PWREx_GetVoltageRange>
 8006824:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006826:	4b1b      	ldr	r3, [pc, #108]	; (8006894 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800682a:	4a1a      	ldr	r2, [pc, #104]	; (8006894 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800682c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006830:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006838:	d10b      	bne.n	8006852 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b80      	cmp	r3, #128	; 0x80
 800683e:	d913      	bls.n	8006868 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2ba0      	cmp	r3, #160	; 0xa0
 8006844:	d902      	bls.n	800684c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006846:	2302      	movs	r3, #2
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	e00d      	b.n	8006868 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800684c:	2301      	movs	r3, #1
 800684e:	613b      	str	r3, [r7, #16]
 8006850:	e00a      	b.n	8006868 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b7f      	cmp	r3, #127	; 0x7f
 8006856:	d902      	bls.n	800685e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006858:	2302      	movs	r3, #2
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	e004      	b.n	8006868 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b70      	cmp	r3, #112	; 0x70
 8006862:	d101      	bne.n	8006868 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006864:	2301      	movs	r3, #1
 8006866:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006868:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f023 020f 	bic.w	r2, r3, #15
 8006870:	4909      	ldr	r1, [pc, #36]	; (8006898 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006878:	4b07      	ldr	r3, [pc, #28]	; (8006898 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 030f 	and.w	r3, r3, #15
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	429a      	cmp	r2, r3
 8006884:	d001      	beq.n	800688a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e000      	b.n	800688c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3718      	adds	r7, #24
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	40021000 	.word	0x40021000
 8006898:	40022000 	.word	0x40022000

0800689c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80068a6:	4b2d      	ldr	r3, [pc, #180]	; (800695c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d118      	bne.n	80068e4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80068b2:	4b2a      	ldr	r3, [pc, #168]	; (800695c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d107      	bne.n	80068ce <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80068be:	4b27      	ldr	r3, [pc, #156]	; (800695c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80068c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068c4:	0a1b      	lsrs	r3, r3, #8
 80068c6:	f003 030f 	and.w	r3, r3, #15
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	e005      	b.n	80068da <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80068ce:	4b23      	ldr	r3, [pc, #140]	; (800695c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	091b      	lsrs	r3, r3, #4
 80068d4:	f003 030f 	and.w	r3, r3, #15
 80068d8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80068da:	4a21      	ldr	r2, [pc, #132]	; (8006960 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80068e4:	4b1d      	ldr	r3, [pc, #116]	; (800695c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f003 0303 	and.w	r3, r3, #3
 80068ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d002      	beq.n	80068fa <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d003      	beq.n	8006900 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80068f8:	e005      	b.n	8006906 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80068fa:	4b1a      	ldr	r3, [pc, #104]	; (8006964 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80068fc:	613b      	str	r3, [r7, #16]
    break;
 80068fe:	e005      	b.n	800690c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006900:	4b19      	ldr	r3, [pc, #100]	; (8006968 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006902:	613b      	str	r3, [r7, #16]
    break;
 8006904:	e002      	b.n	800690c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	613b      	str	r3, [r7, #16]
    break;
 800690a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800690c:	4b13      	ldr	r3, [pc, #76]	; (800695c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	091b      	lsrs	r3, r3, #4
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	3301      	adds	r3, #1
 8006918:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800691a:	4b10      	ldr	r3, [pc, #64]	; (800695c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	0a1b      	lsrs	r3, r3, #8
 8006920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	fb02 f203 	mul.w	r2, r2, r3
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006930:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006932:	4b0a      	ldr	r3, [pc, #40]	; (800695c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	0e5b      	lsrs	r3, r3, #25
 8006938:	f003 0303 	and.w	r3, r3, #3
 800693c:	3301      	adds	r3, #1
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	fbb2 f3f3 	udiv	r3, r2, r3
 800694a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800694c:	683b      	ldr	r3, [r7, #0]
}
 800694e:	4618      	mov	r0, r3
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40021000 	.word	0x40021000
 8006960:	0800dc7c 	.word	0x0800dc7c
 8006964:	00f42400 	.word	0x00f42400
 8006968:	007a1200 	.word	0x007a1200

0800696c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006974:	2300      	movs	r3, #0
 8006976:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006978:	2300      	movs	r3, #0
 800697a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006984:	2b00      	cmp	r3, #0
 8006986:	d03d      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800698c:	2b40      	cmp	r3, #64	; 0x40
 800698e:	d00b      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8006990:	2b40      	cmp	r3, #64	; 0x40
 8006992:	d804      	bhi.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00e      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006998:	2b20      	cmp	r3, #32
 800699a:	d015      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800699c:	e01d      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800699e:	2b60      	cmp	r3, #96	; 0x60
 80069a0:	d01e      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80069a2:	2b80      	cmp	r3, #128	; 0x80
 80069a4:	d01c      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80069a6:	e018      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80069a8:	4b86      	ldr	r3, [pc, #536]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	4a85      	ldr	r2, [pc, #532]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80069ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069b4:	e015      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3304      	adds	r3, #4
 80069ba:	2100      	movs	r1, #0
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 fb0d 	bl	8006fdc <RCCEx_PLLSAI1_Config>
 80069c2:	4603      	mov	r3, r0
 80069c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069c6:	e00c      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3320      	adds	r3, #32
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fbf4 	bl	80071bc <RCCEx_PLLSAI2_Config>
 80069d4:	4603      	mov	r3, r0
 80069d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069d8:	e003      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	74fb      	strb	r3, [r7, #19]
      break;
 80069de:	e000      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80069e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069e2:	7cfb      	ldrb	r3, [r7, #19]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10b      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069e8:	4b76      	ldr	r3, [pc, #472]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80069ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069ee:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069f6:	4973      	ldr	r1, [pc, #460]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80069fe:	e001      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a00:	7cfb      	ldrb	r3, [r7, #19]
 8006a02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d042      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a18:	d00f      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xce>
 8006a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a1e:	d805      	bhi.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d011      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8006a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a28:	d017      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xee>
 8006a2a:	e01f      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8006a2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a30:	d01f      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a36:	d01c      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006a38:	e018      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a3a:	4b62      	ldr	r3, [pc, #392]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	4a61      	ldr	r2, [pc, #388]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a44:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a46:	e015      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fac4 	bl	8006fdc <RCCEx_PLLSAI1_Config>
 8006a54:	4603      	mov	r3, r0
 8006a56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a58:	e00c      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	3320      	adds	r3, #32
 8006a5e:	2100      	movs	r1, #0
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fbab 	bl	80071bc <RCCEx_PLLSAI2_Config>
 8006a66:	4603      	mov	r3, r0
 8006a68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a6a:	e003      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	74fb      	strb	r3, [r7, #19]
      break;
 8006a70:	e000      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8006a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a74:	7cfb      	ldrb	r3, [r7, #19]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10b      	bne.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a7a:	4b52      	ldr	r3, [pc, #328]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a88:	494e      	ldr	r1, [pc, #312]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006a90:	e001      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a92:	7cfb      	ldrb	r3, [r7, #19]
 8006a94:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 809f 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006aa8:	4b46      	ldr	r3, [pc, #280]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00d      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006abe:	4b41      	ldr	r3, [pc, #260]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac2:	4a40      	ldr	r2, [pc, #256]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8006aca:	4b3e      	ldr	r3, [pc, #248]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ad2:	60bb      	str	r3, [r7, #8]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ada:	4b3b      	ldr	r3, [pc, #236]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a3a      	ldr	r2, [pc, #232]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ae4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ae6:	f7fc fcd5 	bl	8003494 <HAL_GetTick>
 8006aea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006aec:	e009      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aee:	f7fc fcd1 	bl	8003494 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d902      	bls.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	74fb      	strb	r3, [r7, #19]
        break;
 8006b00:	e005      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b02:	4b31      	ldr	r3, [pc, #196]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0ef      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8006b0e:	7cfb      	ldrb	r3, [r7, #19]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d15b      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b14:	4b2b      	ldr	r3, [pc, #172]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b1e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d01f      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d019      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b32:	4b24      	ldr	r3, [pc, #144]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b3e:	4b21      	ldr	r3, [pc, #132]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b44:	4a1f      	ldr	r2, [pc, #124]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b4e:	4b1d      	ldr	r3, [pc, #116]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b54:	4a1b      	ldr	r2, [pc, #108]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b5e:	4a19      	ldr	r2, [pc, #100]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d016      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b70:	f7fc fc90 	bl	8003494 <HAL_GetTick>
 8006b74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b76:	e00b      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b78:	f7fc fc8c 	bl	8003494 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d902      	bls.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	74fb      	strb	r3, [r7, #19]
            break;
 8006b8e:	e006      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b90:	4b0c      	ldr	r3, [pc, #48]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0ec      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8006b9e:	7cfb      	ldrb	r3, [r7, #19]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10c      	bne.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ba4:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006baa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb4:	4903      	ldr	r1, [pc, #12]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006bbe:	7cfb      	ldrb	r3, [r7, #19]
 8006bc0:	74bb      	strb	r3, [r7, #18]
 8006bc2:	e005      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bcc:	7cfb      	ldrb	r3, [r7, #19]
 8006bce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bd0:	7c7b      	ldrb	r3, [r7, #17]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d105      	bne.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bd6:	4ba0      	ldr	r3, [pc, #640]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bda:	4a9f      	ldr	r2, [pc, #636]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006be0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bee:	4b9a      	ldr	r3, [pc, #616]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf4:	f023 0203 	bic.w	r2, r3, #3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfc:	4996      	ldr	r1, [pc, #600]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00a      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c10:	4b91      	ldr	r3, [pc, #580]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c16:	f023 020c 	bic.w	r2, r3, #12
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	498e      	ldr	r1, [pc, #568]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c32:	4b89      	ldr	r3, [pc, #548]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c40:	4985      	ldr	r1, [pc, #532]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0308 	and.w	r3, r3, #8
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00a      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c54:	4b80      	ldr	r3, [pc, #512]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c62:	497d      	ldr	r1, [pc, #500]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0310 	and.w	r3, r3, #16
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c76:	4b78      	ldr	r3, [pc, #480]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c84:	4974      	ldr	r1, [pc, #464]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0320 	and.w	r3, r3, #32
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00a      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c98:	4b6f      	ldr	r3, [pc, #444]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca6:	496c      	ldr	r1, [pc, #432]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cba:	4b67      	ldr	r3, [pc, #412]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cc8:	4963      	ldr	r1, [pc, #396]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00a      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cdc:	4b5e      	ldr	r3, [pc, #376]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cea:	495b      	ldr	r1, [pc, #364]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cfe:	4b56      	ldr	r3, [pc, #344]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0c:	4952      	ldr	r1, [pc, #328]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00a      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d20:	4b4d      	ldr	r3, [pc, #308]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2e:	494a      	ldr	r1, [pc, #296]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d42:	4b45      	ldr	r3, [pc, #276]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d50:	4941      	ldr	r1, [pc, #260]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00a      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d64:	4b3c      	ldr	r3, [pc, #240]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d6a:	f023 0203 	bic.w	r2, r3, #3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d72:	4939      	ldr	r1, [pc, #228]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d028      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d86:	4b34      	ldr	r3, [pc, #208]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d94:	4930      	ldr	r1, [pc, #192]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006da4:	d106      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006da6:	4b2c      	ldr	r3, [pc, #176]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	4a2b      	ldr	r2, [pc, #172]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006db0:	60d3      	str	r3, [r2, #12]
 8006db2:	e011      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006dbc:	d10c      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 f909 	bl	8006fdc <RCCEx_PLLSAI1_Config>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006dce:	7cfb      	ldrb	r3, [r7, #19]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8006dd4:	7cfb      	ldrb	r3, [r7, #19]
 8006dd6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d04d      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dec:	d108      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006dee:	4b1a      	ldr	r3, [pc, #104]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006df0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006df4:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006df6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dfa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006dfe:	e012      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006e00:	4b15      	ldr	r3, [pc, #84]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e06:	4a14      	ldr	r2, [pc, #80]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006e10:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e1e:	490e      	ldr	r1, [pc, #56]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e2e:	d106      	bne.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e30:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	4a08      	ldr	r2, [pc, #32]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e3a:	60d3      	str	r3, [r2, #12]
 8006e3c:	e020      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e46:	d109      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006e48:	4b03      	ldr	r3, [pc, #12]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	4a02      	ldr	r2, [pc, #8]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e52:	60d3      	str	r3, [r2, #12]
 8006e54:	e014      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006e56:	bf00      	nop
 8006e58:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e64:	d10c      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 f8b5 	bl	8006fdc <RCCEx_PLLSAI1_Config>
 8006e72:	4603      	mov	r3, r0
 8006e74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e76:	7cfb      	ldrb	r3, [r7, #19]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006e7c:	7cfb      	ldrb	r3, [r7, #19]
 8006e7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d028      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e8c:	4b4a      	ldr	r3, [pc, #296]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e9a:	4947      	ldr	r1, [pc, #284]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ea6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006eaa:	d106      	bne.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006eac:	4b42      	ldr	r3, [pc, #264]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	4a41      	ldr	r2, [pc, #260]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006eb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006eb6:	60d3      	str	r3, [r2, #12]
 8006eb8:	e011      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ebe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ec2:	d10c      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	2101      	movs	r1, #1
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f886 	bl	8006fdc <RCCEx_PLLSAI1_Config>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ed4:	7cfb      	ldrb	r3, [r7, #19]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8006eda:	7cfb      	ldrb	r3, [r7, #19]
 8006edc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d01e      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006eea:	4b33      	ldr	r3, [pc, #204]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006efa:	492f      	ldr	r1, [pc, #188]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f0c:	d10c      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	3304      	adds	r3, #4
 8006f12:	2102      	movs	r1, #2
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 f861 	bl	8006fdc <RCCEx_PLLSAI1_Config>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f1e:	7cfb      	ldrb	r3, [r7, #19]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8006f24:	7cfb      	ldrb	r3, [r7, #19]
 8006f26:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f34:	4b20      	ldr	r3, [pc, #128]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f3a:	f023 0204 	bic.w	r2, r3, #4
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f44:	491c      	ldr	r1, [pc, #112]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00b      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006f58:	4b17      	ldr	r3, [pc, #92]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f5e:	f023 0218 	bic.w	r2, r3, #24
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f68:	4913      	ldr	r1, [pc, #76]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d017      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006f7c:	4b0e      	ldr	r3, [pc, #56]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f8c:	490a      	ldr	r1, [pc, #40]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f9e:	d105      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fa0:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	4a04      	ldr	r2, [pc, #16]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006faa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006fac:	7cbb      	ldrb	r3, [r7, #18]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40021000 	.word	0x40021000

08006fbc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a04      	ldr	r2, [pc, #16]	; (8006fd8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006fc6:	f043 0304 	orr.w	r3, r3, #4
 8006fca:	6013      	str	r3, [r2, #0]
}
 8006fcc:	bf00      	nop
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	40021000 	.word	0x40021000

08006fdc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006fea:	4b70      	ldr	r3, [pc, #448]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00e      	beq.n	8007014 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006ff6:	4b6d      	ldr	r3, [pc, #436]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	f003 0203 	and.w	r2, r3, #3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	429a      	cmp	r2, r3
 8007004:	d103      	bne.n	800700e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
       ||
 800700a:	2b00      	cmp	r3, #0
 800700c:	d13f      	bne.n	800708e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	73fb      	strb	r3, [r7, #15]
 8007012:	e03c      	b.n	800708e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d00c      	beq.n	8007036 <RCCEx_PLLSAI1_Config+0x5a>
 800701c:	2b03      	cmp	r3, #3
 800701e:	d013      	beq.n	8007048 <RCCEx_PLLSAI1_Config+0x6c>
 8007020:	2b01      	cmp	r3, #1
 8007022:	d120      	bne.n	8007066 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007024:	4b61      	ldr	r3, [pc, #388]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d11d      	bne.n	800706c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007034:	e01a      	b.n	800706c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007036:	4b5d      	ldr	r3, [pc, #372]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800703e:	2b00      	cmp	r3, #0
 8007040:	d116      	bne.n	8007070 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007046:	e013      	b.n	8007070 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007048:	4b58      	ldr	r3, [pc, #352]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10f      	bne.n	8007074 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007054:	4b55      	ldr	r3, [pc, #340]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d109      	bne.n	8007074 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007064:	e006      	b.n	8007074 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	73fb      	strb	r3, [r7, #15]
      break;
 800706a:	e004      	b.n	8007076 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800706c:	bf00      	nop
 800706e:	e002      	b.n	8007076 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8007070:	bf00      	nop
 8007072:	e000      	b.n	8007076 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8007074:	bf00      	nop
    }

    if(status == HAL_OK)
 8007076:	7bfb      	ldrb	r3, [r7, #15]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d108      	bne.n	800708e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800707c:	4b4b      	ldr	r3, [pc, #300]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f023 0203 	bic.w	r2, r3, #3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4948      	ldr	r1, [pc, #288]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 800708a:	4313      	orrs	r3, r2
 800708c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800708e:	7bfb      	ldrb	r3, [r7, #15]
 8007090:	2b00      	cmp	r3, #0
 8007092:	f040 8086 	bne.w	80071a2 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007096:	4b45      	ldr	r3, [pc, #276]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a44      	ldr	r2, [pc, #272]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 800709c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070a2:	f7fc f9f7 	bl	8003494 <HAL_GetTick>
 80070a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80070a8:	e009      	b.n	80070be <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070aa:	f7fc f9f3 	bl	8003494 <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d902      	bls.n	80070be <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	73fb      	strb	r3, [r7, #15]
        break;
 80070bc:	e005      	b.n	80070ca <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80070be:	4b3b      	ldr	r3, [pc, #236]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1ef      	bne.n	80070aa <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d168      	bne.n	80071a2 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d113      	bne.n	80070fe <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80070d6:	4b35      	ldr	r3, [pc, #212]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 80070d8:	691a      	ldr	r2, [r3, #16]
 80070da:	4b35      	ldr	r3, [pc, #212]	; (80071b0 <RCCEx_PLLSAI1_Config+0x1d4>)
 80070dc:	4013      	ands	r3, r2
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	6892      	ldr	r2, [r2, #8]
 80070e2:	0211      	lsls	r1, r2, #8
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	68d2      	ldr	r2, [r2, #12]
 80070e8:	06d2      	lsls	r2, r2, #27
 80070ea:	4311      	orrs	r1, r2
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	6852      	ldr	r2, [r2, #4]
 80070f0:	3a01      	subs	r2, #1
 80070f2:	0112      	lsls	r2, r2, #4
 80070f4:	430a      	orrs	r2, r1
 80070f6:	492d      	ldr	r1, [pc, #180]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	610b      	str	r3, [r1, #16]
 80070fc:	e02d      	b.n	800715a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d115      	bne.n	8007130 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007104:	4b29      	ldr	r3, [pc, #164]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	4b2a      	ldr	r3, [pc, #168]	; (80071b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800710a:	4013      	ands	r3, r2
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6892      	ldr	r2, [r2, #8]
 8007110:	0211      	lsls	r1, r2, #8
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6912      	ldr	r2, [r2, #16]
 8007116:	0852      	lsrs	r2, r2, #1
 8007118:	3a01      	subs	r2, #1
 800711a:	0552      	lsls	r2, r2, #21
 800711c:	4311      	orrs	r1, r2
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	6852      	ldr	r2, [r2, #4]
 8007122:	3a01      	subs	r2, #1
 8007124:	0112      	lsls	r2, r2, #4
 8007126:	430a      	orrs	r2, r1
 8007128:	4920      	ldr	r1, [pc, #128]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 800712a:	4313      	orrs	r3, r2
 800712c:	610b      	str	r3, [r1, #16]
 800712e:	e014      	b.n	800715a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007130:	4b1e      	ldr	r3, [pc, #120]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8007132:	691a      	ldr	r2, [r3, #16]
 8007134:	4b20      	ldr	r3, [pc, #128]	; (80071b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007136:	4013      	ands	r3, r2
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6892      	ldr	r2, [r2, #8]
 800713c:	0211      	lsls	r1, r2, #8
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6952      	ldr	r2, [r2, #20]
 8007142:	0852      	lsrs	r2, r2, #1
 8007144:	3a01      	subs	r2, #1
 8007146:	0652      	lsls	r2, r2, #25
 8007148:	4311      	orrs	r1, r2
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6852      	ldr	r2, [r2, #4]
 800714e:	3a01      	subs	r2, #1
 8007150:	0112      	lsls	r2, r2, #4
 8007152:	430a      	orrs	r2, r1
 8007154:	4915      	ldr	r1, [pc, #84]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8007156:	4313      	orrs	r3, r2
 8007158:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800715a:	4b14      	ldr	r3, [pc, #80]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a13      	ldr	r2, [pc, #76]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8007160:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007164:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007166:	f7fc f995 	bl	8003494 <HAL_GetTick>
 800716a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800716c:	e009      	b.n	8007182 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800716e:	f7fc f991 	bl	8003494 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b02      	cmp	r3, #2
 800717a:	d902      	bls.n	8007182 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	73fb      	strb	r3, [r7, #15]
          break;
 8007180:	e005      	b.n	800718e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007182:	4b0a      	ldr	r3, [pc, #40]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0ef      	beq.n	800716e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d106      	bne.n	80071a2 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007194:	4b05      	ldr	r3, [pc, #20]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8007196:	691a      	ldr	r2, [r3, #16]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	4903      	ldr	r1, [pc, #12]	; (80071ac <RCCEx_PLLSAI1_Config+0x1d0>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	40021000 	.word	0x40021000
 80071b0:	07ff800f 	.word	0x07ff800f
 80071b4:	ff9f800f 	.word	0xff9f800f
 80071b8:	f9ff800f 	.word	0xf9ff800f

080071bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80071ca:	4b70      	ldr	r3, [pc, #448]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00e      	beq.n	80071f4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80071d6:	4b6d      	ldr	r3, [pc, #436]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f003 0203 	and.w	r2, r3, #3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d103      	bne.n	80071ee <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
       ||
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d13f      	bne.n	800726e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	73fb      	strb	r3, [r7, #15]
 80071f2:	e03c      	b.n	800726e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d00c      	beq.n	8007216 <RCCEx_PLLSAI2_Config+0x5a>
 80071fc:	2b03      	cmp	r3, #3
 80071fe:	d013      	beq.n	8007228 <RCCEx_PLLSAI2_Config+0x6c>
 8007200:	2b01      	cmp	r3, #1
 8007202:	d120      	bne.n	8007246 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007204:	4b61      	ldr	r3, [pc, #388]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d11d      	bne.n	800724c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007214:	e01a      	b.n	800724c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007216:	4b5d      	ldr	r3, [pc, #372]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800721e:	2b00      	cmp	r3, #0
 8007220:	d116      	bne.n	8007250 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007226:	e013      	b.n	8007250 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007228:	4b58      	ldr	r3, [pc, #352]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10f      	bne.n	8007254 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007234:	4b55      	ldr	r3, [pc, #340]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d109      	bne.n	8007254 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007244:	e006      	b.n	8007254 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	73fb      	strb	r3, [r7, #15]
      break;
 800724a:	e004      	b.n	8007256 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800724c:	bf00      	nop
 800724e:	e002      	b.n	8007256 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8007250:	bf00      	nop
 8007252:	e000      	b.n	8007256 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8007254:	bf00      	nop
    }

    if(status == HAL_OK)
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d108      	bne.n	800726e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800725c:	4b4b      	ldr	r3, [pc, #300]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f023 0203 	bic.w	r2, r3, #3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4948      	ldr	r1, [pc, #288]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 800726a:	4313      	orrs	r3, r2
 800726c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800726e:	7bfb      	ldrb	r3, [r7, #15]
 8007270:	2b00      	cmp	r3, #0
 8007272:	f040 8086 	bne.w	8007382 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007276:	4b45      	ldr	r3, [pc, #276]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a44      	ldr	r2, [pc, #272]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 800727c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007282:	f7fc f907 	bl	8003494 <HAL_GetTick>
 8007286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007288:	e009      	b.n	800729e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800728a:	f7fc f903 	bl	8003494 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d902      	bls.n	800729e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	73fb      	strb	r3, [r7, #15]
        break;
 800729c:	e005      	b.n	80072aa <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800729e:	4b3b      	ldr	r3, [pc, #236]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1ef      	bne.n	800728a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d168      	bne.n	8007382 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d113      	bne.n	80072de <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80072b6:	4b35      	ldr	r3, [pc, #212]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 80072b8:	695a      	ldr	r2, [r3, #20]
 80072ba:	4b35      	ldr	r3, [pc, #212]	; (8007390 <RCCEx_PLLSAI2_Config+0x1d4>)
 80072bc:	4013      	ands	r3, r2
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	6892      	ldr	r2, [r2, #8]
 80072c2:	0211      	lsls	r1, r2, #8
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	68d2      	ldr	r2, [r2, #12]
 80072c8:	06d2      	lsls	r2, r2, #27
 80072ca:	4311      	orrs	r1, r2
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	6852      	ldr	r2, [r2, #4]
 80072d0:	3a01      	subs	r2, #1
 80072d2:	0112      	lsls	r2, r2, #4
 80072d4:	430a      	orrs	r2, r1
 80072d6:	492d      	ldr	r1, [pc, #180]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	614b      	str	r3, [r1, #20]
 80072dc:	e02d      	b.n	800733a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d115      	bne.n	8007310 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80072e4:	4b29      	ldr	r3, [pc, #164]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 80072e6:	695a      	ldr	r2, [r3, #20]
 80072e8:	4b2a      	ldr	r3, [pc, #168]	; (8007394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80072ea:	4013      	ands	r3, r2
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	6892      	ldr	r2, [r2, #8]
 80072f0:	0211      	lsls	r1, r2, #8
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	6912      	ldr	r2, [r2, #16]
 80072f6:	0852      	lsrs	r2, r2, #1
 80072f8:	3a01      	subs	r2, #1
 80072fa:	0552      	lsls	r2, r2, #21
 80072fc:	4311      	orrs	r1, r2
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	6852      	ldr	r2, [r2, #4]
 8007302:	3a01      	subs	r2, #1
 8007304:	0112      	lsls	r2, r2, #4
 8007306:	430a      	orrs	r2, r1
 8007308:	4920      	ldr	r1, [pc, #128]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 800730a:	4313      	orrs	r3, r2
 800730c:	614b      	str	r3, [r1, #20]
 800730e:	e014      	b.n	800733a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007310:	4b1e      	ldr	r3, [pc, #120]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007312:	695a      	ldr	r2, [r3, #20]
 8007314:	4b20      	ldr	r3, [pc, #128]	; (8007398 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007316:	4013      	ands	r3, r2
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6892      	ldr	r2, [r2, #8]
 800731c:	0211      	lsls	r1, r2, #8
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	6952      	ldr	r2, [r2, #20]
 8007322:	0852      	lsrs	r2, r2, #1
 8007324:	3a01      	subs	r2, #1
 8007326:	0652      	lsls	r2, r2, #25
 8007328:	4311      	orrs	r1, r2
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	6852      	ldr	r2, [r2, #4]
 800732e:	3a01      	subs	r2, #1
 8007330:	0112      	lsls	r2, r2, #4
 8007332:	430a      	orrs	r2, r1
 8007334:	4915      	ldr	r1, [pc, #84]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007336:	4313      	orrs	r3, r2
 8007338:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800733a:	4b14      	ldr	r3, [pc, #80]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a13      	ldr	r2, [pc, #76]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007344:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007346:	f7fc f8a5 	bl	8003494 <HAL_GetTick>
 800734a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800734c:	e009      	b.n	8007362 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800734e:	f7fc f8a1 	bl	8003494 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	2b02      	cmp	r3, #2
 800735a:	d902      	bls.n	8007362 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	73fb      	strb	r3, [r7, #15]
          break;
 8007360:	e005      	b.n	800736e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007362:	4b0a      	ldr	r3, [pc, #40]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0ef      	beq.n	800734e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d106      	bne.n	8007382 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007374:	4b05      	ldr	r3, [pc, #20]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007376:	695a      	ldr	r2, [r3, #20]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	4903      	ldr	r1, [pc, #12]	; (800738c <RCCEx_PLLSAI2_Config+0x1d0>)
 800737e:	4313      	orrs	r3, r2
 8007380:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007382:	7bfb      	ldrb	r3, [r7, #15]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	40021000 	.word	0x40021000
 8007390:	07ff800f 	.word	0x07ff800f
 8007394:	ff9f800f 	.word	0xff9f800f
 8007398:	f9ff800f 	.word	0xf9ff800f

0800739c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e095      	b.n	80074da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d108      	bne.n	80073c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073be:	d009      	beq.n	80073d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	61da      	str	r2, [r3, #28]
 80073c6:	e005      	b.n	80073d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d106      	bne.n	80073f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7fa fd08 	bl	8001e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2202      	movs	r2, #2
 80073f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800740a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007414:	d902      	bls.n	800741c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	e002      	b.n	8007422 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800741c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007420:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800742a:	d007      	beq.n	800743c <HAL_SPI_Init+0xa0>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007434:	d002      	beq.n	800743c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800744c:	431a      	orrs	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	431a      	orrs	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	431a      	orrs	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800746a:	431a      	orrs	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007474:	431a      	orrs	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800747e:	ea42 0103 	orr.w	r1, r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007486:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	0c1b      	lsrs	r3, r3, #16
 8007498:	f003 0204 	and.w	r2, r3, #4
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	f003 0310 	and.w	r3, r3, #16
 80074a4:	431a      	orrs	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074aa:	f003 0308 	and.w	r3, r3, #8
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80074b8:	ea42 0103 	orr.w	r1, r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e01a      	b.n	800752a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800750a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fa fcf7 	bl	8001f00 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b088      	sub	sp, #32
 8007536:	af00      	add	r7, sp, #0
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	603b      	str	r3, [r7, #0]
 800753e:	4613      	mov	r3, r2
 8007540:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800754c:	2b01      	cmp	r3, #1
 800754e:	d101      	bne.n	8007554 <HAL_SPI_Transmit+0x22>
 8007550:	2302      	movs	r3, #2
 8007552:	e158      	b.n	8007806 <HAL_SPI_Transmit+0x2d4>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800755c:	f7fb ff9a 	bl	8003494 <HAL_GetTick>
 8007560:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007562:	88fb      	ldrh	r3, [r7, #6]
 8007564:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b01      	cmp	r3, #1
 8007570:	d002      	beq.n	8007578 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007572:	2302      	movs	r3, #2
 8007574:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007576:	e13d      	b.n	80077f4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <HAL_SPI_Transmit+0x52>
 800757e:	88fb      	ldrh	r3, [r7, #6]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d102      	bne.n	800758a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007588:	e134      	b.n	80077f4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2203      	movs	r2, #3
 800758e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	88fa      	ldrh	r2, [r7, #6]
 80075a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	88fa      	ldrh	r2, [r7, #6]
 80075a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d4:	d10f      	bne.n	80075f6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007600:	2b40      	cmp	r3, #64	; 0x40
 8007602:	d007      	beq.n	8007614 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007612:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800761c:	d94b      	bls.n	80076b6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <HAL_SPI_Transmit+0xfa>
 8007626:	8afb      	ldrh	r3, [r7, #22]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d13e      	bne.n	80076aa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007630:	881a      	ldrh	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763c:	1c9a      	adds	r2, r3, #2
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007646:	b29b      	uxth	r3, r3
 8007648:	3b01      	subs	r3, #1
 800764a:	b29a      	uxth	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007650:	e02b      	b.n	80076aa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b02      	cmp	r3, #2
 800765e:	d112      	bne.n	8007686 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007664:	881a      	ldrh	r2, [r3, #0]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007670:	1c9a      	adds	r2, r3, #2
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800767a:	b29b      	uxth	r3, r3
 800767c:	3b01      	subs	r3, #1
 800767e:	b29a      	uxth	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007684:	e011      	b.n	80076aa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007686:	f7fb ff05 	bl	8003494 <HAL_GetTick>
 800768a:	4602      	mov	r2, r0
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	429a      	cmp	r2, r3
 8007694:	d803      	bhi.n	800769e <HAL_SPI_Transmit+0x16c>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769c:	d102      	bne.n	80076a4 <HAL_SPI_Transmit+0x172>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d102      	bne.n	80076aa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076a8:	e0a4      	b.n	80077f4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1ce      	bne.n	8007652 <HAL_SPI_Transmit+0x120>
 80076b4:	e07c      	b.n	80077b0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <HAL_SPI_Transmit+0x192>
 80076be:	8afb      	ldrh	r3, [r7, #22]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d170      	bne.n	80077a6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d912      	bls.n	80076f4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d2:	881a      	ldrh	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076de:	1c9a      	adds	r2, r3, #2
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	3b02      	subs	r3, #2
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076f2:	e058      	b.n	80077a6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	330c      	adds	r3, #12
 80076fe:	7812      	ldrb	r2, [r2, #0]
 8007700:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007710:	b29b      	uxth	r3, r3
 8007712:	3b01      	subs	r3, #1
 8007714:	b29a      	uxth	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800771a:	e044      	b.n	80077a6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b02      	cmp	r3, #2
 8007728:	d12b      	bne.n	8007782 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800772e:	b29b      	uxth	r3, r3
 8007730:	2b01      	cmp	r3, #1
 8007732:	d912      	bls.n	800775a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007738:	881a      	ldrh	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007744:	1c9a      	adds	r2, r3, #2
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800774e:	b29b      	uxth	r3, r3
 8007750:	3b02      	subs	r3, #2
 8007752:	b29a      	uxth	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007758:	e025      	b.n	80077a6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	330c      	adds	r3, #12
 8007764:	7812      	ldrb	r2, [r2, #0]
 8007766:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007776:	b29b      	uxth	r3, r3
 8007778:	3b01      	subs	r3, #1
 800777a:	b29a      	uxth	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007780:	e011      	b.n	80077a6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007782:	f7fb fe87 	bl	8003494 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	429a      	cmp	r2, r3
 8007790:	d803      	bhi.n	800779a <HAL_SPI_Transmit+0x268>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007798:	d102      	bne.n	80077a0 <HAL_SPI_Transmit+0x26e>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d102      	bne.n	80077a6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077a4:	e026      	b.n	80077f4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1b5      	bne.n	800771c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 fdfb 	bl	80083b0 <SPI_EndRxTxTransaction>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d002      	beq.n	80077c6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2220      	movs	r2, #32
 80077c4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077ce:	2300      	movs	r3, #0
 80077d0:	613b      	str	r3, [r7, #16]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	613b      	str	r3, [r7, #16]
 80077e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	77fb      	strb	r3, [r7, #31]
 80077f0:	e000      	b.n	80077f4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80077f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007804:	7ffb      	ldrb	r3, [r7, #31]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3720      	adds	r7, #32
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b088      	sub	sp, #32
 8007812:	af02      	add	r7, sp, #8
 8007814:	60f8      	str	r0, [r7, #12]
 8007816:	60b9      	str	r1, [r7, #8]
 8007818:	603b      	str	r3, [r7, #0]
 800781a:	4613      	mov	r3, r2
 800781c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800782a:	d112      	bne.n	8007852 <HAL_SPI_Receive+0x44>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10e      	bne.n	8007852 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2204      	movs	r2, #4
 8007838:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800783c:	88fa      	ldrh	r2, [r7, #6]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	4613      	mov	r3, r2
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	68b9      	ldr	r1, [r7, #8]
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f000 f910 	bl	8007a6e <HAL_SPI_TransmitReceive>
 800784e:	4603      	mov	r3, r0
 8007850:	e109      	b.n	8007a66 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_SPI_Receive+0x52>
 800785c:	2302      	movs	r3, #2
 800785e:	e102      	b.n	8007a66 <HAL_SPI_Receive+0x258>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007868:	f7fb fe14 	bl	8003494 <HAL_GetTick>
 800786c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b01      	cmp	r3, #1
 8007878:	d002      	beq.n	8007880 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800787a:	2302      	movs	r3, #2
 800787c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800787e:	e0e9      	b.n	8007a54 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <HAL_SPI_Receive+0x7e>
 8007886:	88fb      	ldrh	r3, [r7, #6]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d102      	bne.n	8007892 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007890:	e0e0      	b.n	8007a54 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2204      	movs	r2, #4
 8007896:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	88fa      	ldrh	r2, [r7, #6]
 80078aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	88fa      	ldrh	r2, [r7, #6]
 80078b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078dc:	d908      	bls.n	80078f0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078ec:	605a      	str	r2, [r3, #4]
 80078ee:	e007      	b.n	8007900 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078fe:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007908:	d10f      	bne.n	800792a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007918:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007928:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007934:	2b40      	cmp	r3, #64	; 0x40
 8007936:	d007      	beq.n	8007948 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007946:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007950:	d867      	bhi.n	8007a22 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007952:	e030      	b.n	80079b6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b01      	cmp	r3, #1
 8007960:	d117      	bne.n	8007992 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f103 020c 	add.w	r2, r3, #12
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	7812      	ldrb	r2, [r2, #0]
 8007970:	b2d2      	uxtb	r2, r2
 8007972:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007984:	b29b      	uxth	r3, r3
 8007986:	3b01      	subs	r3, #1
 8007988:	b29a      	uxth	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007990:	e011      	b.n	80079b6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007992:	f7fb fd7f 	bl	8003494 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d803      	bhi.n	80079aa <HAL_SPI_Receive+0x19c>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a8:	d102      	bne.n	80079b0 <HAL_SPI_Receive+0x1a2>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d102      	bne.n	80079b6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80079b4:	e04e      	b.n	8007a54 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079bc:	b29b      	uxth	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1c8      	bne.n	8007954 <HAL_SPI_Receive+0x146>
 80079c2:	e034      	b.n	8007a2e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d115      	bne.n	80079fe <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079dc:	b292      	uxth	r2, r2
 80079de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e4:	1c9a      	adds	r2, r3, #2
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	3b01      	subs	r3, #1
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80079fc:	e011      	b.n	8007a22 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079fe:	f7fb fd49 	bl	8003494 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d803      	bhi.n	8007a16 <HAL_SPI_Receive+0x208>
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a14:	d102      	bne.n	8007a1c <HAL_SPI_Receive+0x20e>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d102      	bne.n	8007a22 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007a20:	e018      	b.n	8007a54 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1ca      	bne.n	80079c4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f000 fc64 	bl	8008300 <SPI_EndRxTransaction>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2220      	movs	r2, #32
 8007a42:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	75fb      	strb	r3, [r7, #23]
 8007a50:	e000      	b.n	8007a54 <HAL_SPI_Receive+0x246>
  }

error :
 8007a52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b08a      	sub	sp, #40	; 0x28
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	607a      	str	r2, [r7, #4]
 8007a7a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d101      	bne.n	8007a94 <HAL_SPI_TransmitReceive+0x26>
 8007a90:	2302      	movs	r3, #2
 8007a92:	e1fb      	b.n	8007e8c <HAL_SPI_TransmitReceive+0x41e>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a9c:	f7fb fcfa 	bl	8003494 <HAL_GetTick>
 8007aa0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007aa8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007ab0:	887b      	ldrh	r3, [r7, #2]
 8007ab2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007ab4:	887b      	ldrh	r3, [r7, #2]
 8007ab6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ab8:	7efb      	ldrb	r3, [r7, #27]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d00e      	beq.n	8007adc <HAL_SPI_TransmitReceive+0x6e>
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ac4:	d106      	bne.n	8007ad4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d102      	bne.n	8007ad4 <HAL_SPI_TransmitReceive+0x66>
 8007ace:	7efb      	ldrb	r3, [r7, #27]
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d003      	beq.n	8007adc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007ada:	e1cd      	b.n	8007e78 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d005      	beq.n	8007aee <HAL_SPI_TransmitReceive+0x80>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <HAL_SPI_TransmitReceive+0x80>
 8007ae8:	887b      	ldrh	r3, [r7, #2]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d103      	bne.n	8007af6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007af4:	e1c0      	b.n	8007e78 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b04      	cmp	r3, #4
 8007b00:	d003      	beq.n	8007b0a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2205      	movs	r2, #5
 8007b06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	887a      	ldrh	r2, [r7, #2]
 8007b1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	887a      	ldrh	r2, [r7, #2]
 8007b22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	887a      	ldrh	r2, [r7, #2]
 8007b30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	887a      	ldrh	r2, [r7, #2]
 8007b36:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b4c:	d802      	bhi.n	8007b54 <HAL_SPI_TransmitReceive+0xe6>
 8007b4e:	8a3b      	ldrh	r3, [r7, #16]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d908      	bls.n	8007b66 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685a      	ldr	r2, [r3, #4]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b62:	605a      	str	r2, [r3, #4]
 8007b64:	e007      	b.n	8007b76 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b74:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b80:	2b40      	cmp	r3, #64	; 0x40
 8007b82:	d007      	beq.n	8007b94 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b9c:	d97c      	bls.n	8007c98 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <HAL_SPI_TransmitReceive+0x13e>
 8007ba6:	8a7b      	ldrh	r3, [r7, #18]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d169      	bne.n	8007c80 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb0:	881a      	ldrh	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbc:	1c9a      	adds	r2, r3, #2
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bd0:	e056      	b.n	8007c80 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f003 0302 	and.w	r3, r3, #2
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d11b      	bne.n	8007c18 <HAL_SPI_TransmitReceive+0x1aa>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d016      	beq.n	8007c18 <HAL_SPI_TransmitReceive+0x1aa>
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d113      	bne.n	8007c18 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf4:	881a      	ldrh	r2, [r3, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c00:	1c9a      	adds	r2, r3, #2
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d11c      	bne.n	8007c60 <HAL_SPI_TransmitReceive+0x1f2>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d016      	beq.n	8007c60 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3c:	b292      	uxth	r2, r2
 8007c3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c44:	1c9a      	adds	r2, r3, #2
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	3b01      	subs	r3, #1
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c60:	f7fb fc18 	bl	8003494 <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d807      	bhi.n	8007c80 <HAL_SPI_TransmitReceive+0x212>
 8007c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c76:	d003      	beq.n	8007c80 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007c7e:	e0fb      	b.n	8007e78 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1a3      	bne.n	8007bd2 <HAL_SPI_TransmitReceive+0x164>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d19d      	bne.n	8007bd2 <HAL_SPI_TransmitReceive+0x164>
 8007c96:	e0df      	b.n	8007e58 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <HAL_SPI_TransmitReceive+0x23a>
 8007ca0:	8a7b      	ldrh	r3, [r7, #18]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	f040 80cb 	bne.w	8007e3e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d912      	bls.n	8007cd8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb6:	881a      	ldrh	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc2:	1c9a      	adds	r2, r3, #2
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	3b02      	subs	r3, #2
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007cd6:	e0b2      	b.n	8007e3e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	330c      	adds	r3, #12
 8007ce2:	7812      	ldrb	r2, [r2, #0]
 8007ce4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cfe:	e09e      	b.n	8007e3e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d134      	bne.n	8007d78 <HAL_SPI_TransmitReceive+0x30a>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d02f      	beq.n	8007d78 <HAL_SPI_TransmitReceive+0x30a>
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d12c      	bne.n	8007d78 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d912      	bls.n	8007d4e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2c:	881a      	ldrh	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	1c9a      	adds	r2, r3, #2
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	3b02      	subs	r3, #2
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d4c:	e012      	b.n	8007d74 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	330c      	adds	r3, #12
 8007d58:	7812      	ldrb	r2, [r2, #0]
 8007d5a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d148      	bne.n	8007e18 <HAL_SPI_TransmitReceive+0x3aa>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d042      	beq.n	8007e18 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d923      	bls.n	8007de6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68da      	ldr	r2, [r3, #12]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da8:	b292      	uxth	r2, r2
 8007daa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	1c9a      	adds	r2, r3, #2
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	3b02      	subs	r3, #2
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d81f      	bhi.n	8007e14 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007de2:	605a      	str	r2, [r3, #4]
 8007de4:	e016      	b.n	8007e14 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f103 020c 	add.w	r2, r3, #12
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df2:	7812      	ldrb	r2, [r2, #0]
 8007df4:	b2d2      	uxtb	r2, r2
 8007df6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e14:	2301      	movs	r3, #1
 8007e16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e18:	f7fb fb3c 	bl	8003494 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d803      	bhi.n	8007e30 <HAL_SPI_TransmitReceive+0x3c2>
 8007e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2e:	d102      	bne.n	8007e36 <HAL_SPI_TransmitReceive+0x3c8>
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d103      	bne.n	8007e3e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007e3c:	e01c      	b.n	8007e78 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f47f af5b 	bne.w	8007d00 <HAL_SPI_TransmitReceive+0x292>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f47f af54 	bne.w	8007d00 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e58:	69fa      	ldr	r2, [r7, #28]
 8007e5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 faa7 	bl	80083b0 <SPI_EndRxTxTransaction>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d006      	beq.n	8007e76 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2220      	movs	r2, #32
 8007e72:	661a      	str	r2, [r3, #96]	; 0x60
 8007e74:	e000      	b.n	8007e78 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007e76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007e88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3728      	adds	r7, #40	; 0x28
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	099b      	lsrs	r3, r3, #6
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10f      	bne.n	8007ed8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00a      	beq.n	8007ed8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	099b      	lsrs	r3, r3, #6
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d004      	beq.n	8007ed8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	4798      	blx	r3
    return;
 8007ed6:	e0d8      	b.n	800808a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	085b      	lsrs	r3, r3, #1
 8007edc:	f003 0301 	and.w	r3, r3, #1
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00a      	beq.n	8007efa <HAL_SPI_IRQHandler+0x66>
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	09db      	lsrs	r3, r3, #7
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d004      	beq.n	8007efa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	4798      	blx	r3
    return;
 8007ef8:	e0c7      	b.n	800808a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	095b      	lsrs	r3, r3, #5
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10c      	bne.n	8007f20 <HAL_SPI_IRQHandler+0x8c>
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	099b      	lsrs	r3, r3, #6
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d106      	bne.n	8007f20 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	0a1b      	lsrs	r3, r3, #8
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f000 80b5 	beq.w	800808a <HAL_SPI_IRQHandler+0x1f6>
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	095b      	lsrs	r3, r3, #5
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 80ae 	beq.w	800808a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	099b      	lsrs	r3, r3, #6
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d023      	beq.n	8007f82 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d011      	beq.n	8007f6a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f4a:	f043 0204 	orr.w	r2, r3, #4
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f52:	2300      	movs	r3, #0
 8007f54:	617b      	str	r3, [r7, #20]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	617b      	str	r3, [r7, #20]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	617b      	str	r3, [r7, #20]
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	e00b      	b.n	8007f82 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	613b      	str	r3, [r7, #16]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	613b      	str	r3, [r7, #16]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	613b      	str	r3, [r7, #16]
 8007f7e:	693b      	ldr	r3, [r7, #16]
        return;
 8007f80:	e083      	b.n	800808a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	095b      	lsrs	r3, r3, #5
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d014      	beq.n	8007fb8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f92:	f043 0201 	orr.w	r2, r3, #1
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60fb      	str	r3, [r7, #12]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	60fb      	str	r3, [r7, #12]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fb4:	601a      	str	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	0a1b      	lsrs	r3, r3, #8
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00c      	beq.n	8007fde <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc8:	f043 0208 	orr.w	r2, r3, #8
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	60bb      	str	r3, [r7, #8]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	60bb      	str	r3, [r7, #8]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d050      	beq.n	8008088 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ff4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	f003 0302 	and.w	r3, r3, #2
 8008004:	2b00      	cmp	r3, #0
 8008006:	d104      	bne.n	8008012 <HAL_SPI_IRQHandler+0x17e>
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b00      	cmp	r3, #0
 8008010:	d034      	beq.n	800807c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0203 	bic.w	r2, r2, #3
 8008020:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008026:	2b00      	cmp	r3, #0
 8008028:	d011      	beq.n	800804e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800802e:	4a18      	ldr	r2, [pc, #96]	; (8008090 <HAL_SPI_IRQHandler+0x1fc>)
 8008030:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008036:	4618      	mov	r0, r3
 8008038:	f7fc fb8c 	bl	8004754 <HAL_DMA_Abort_IT>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d005      	beq.n	800804e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008046:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008052:	2b00      	cmp	r3, #0
 8008054:	d016      	beq.n	8008084 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805a:	4a0d      	ldr	r2, [pc, #52]	; (8008090 <HAL_SPI_IRQHandler+0x1fc>)
 800805c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008062:	4618      	mov	r0, r3
 8008064:	f7fc fb76 	bl	8004754 <HAL_DMA_Abort_IT>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00a      	beq.n	8008084 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008072:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800807a:	e003      	b.n	8008084 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f809 	bl	8008094 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008082:	e000      	b.n	8008086 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008084:	bf00      	nop
    return;
 8008086:	bf00      	nop
 8008088:	bf00      	nop
  }
}
 800808a:	3720      	adds	r7, #32
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	080080a9 	.word	0x080080a9

08008094 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f7ff ffe5 	bl	8008094 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080ca:	bf00      	nop
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
	...

080080d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b088      	sub	sp, #32
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	603b      	str	r3, [r7, #0]
 80080e0:	4613      	mov	r3, r2
 80080e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080e4:	f7fb f9d6 	bl	8003494 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ec:	1a9b      	subs	r3, r3, r2
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	4413      	add	r3, r2
 80080f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080f4:	f7fb f9ce 	bl	8003494 <HAL_GetTick>
 80080f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080fa:	4b39      	ldr	r3, [pc, #228]	; (80081e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	015b      	lsls	r3, r3, #5
 8008100:	0d1b      	lsrs	r3, r3, #20
 8008102:	69fa      	ldr	r2, [r7, #28]
 8008104:	fb02 f303 	mul.w	r3, r2, r3
 8008108:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800810a:	e054      	b.n	80081b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008112:	d050      	beq.n	80081b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008114:	f7fb f9be 	bl	8003494 <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	69fa      	ldr	r2, [r7, #28]
 8008120:	429a      	cmp	r2, r3
 8008122:	d902      	bls.n	800812a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d13d      	bne.n	80081a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008138:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008142:	d111      	bne.n	8008168 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800814c:	d004      	beq.n	8008158 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008156:	d107      	bne.n	8008168 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008166:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008170:	d10f      	bne.n	8008192 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008190:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e017      	b.n	80081d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d101      	bne.n	80081b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689a      	ldr	r2, [r3, #8]
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	4013      	ands	r3, r2
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	bf0c      	ite	eq
 80081c6:	2301      	moveq	r3, #1
 80081c8:	2300      	movne	r3, #0
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	461a      	mov	r2, r3
 80081ce:	79fb      	ldrb	r3, [r7, #7]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d19b      	bne.n	800810c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3720      	adds	r7, #32
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	20000000 	.word	0x20000000

080081e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
 80081f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80081f2:	f7fb f94f 	bl	8003494 <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fa:	1a9b      	subs	r3, r3, r2
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	4413      	add	r3, r2
 8008200:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008202:	f7fb f947 	bl	8003494 <HAL_GetTick>
 8008206:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008208:	4b3c      	ldr	r3, [pc, #240]	; (80082fc <SPI_WaitFifoStateUntilTimeout+0x118>)
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	00da      	lsls	r2, r3, #3
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	0d1b      	lsrs	r3, r3, #20
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	fb02 f303 	mul.w	r3, r2, r3
 800821e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8008220:	e05f      	b.n	80082e2 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008228:	d106      	bne.n	8008238 <SPI_WaitFifoStateUntilTimeout+0x54>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d103      	bne.n	8008238 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	330c      	adds	r3, #12
 8008236:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823e:	d050      	beq.n	80082e2 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008240:	f7fb f928 	bl	8003494 <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	69fa      	ldr	r2, [r7, #28]
 800824c:	429a      	cmp	r2, r3
 800824e:	d902      	bls.n	8008256 <SPI_WaitFifoStateUntilTimeout+0x72>
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d13d      	bne.n	80082d2 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008264:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800826e:	d111      	bne.n	8008294 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008278:	d004      	beq.n	8008284 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008282:	d107      	bne.n	8008294 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008292:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800829c:	d10f      	bne.n	80082be <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e010      	b.n	80082f4 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	3b01      	subs	r3, #1
 80082e0:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4013      	ands	r3, r2
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d197      	bne.n	8008222 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3720      	adds	r7, #32
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20000000 	.word	0x20000000

08008300 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af02      	add	r7, sp, #8
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008314:	d111      	bne.n	800833a <SPI_EndRxTransaction+0x3a>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800831e:	d004      	beq.n	800832a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008328:	d107      	bne.n	800833a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008338:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	2200      	movs	r2, #0
 8008342:	2180      	movs	r1, #128	; 0x80
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f7ff fec5 	bl	80080d4 <SPI_WaitFlagStateUntilTimeout>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d007      	beq.n	8008360 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008354:	f043 0220 	orr.w	r2, r3, #32
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	e023      	b.n	80083a8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008368:	d11d      	bne.n	80083a6 <SPI_EndRxTransaction+0xa6>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008372:	d004      	beq.n	800837e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800837c:	d113      	bne.n	80083a6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2200      	movs	r2, #0
 8008386:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f7ff ff2a 	bl	80081e4 <SPI_WaitFifoStateUntilTimeout>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d007      	beq.n	80083a6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800839a:	f043 0220 	orr.w	r2, r3, #32
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e000      	b.n	80083a8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f7ff ff0b 	bl	80081e4 <SPI_WaitFifoStateUntilTimeout>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d007      	beq.n	80083e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083d8:	f043 0220 	orr.w	r2, r3, #32
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e027      	b.n	8008434 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2200      	movs	r2, #0
 80083ec:	2180      	movs	r1, #128	; 0x80
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f7ff fe70 	bl	80080d4 <SPI_WaitFlagStateUntilTimeout>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d007      	beq.n	800840a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083fe:	f043 0220 	orr.w	r2, r3, #32
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e014      	b.n	8008434 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2200      	movs	r2, #0
 8008412:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f7ff fee4 	bl	80081e4 <SPI_WaitFifoStateUntilTimeout>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d007      	beq.n	8008432 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008426:	f043 0220 	orr.w	r2, r3, #32
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e000      	b.n	8008434 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8008448:	e00c      	b.n	8008464 <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 800844a:	7bfb      	ldrb	r3, [r7, #15]
 800844c:	3301      	adds	r3, #1
 800844e:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 8008458:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 800845a:	7bfb      	ldrb	r3, [r7, #15]
 800845c:	2b04      	cmp	r3, #4
 800845e:	d101      	bne.n	8008464 <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e007      	b.n	8008474 <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1eb      	bne.n	800844a <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e042      	b.n	8008518 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008498:	2b00      	cmp	r3, #0
 800849a:	d106      	bne.n	80084aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7f9 ffd9 	bl	800245c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2224      	movs	r2, #36	; 0x24
 80084ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 0201 	bic.w	r2, r2, #1
 80084c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f994 	bl	80087f0 <UART_SetConfig>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d101      	bne.n	80084d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e022      	b.n	8008518 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d002      	beq.n	80084e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fc5a 	bl	8008d94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689a      	ldr	r2, [r3, #8]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f042 0201 	orr.w	r2, r2, #1
 800850e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fce1 	bl	8008ed8 <UART_CheckIdleState>
 8008516:	4603      	mov	r3, r0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b08a      	sub	sp, #40	; 0x28
 8008524:	af02      	add	r7, sp, #8
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	603b      	str	r3, [r7, #0]
 800852c:	4613      	mov	r3, r2
 800852e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008536:	2b20      	cmp	r3, #32
 8008538:	f040 8084 	bne.w	8008644 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d002      	beq.n	8008548 <HAL_UART_Transmit+0x28>
 8008542:	88fb      	ldrh	r3, [r7, #6]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d101      	bne.n	800854c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e07c      	b.n	8008646 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008552:	2b01      	cmp	r3, #1
 8008554:	d101      	bne.n	800855a <HAL_UART_Transmit+0x3a>
 8008556:	2302      	movs	r3, #2
 8008558:	e075      	b.n	8008646 <HAL_UART_Transmit+0x126>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2221      	movs	r2, #33	; 0x21
 800856e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008572:	f7fa ff8f 	bl	8003494 <HAL_GetTick>
 8008576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	88fa      	ldrh	r2, [r7, #6]
 800857c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	88fa      	ldrh	r2, [r7, #6]
 8008584:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008590:	d108      	bne.n	80085a4 <HAL_UART_Transmit+0x84>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d104      	bne.n	80085a4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800859a:	2300      	movs	r3, #0
 800859c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	61bb      	str	r3, [r7, #24]
 80085a2:	e003      	b.n	80085ac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085a8:	2300      	movs	r3, #0
 80085aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80085b4:	e02d      	b.n	8008612 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2200      	movs	r2, #0
 80085be:	2180      	movs	r1, #128	; 0x80
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 fcd1 	bl	8008f68 <UART_WaitOnFlagUntilTimeout>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80085cc:	2303      	movs	r3, #3
 80085ce:	e03a      	b.n	8008646 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10b      	bne.n	80085ee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	881a      	ldrh	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085e2:	b292      	uxth	r2, r2
 80085e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	3302      	adds	r3, #2
 80085ea:	61bb      	str	r3, [r7, #24]
 80085ec:	e008      	b.n	8008600 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	781a      	ldrb	r2, [r3, #0]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	b292      	uxth	r2, r2
 80085f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	3301      	adds	r3, #1
 80085fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008606:	b29b      	uxth	r3, r3
 8008608:	3b01      	subs	r3, #1
 800860a:	b29a      	uxth	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008618:	b29b      	uxth	r3, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1cb      	bne.n	80085b6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2200      	movs	r2, #0
 8008626:	2140      	movs	r1, #64	; 0x40
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 fc9d 	bl	8008f68 <UART_WaitOnFlagUntilTimeout>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e006      	b.n	8008646 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2220      	movs	r2, #32
 800863c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	e000      	b.n	8008646 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008644:	2302      	movs	r3, #2
  }
}
 8008646:	4618      	mov	r0, r3
 8008648:	3720      	adds	r7, #32
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b08a      	sub	sp, #40	; 0x28
 8008652:	af02      	add	r7, sp, #8
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	603b      	str	r3, [r7, #0]
 800865a:	4613      	mov	r3, r2
 800865c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008664:	2b20      	cmp	r3, #32
 8008666:	f040 80be 	bne.w	80087e6 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <HAL_UART_Receive+0x28>
 8008670:	88fb      	ldrh	r3, [r7, #6]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e0b6      	b.n	80087e8 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008680:	2b01      	cmp	r3, #1
 8008682:	d101      	bne.n	8008688 <HAL_UART_Receive+0x3a>
 8008684:	2302      	movs	r3, #2
 8008686:	e0af      	b.n	80087e8 <HAL_UART_Receive+0x19a>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2222      	movs	r2, #34	; 0x22
 800869c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80086a0:	f7fa fef8 	bl	8003494 <HAL_GetTick>
 80086a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	88fa      	ldrh	r2, [r7, #6]
 80086aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	88fa      	ldrh	r2, [r7, #6]
 80086b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086be:	d10e      	bne.n	80086de <HAL_UART_Receive+0x90>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d105      	bne.n	80086d4 <HAL_UART_Receive+0x86>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80086ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086d2:	e02d      	b.n	8008730 <HAL_UART_Receive+0xe2>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	22ff      	movs	r2, #255	; 0xff
 80086d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086dc:	e028      	b.n	8008730 <HAL_UART_Receive+0xe2>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10d      	bne.n	8008702 <HAL_UART_Receive+0xb4>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d104      	bne.n	80086f8 <HAL_UART_Receive+0xaa>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	22ff      	movs	r2, #255	; 0xff
 80086f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086f6:	e01b      	b.n	8008730 <HAL_UART_Receive+0xe2>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	227f      	movs	r2, #127	; 0x7f
 80086fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008700:	e016      	b.n	8008730 <HAL_UART_Receive+0xe2>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800870a:	d10d      	bne.n	8008728 <HAL_UART_Receive+0xda>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d104      	bne.n	800871e <HAL_UART_Receive+0xd0>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	227f      	movs	r2, #127	; 0x7f
 8008718:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800871c:	e008      	b.n	8008730 <HAL_UART_Receive+0xe2>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	223f      	movs	r2, #63	; 0x3f
 8008722:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008726:	e003      	b.n	8008730 <HAL_UART_Receive+0xe2>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2200      	movs	r2, #0
 800872c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008736:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008740:	d108      	bne.n	8008754 <HAL_UART_Receive+0x106>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d104      	bne.n	8008754 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 800874a:	2300      	movs	r3, #0
 800874c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	61bb      	str	r3, [r7, #24]
 8008752:	e003      	b.n	800875c <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008758:	2300      	movs	r3, #0
 800875a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008764:	e033      	b.n	80087ce <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	2200      	movs	r2, #0
 800876e:	2120      	movs	r1, #32
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 fbf9 	bl	8008f68 <UART_WaitOnFlagUntilTimeout>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e033      	b.n	80087e8 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10c      	bne.n	80087a0 <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800878c:	b29a      	uxth	r2, r3
 800878e:	8a7b      	ldrh	r3, [r7, #18]
 8008790:	4013      	ands	r3, r2
 8008792:	b29a      	uxth	r2, r3
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	3302      	adds	r3, #2
 800879c:	61bb      	str	r3, [r7, #24]
 800879e:	e00d      	b.n	80087bc <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	8a7b      	ldrh	r3, [r7, #18]
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	4013      	ands	r3, r2
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	3301      	adds	r3, #1
 80087ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	3b01      	subs	r3, #1
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1c5      	bne.n	8008766 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2220      	movs	r2, #32
 80087de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	e000      	b.n	80087e8 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80087e6:	2302      	movs	r3, #2
  }
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3720      	adds	r7, #32
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80087f4:	b088      	sub	sp, #32
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	431a      	orrs	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	431a      	orrs	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	4313      	orrs	r3, r2
 8008814:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800881a:	69fa      	ldr	r2, [r7, #28]
 800881c:	4313      	orrs	r3, r2
 800881e:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	4bb1      	ldr	r3, [pc, #708]	; (8008aec <UART_SetConfig+0x2fc>)
 8008828:	4013      	ands	r3, r2
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	6812      	ldr	r2, [r2, #0]
 800882e:	69f9      	ldr	r1, [r7, #28]
 8008830:	430b      	orrs	r3, r1
 8008832:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4aa6      	ldr	r2, [pc, #664]	; (8008af0 <UART_SetConfig+0x300>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d004      	beq.n	8008864 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	69fa      	ldr	r2, [r7, #28]
 8008860:	4313      	orrs	r3, r2
 8008862:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800886e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	6812      	ldr	r2, [r2, #0]
 8008876:	69f9      	ldr	r1, [r7, #28]
 8008878:	430b      	orrs	r3, r1
 800887a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008882:	f023 010f 	bic.w	r1, r3, #15
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	430a      	orrs	r2, r1
 8008890:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a97      	ldr	r2, [pc, #604]	; (8008af4 <UART_SetConfig+0x304>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d121      	bne.n	80088e0 <UART_SetConfig+0xf0>
 800889c:	4b96      	ldr	r3, [pc, #600]	; (8008af8 <UART_SetConfig+0x308>)
 800889e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088a2:	f003 0303 	and.w	r3, r3, #3
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d816      	bhi.n	80088d8 <UART_SetConfig+0xe8>
 80088aa:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <UART_SetConfig+0xc0>)
 80088ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b0:	080088c1 	.word	0x080088c1
 80088b4:	080088cd 	.word	0x080088cd
 80088b8:	080088c7 	.word	0x080088c7
 80088bc:	080088d3 	.word	0x080088d3
 80088c0:	2301      	movs	r3, #1
 80088c2:	76fb      	strb	r3, [r7, #27]
 80088c4:	e0e8      	b.n	8008a98 <UART_SetConfig+0x2a8>
 80088c6:	2302      	movs	r3, #2
 80088c8:	76fb      	strb	r3, [r7, #27]
 80088ca:	e0e5      	b.n	8008a98 <UART_SetConfig+0x2a8>
 80088cc:	2304      	movs	r3, #4
 80088ce:	76fb      	strb	r3, [r7, #27]
 80088d0:	e0e2      	b.n	8008a98 <UART_SetConfig+0x2a8>
 80088d2:	2308      	movs	r3, #8
 80088d4:	76fb      	strb	r3, [r7, #27]
 80088d6:	e0df      	b.n	8008a98 <UART_SetConfig+0x2a8>
 80088d8:	2310      	movs	r3, #16
 80088da:	76fb      	strb	r3, [r7, #27]
 80088dc:	bf00      	nop
 80088de:	e0db      	b.n	8008a98 <UART_SetConfig+0x2a8>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a85      	ldr	r2, [pc, #532]	; (8008afc <UART_SetConfig+0x30c>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d134      	bne.n	8008954 <UART_SetConfig+0x164>
 80088ea:	4b83      	ldr	r3, [pc, #524]	; (8008af8 <UART_SetConfig+0x308>)
 80088ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f0:	f003 030c 	and.w	r3, r3, #12
 80088f4:	2b0c      	cmp	r3, #12
 80088f6:	d829      	bhi.n	800894c <UART_SetConfig+0x15c>
 80088f8:	a201      	add	r2, pc, #4	; (adr r2, 8008900 <UART_SetConfig+0x110>)
 80088fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fe:	bf00      	nop
 8008900:	08008935 	.word	0x08008935
 8008904:	0800894d 	.word	0x0800894d
 8008908:	0800894d 	.word	0x0800894d
 800890c:	0800894d 	.word	0x0800894d
 8008910:	08008941 	.word	0x08008941
 8008914:	0800894d 	.word	0x0800894d
 8008918:	0800894d 	.word	0x0800894d
 800891c:	0800894d 	.word	0x0800894d
 8008920:	0800893b 	.word	0x0800893b
 8008924:	0800894d 	.word	0x0800894d
 8008928:	0800894d 	.word	0x0800894d
 800892c:	0800894d 	.word	0x0800894d
 8008930:	08008947 	.word	0x08008947
 8008934:	2300      	movs	r3, #0
 8008936:	76fb      	strb	r3, [r7, #27]
 8008938:	e0ae      	b.n	8008a98 <UART_SetConfig+0x2a8>
 800893a:	2302      	movs	r3, #2
 800893c:	76fb      	strb	r3, [r7, #27]
 800893e:	e0ab      	b.n	8008a98 <UART_SetConfig+0x2a8>
 8008940:	2304      	movs	r3, #4
 8008942:	76fb      	strb	r3, [r7, #27]
 8008944:	e0a8      	b.n	8008a98 <UART_SetConfig+0x2a8>
 8008946:	2308      	movs	r3, #8
 8008948:	76fb      	strb	r3, [r7, #27]
 800894a:	e0a5      	b.n	8008a98 <UART_SetConfig+0x2a8>
 800894c:	2310      	movs	r3, #16
 800894e:	76fb      	strb	r3, [r7, #27]
 8008950:	bf00      	nop
 8008952:	e0a1      	b.n	8008a98 <UART_SetConfig+0x2a8>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a69      	ldr	r2, [pc, #420]	; (8008b00 <UART_SetConfig+0x310>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d120      	bne.n	80089a0 <UART_SetConfig+0x1b0>
 800895e:	4b66      	ldr	r3, [pc, #408]	; (8008af8 <UART_SetConfig+0x308>)
 8008960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008964:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008968:	2b10      	cmp	r3, #16
 800896a:	d00f      	beq.n	800898c <UART_SetConfig+0x19c>
 800896c:	2b10      	cmp	r3, #16
 800896e:	d802      	bhi.n	8008976 <UART_SetConfig+0x186>
 8008970:	2b00      	cmp	r3, #0
 8008972:	d005      	beq.n	8008980 <UART_SetConfig+0x190>
 8008974:	e010      	b.n	8008998 <UART_SetConfig+0x1a8>
 8008976:	2b20      	cmp	r3, #32
 8008978:	d005      	beq.n	8008986 <UART_SetConfig+0x196>
 800897a:	2b30      	cmp	r3, #48	; 0x30
 800897c:	d009      	beq.n	8008992 <UART_SetConfig+0x1a2>
 800897e:	e00b      	b.n	8008998 <UART_SetConfig+0x1a8>
 8008980:	2300      	movs	r3, #0
 8008982:	76fb      	strb	r3, [r7, #27]
 8008984:	e088      	b.n	8008a98 <UART_SetConfig+0x2a8>
 8008986:	2302      	movs	r3, #2
 8008988:	76fb      	strb	r3, [r7, #27]
 800898a:	e085      	b.n	8008a98 <UART_SetConfig+0x2a8>
 800898c:	2304      	movs	r3, #4
 800898e:	76fb      	strb	r3, [r7, #27]
 8008990:	e082      	b.n	8008a98 <UART_SetConfig+0x2a8>
 8008992:	2308      	movs	r3, #8
 8008994:	76fb      	strb	r3, [r7, #27]
 8008996:	e07f      	b.n	8008a98 <UART_SetConfig+0x2a8>
 8008998:	2310      	movs	r3, #16
 800899a:	76fb      	strb	r3, [r7, #27]
 800899c:	bf00      	nop
 800899e:	e07b      	b.n	8008a98 <UART_SetConfig+0x2a8>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a57      	ldr	r2, [pc, #348]	; (8008b04 <UART_SetConfig+0x314>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d120      	bne.n	80089ec <UART_SetConfig+0x1fc>
 80089aa:	4b53      	ldr	r3, [pc, #332]	; (8008af8 <UART_SetConfig+0x308>)
 80089ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80089b4:	2b40      	cmp	r3, #64	; 0x40
 80089b6:	d00f      	beq.n	80089d8 <UART_SetConfig+0x1e8>
 80089b8:	2b40      	cmp	r3, #64	; 0x40
 80089ba:	d802      	bhi.n	80089c2 <UART_SetConfig+0x1d2>
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d005      	beq.n	80089cc <UART_SetConfig+0x1dc>
 80089c0:	e010      	b.n	80089e4 <UART_SetConfig+0x1f4>
 80089c2:	2b80      	cmp	r3, #128	; 0x80
 80089c4:	d005      	beq.n	80089d2 <UART_SetConfig+0x1e2>
 80089c6:	2bc0      	cmp	r3, #192	; 0xc0
 80089c8:	d009      	beq.n	80089de <UART_SetConfig+0x1ee>
 80089ca:	e00b      	b.n	80089e4 <UART_SetConfig+0x1f4>
 80089cc:	2300      	movs	r3, #0
 80089ce:	76fb      	strb	r3, [r7, #27]
 80089d0:	e062      	b.n	8008a98 <UART_SetConfig+0x2a8>
 80089d2:	2302      	movs	r3, #2
 80089d4:	76fb      	strb	r3, [r7, #27]
 80089d6:	e05f      	b.n	8008a98 <UART_SetConfig+0x2a8>
 80089d8:	2304      	movs	r3, #4
 80089da:	76fb      	strb	r3, [r7, #27]
 80089dc:	e05c      	b.n	8008a98 <UART_SetConfig+0x2a8>
 80089de:	2308      	movs	r3, #8
 80089e0:	76fb      	strb	r3, [r7, #27]
 80089e2:	e059      	b.n	8008a98 <UART_SetConfig+0x2a8>
 80089e4:	2310      	movs	r3, #16
 80089e6:	76fb      	strb	r3, [r7, #27]
 80089e8:	bf00      	nop
 80089ea:	e055      	b.n	8008a98 <UART_SetConfig+0x2a8>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a45      	ldr	r2, [pc, #276]	; (8008b08 <UART_SetConfig+0x318>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d124      	bne.n	8008a40 <UART_SetConfig+0x250>
 80089f6:	4b40      	ldr	r3, [pc, #256]	; (8008af8 <UART_SetConfig+0x308>)
 80089f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a04:	d012      	beq.n	8008a2c <UART_SetConfig+0x23c>
 8008a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a0a:	d802      	bhi.n	8008a12 <UART_SetConfig+0x222>
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d007      	beq.n	8008a20 <UART_SetConfig+0x230>
 8008a10:	e012      	b.n	8008a38 <UART_SetConfig+0x248>
 8008a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a16:	d006      	beq.n	8008a26 <UART_SetConfig+0x236>
 8008a18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a1c:	d009      	beq.n	8008a32 <UART_SetConfig+0x242>
 8008a1e:	e00b      	b.n	8008a38 <UART_SetConfig+0x248>
 8008a20:	2300      	movs	r3, #0
 8008a22:	76fb      	strb	r3, [r7, #27]
 8008a24:	e038      	b.n	8008a98 <UART_SetConfig+0x2a8>
 8008a26:	2302      	movs	r3, #2
 8008a28:	76fb      	strb	r3, [r7, #27]
 8008a2a:	e035      	b.n	8008a98 <UART_SetConfig+0x2a8>
 8008a2c:	2304      	movs	r3, #4
 8008a2e:	76fb      	strb	r3, [r7, #27]
 8008a30:	e032      	b.n	8008a98 <UART_SetConfig+0x2a8>
 8008a32:	2308      	movs	r3, #8
 8008a34:	76fb      	strb	r3, [r7, #27]
 8008a36:	e02f      	b.n	8008a98 <UART_SetConfig+0x2a8>
 8008a38:	2310      	movs	r3, #16
 8008a3a:	76fb      	strb	r3, [r7, #27]
 8008a3c:	bf00      	nop
 8008a3e:	e02b      	b.n	8008a98 <UART_SetConfig+0x2a8>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a2a      	ldr	r2, [pc, #168]	; (8008af0 <UART_SetConfig+0x300>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d124      	bne.n	8008a94 <UART_SetConfig+0x2a4>
 8008a4a:	4b2b      	ldr	r3, [pc, #172]	; (8008af8 <UART_SetConfig+0x308>)
 8008a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a58:	d012      	beq.n	8008a80 <UART_SetConfig+0x290>
 8008a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a5e:	d802      	bhi.n	8008a66 <UART_SetConfig+0x276>
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d007      	beq.n	8008a74 <UART_SetConfig+0x284>
 8008a64:	e012      	b.n	8008a8c <UART_SetConfig+0x29c>
 8008a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a6a:	d006      	beq.n	8008a7a <UART_SetConfig+0x28a>
 8008a6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a70:	d009      	beq.n	8008a86 <UART_SetConfig+0x296>
 8008a72:	e00b      	b.n	8008a8c <UART_SetConfig+0x29c>
 8008a74:	2300      	movs	r3, #0
 8008a76:	76fb      	strb	r3, [r7, #27]
 8008a78:	e00e      	b.n	8008a98 <UART_SetConfig+0x2a8>
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	76fb      	strb	r3, [r7, #27]
 8008a7e:	e00b      	b.n	8008a98 <UART_SetConfig+0x2a8>
 8008a80:	2304      	movs	r3, #4
 8008a82:	76fb      	strb	r3, [r7, #27]
 8008a84:	e008      	b.n	8008a98 <UART_SetConfig+0x2a8>
 8008a86:	2308      	movs	r3, #8
 8008a88:	76fb      	strb	r3, [r7, #27]
 8008a8a:	e005      	b.n	8008a98 <UART_SetConfig+0x2a8>
 8008a8c:	2310      	movs	r3, #16
 8008a8e:	76fb      	strb	r3, [r7, #27]
 8008a90:	bf00      	nop
 8008a92:	e001      	b.n	8008a98 <UART_SetConfig+0x2a8>
 8008a94:	2310      	movs	r3, #16
 8008a96:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a14      	ldr	r2, [pc, #80]	; (8008af0 <UART_SetConfig+0x300>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	f040 80a1 	bne.w	8008be6 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008aa4:	7efb      	ldrb	r3, [r7, #27]
 8008aa6:	2b08      	cmp	r3, #8
 8008aa8:	d836      	bhi.n	8008b18 <UART_SetConfig+0x328>
 8008aaa:	a201      	add	r2, pc, #4	; (adr r2, 8008ab0 <UART_SetConfig+0x2c0>)
 8008aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab0:	08008ad5 	.word	0x08008ad5
 8008ab4:	08008b19 	.word	0x08008b19
 8008ab8:	08008add 	.word	0x08008add
 8008abc:	08008b19 	.word	0x08008b19
 8008ac0:	08008ae3 	.word	0x08008ae3
 8008ac4:	08008b19 	.word	0x08008b19
 8008ac8:	08008b19 	.word	0x08008b19
 8008acc:	08008b19 	.word	0x08008b19
 8008ad0:	08008b11 	.word	0x08008b11
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ad4:	f7fd fe5c 	bl	8006790 <HAL_RCC_GetPCLK1Freq>
 8008ad8:	6178      	str	r0, [r7, #20]
        break;
 8008ada:	e022      	b.n	8008b22 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008adc:	4b0b      	ldr	r3, [pc, #44]	; (8008b0c <UART_SetConfig+0x31c>)
 8008ade:	617b      	str	r3, [r7, #20]
        break;
 8008ae0:	e01f      	b.n	8008b22 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ae2:	f7fd fdbf 	bl	8006664 <HAL_RCC_GetSysClockFreq>
 8008ae6:	6178      	str	r0, [r7, #20]
        break;
 8008ae8:	e01b      	b.n	8008b22 <UART_SetConfig+0x332>
 8008aea:	bf00      	nop
 8008aec:	cfff69f3 	.word	0xcfff69f3
 8008af0:	40008000 	.word	0x40008000
 8008af4:	40013800 	.word	0x40013800
 8008af8:	40021000 	.word	0x40021000
 8008afc:	40004400 	.word	0x40004400
 8008b00:	40004800 	.word	0x40004800
 8008b04:	40004c00 	.word	0x40004c00
 8008b08:	40005000 	.word	0x40005000
 8008b0c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b14:	617b      	str	r3, [r7, #20]
        break;
 8008b16:	e004      	b.n	8008b22 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	76bb      	strb	r3, [r7, #26]
        break;
 8008b20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 811d 	beq.w	8008d64 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2e:	4a97      	ldr	r2, [pc, #604]	; (8008d8c <UART_SetConfig+0x59c>)
 8008b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b34:	461a      	mov	r2, r3
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b3c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	4613      	mov	r3, r2
 8008b44:	005b      	lsls	r3, r3, #1
 8008b46:	4413      	add	r3, r2
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d305      	bcc.n	8008b5a <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d902      	bls.n	8008b60 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	76bb      	strb	r3, [r7, #26]
 8008b5e:	e101      	b.n	8008d64 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f04f 0100 	mov.w	r1, #0
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	4a87      	ldr	r2, [pc, #540]	; (8008d8c <UART_SetConfig+0x59c>)
 8008b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	f04f 0400 	mov.w	r4, #0
 8008b78:	461a      	mov	r2, r3
 8008b7a:	4623      	mov	r3, r4
 8008b7c:	f7f8 f89c 	bl	8000cb8 <__aeabi_uldivmod>
 8008b80:	4603      	mov	r3, r0
 8008b82:	460c      	mov	r4, r1
 8008b84:	4619      	mov	r1, r3
 8008b86:	4622      	mov	r2, r4
 8008b88:	f04f 0300 	mov.w	r3, #0
 8008b8c:	f04f 0400 	mov.w	r4, #0
 8008b90:	0214      	lsls	r4, r2, #8
 8008b92:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008b96:	020b      	lsls	r3, r1, #8
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	6852      	ldr	r2, [r2, #4]
 8008b9c:	0852      	lsrs	r2, r2, #1
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	f04f 0200 	mov.w	r2, #0
 8008ba4:	eb13 0b01 	adds.w	fp, r3, r1
 8008ba8:	eb44 0c02 	adc.w	ip, r4, r2
 8008bac:	4658      	mov	r0, fp
 8008bae:	4661      	mov	r1, ip
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f04f 0400 	mov.w	r4, #0
 8008bb8:	461a      	mov	r2, r3
 8008bba:	4623      	mov	r3, r4
 8008bbc:	f7f8 f87c 	bl	8000cb8 <__aeabi_uldivmod>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bcc:	d308      	bcc.n	8008be0 <UART_SetConfig+0x3f0>
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bd4:	d204      	bcs.n	8008be0 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	60da      	str	r2, [r3, #12]
 8008bde:	e0c1      	b.n	8008d64 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	76bb      	strb	r3, [r7, #26]
 8008be4:	e0be      	b.n	8008d64 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bee:	d164      	bne.n	8008cba <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8008bf0:	7efb      	ldrb	r3, [r7, #27]
 8008bf2:	2b08      	cmp	r3, #8
 8008bf4:	d827      	bhi.n	8008c46 <UART_SetConfig+0x456>
 8008bf6:	a201      	add	r2, pc, #4	; (adr r2, 8008bfc <UART_SetConfig+0x40c>)
 8008bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfc:	08008c21 	.word	0x08008c21
 8008c00:	08008c29 	.word	0x08008c29
 8008c04:	08008c31 	.word	0x08008c31
 8008c08:	08008c47 	.word	0x08008c47
 8008c0c:	08008c37 	.word	0x08008c37
 8008c10:	08008c47 	.word	0x08008c47
 8008c14:	08008c47 	.word	0x08008c47
 8008c18:	08008c47 	.word	0x08008c47
 8008c1c:	08008c3f 	.word	0x08008c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c20:	f7fd fdb6 	bl	8006790 <HAL_RCC_GetPCLK1Freq>
 8008c24:	6178      	str	r0, [r7, #20]
        break;
 8008c26:	e013      	b.n	8008c50 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c28:	f7fd fdc8 	bl	80067bc <HAL_RCC_GetPCLK2Freq>
 8008c2c:	6178      	str	r0, [r7, #20]
        break;
 8008c2e:	e00f      	b.n	8008c50 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c30:	4b57      	ldr	r3, [pc, #348]	; (8008d90 <UART_SetConfig+0x5a0>)
 8008c32:	617b      	str	r3, [r7, #20]
        break;
 8008c34:	e00c      	b.n	8008c50 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c36:	f7fd fd15 	bl	8006664 <HAL_RCC_GetSysClockFreq>
 8008c3a:	6178      	str	r0, [r7, #20]
        break;
 8008c3c:	e008      	b.n	8008c50 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c42:	617b      	str	r3, [r7, #20]
        break;
 8008c44:	e004      	b.n	8008c50 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	76bb      	strb	r3, [r7, #26]
        break;
 8008c4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 8086 	beq.w	8008d64 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5c:	4a4b      	ldr	r2, [pc, #300]	; (8008d8c <UART_SetConfig+0x59c>)
 8008c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c62:	461a      	mov	r2, r3
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c6a:	005a      	lsls	r2, r3, #1
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	085b      	lsrs	r3, r3, #1
 8008c72:	441a      	add	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	2b0f      	cmp	r3, #15
 8008c84:	d916      	bls.n	8008cb4 <UART_SetConfig+0x4c4>
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c8c:	d212      	bcs.n	8008cb4 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	f023 030f 	bic.w	r3, r3, #15
 8008c96:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	085b      	lsrs	r3, r3, #1
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	f003 0307 	and.w	r3, r3, #7
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	89fb      	ldrh	r3, [r7, #14]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	89fa      	ldrh	r2, [r7, #14]
 8008cb0:	60da      	str	r2, [r3, #12]
 8008cb2:	e057      	b.n	8008d64 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	76bb      	strb	r3, [r7, #26]
 8008cb8:	e054      	b.n	8008d64 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cba:	7efb      	ldrb	r3, [r7, #27]
 8008cbc:	2b08      	cmp	r3, #8
 8008cbe:	d828      	bhi.n	8008d12 <UART_SetConfig+0x522>
 8008cc0:	a201      	add	r2, pc, #4	; (adr r2, 8008cc8 <UART_SetConfig+0x4d8>)
 8008cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc6:	bf00      	nop
 8008cc8:	08008ced 	.word	0x08008ced
 8008ccc:	08008cf5 	.word	0x08008cf5
 8008cd0:	08008cfd 	.word	0x08008cfd
 8008cd4:	08008d13 	.word	0x08008d13
 8008cd8:	08008d03 	.word	0x08008d03
 8008cdc:	08008d13 	.word	0x08008d13
 8008ce0:	08008d13 	.word	0x08008d13
 8008ce4:	08008d13 	.word	0x08008d13
 8008ce8:	08008d0b 	.word	0x08008d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cec:	f7fd fd50 	bl	8006790 <HAL_RCC_GetPCLK1Freq>
 8008cf0:	6178      	str	r0, [r7, #20]
        break;
 8008cf2:	e013      	b.n	8008d1c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cf4:	f7fd fd62 	bl	80067bc <HAL_RCC_GetPCLK2Freq>
 8008cf8:	6178      	str	r0, [r7, #20]
        break;
 8008cfa:	e00f      	b.n	8008d1c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cfc:	4b24      	ldr	r3, [pc, #144]	; (8008d90 <UART_SetConfig+0x5a0>)
 8008cfe:	617b      	str	r3, [r7, #20]
        break;
 8008d00:	e00c      	b.n	8008d1c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d02:	f7fd fcaf 	bl	8006664 <HAL_RCC_GetSysClockFreq>
 8008d06:	6178      	str	r0, [r7, #20]
        break;
 8008d08:	e008      	b.n	8008d1c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d0e:	617b      	str	r3, [r7, #20]
        break;
 8008d10:	e004      	b.n	8008d1c <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8008d12:	2300      	movs	r3, #0
 8008d14:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	76bb      	strb	r3, [r7, #26]
        break;
 8008d1a:	bf00      	nop
    }

    if (pclk != 0U)
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d020      	beq.n	8008d64 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	4a19      	ldr	r2, [pc, #100]	; (8008d8c <UART_SetConfig+0x59c>)
 8008d28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	085b      	lsrs	r3, r3, #1
 8008d3a:	441a      	add	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	2b0f      	cmp	r3, #15
 8008d4c:	d908      	bls.n	8008d60 <UART_SetConfig+0x570>
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d54:	d204      	bcs.n	8008d60 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	60da      	str	r2, [r3, #12]
 8008d5e:	e001      	b.n	8008d64 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008d80:	7ebb      	ldrb	r3, [r7, #26]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3720      	adds	r7, #32
 8008d86:	46bd      	mov	sp, r7
 8008d88:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008d8c:	0800dcac 	.word	0x0800dcac
 8008d90:	00f42400 	.word	0x00f42400

08008d94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da0:	f003 0301 	and.w	r3, r3, #1
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00a      	beq.n	8008dbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc2:	f003 0302 	and.w	r3, r3, #2
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00a      	beq.n	8008de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00a      	beq.n	8008e02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e06:	f003 0308 	and.w	r3, r3, #8
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00a      	beq.n	8008e24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e28:	f003 0310 	and.w	r3, r3, #16
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00a      	beq.n	8008e46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4a:	f003 0320 	and.w	r3, r3, #32
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00a      	beq.n	8008e68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	430a      	orrs	r2, r1
 8008e66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d01a      	beq.n	8008eaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e92:	d10a      	bne.n	8008eaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	430a      	orrs	r2, r1
 8008ea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00a      	beq.n	8008ecc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	430a      	orrs	r2, r1
 8008eca:	605a      	str	r2, [r3, #4]
  }
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af02      	add	r7, sp, #8
 8008ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008ee8:	f7fa fad4 	bl	8003494 <HAL_GetTick>
 8008eec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0308 	and.w	r3, r3, #8
 8008ef8:	2b08      	cmp	r3, #8
 8008efa:	d10e      	bne.n	8008f1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008efc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f82c 	bl	8008f68 <UART_WaitOnFlagUntilTimeout>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e022      	b.n	8008f60 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 0304 	and.w	r3, r3, #4
 8008f24:	2b04      	cmp	r3, #4
 8008f26:	d10e      	bne.n	8008f46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f816 	bl	8008f68 <UART_WaitOnFlagUntilTimeout>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e00c      	b.n	8008f60 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2220      	movs	r2, #32
 8008f4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2220      	movs	r2, #32
 8008f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	603b      	str	r3, [r7, #0]
 8008f74:	4613      	mov	r3, r2
 8008f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f78:	e062      	b.n	8009040 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f80:	d05e      	beq.n	8009040 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f82:	f7fa fa87 	bl	8003494 <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	69ba      	ldr	r2, [r7, #24]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d302      	bcc.n	8008f98 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d11d      	bne.n	8008fd4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008fa6:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	689a      	ldr	r2, [r3, #8]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f022 0201 	bic.w	r2, r2, #1
 8008fb6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2220      	movs	r2, #32
 8008fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e045      	b.n	8009060 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0304 	and.w	r3, r3, #4
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d02e      	beq.n	8009040 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ff0:	d126      	bne.n	8009040 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ffa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800900a:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	689a      	ldr	r2, [r3, #8]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f022 0201 	bic.w	r2, r2, #1
 800901a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2220      	movs	r2, #32
 8009020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2220      	movs	r2, #32
 8009028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2220      	movs	r2, #32
 8009030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e00f      	b.n	8009060 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	69da      	ldr	r2, [r3, #28]
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	4013      	ands	r3, r2
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	429a      	cmp	r2, r3
 800904e:	bf0c      	ite	eq
 8009050:	2301      	moveq	r3, #1
 8009052:	2300      	movne	r3, #0
 8009054:	b2db      	uxtb	r3, r3
 8009056:	461a      	mov	r2, r3
 8009058:	79fb      	ldrb	r3, [r7, #7]
 800905a:	429a      	cmp	r2, r3
 800905c:	d08d      	beq.n	8008f7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009076:	2b01      	cmp	r3, #1
 8009078:	d101      	bne.n	800907e <HAL_UARTEx_DisableFifoMode+0x16>
 800907a:	2302      	movs	r3, #2
 800907c:	e027      	b.n	80090ce <HAL_UARTEx_DisableFifoMode+0x66>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2224      	movs	r2, #36	; 0x24
 800908a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f022 0201 	bic.w	r2, r2, #1
 80090a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80090ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2220      	movs	r2, #32
 80090c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b084      	sub	sp, #16
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d101      	bne.n	80090f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80090ee:	2302      	movs	r3, #2
 80090f0:	e02d      	b.n	800914e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2224      	movs	r2, #36	; 0x24
 80090fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f022 0201 	bic.w	r2, r2, #1
 8009118:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	683a      	ldr	r2, [r7, #0]
 800912a:	430a      	orrs	r2, r1
 800912c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f850 	bl	80091d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2220      	movs	r2, #32
 8009140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b084      	sub	sp, #16
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009166:	2b01      	cmp	r3, #1
 8009168:	d101      	bne.n	800916e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800916a:	2302      	movs	r3, #2
 800916c:	e02d      	b.n	80091ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2224      	movs	r2, #36	; 0x24
 800917a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f022 0201 	bic.w	r2, r2, #1
 8009194:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	430a      	orrs	r2, r1
 80091a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f812 	bl	80091d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2220      	movs	r2, #32
 80091bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
	...

080091d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b089      	sub	sp, #36	; 0x24
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80091dc:	4a2f      	ldr	r2, [pc, #188]	; (800929c <UARTEx_SetNbDataToProcess+0xc8>)
 80091de:	f107 0314 	add.w	r3, r7, #20
 80091e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80091e6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80091ea:	4a2d      	ldr	r2, [pc, #180]	; (80092a0 <UARTEx_SetNbDataToProcess+0xcc>)
 80091ec:	f107 030c 	add.w	r3, r7, #12
 80091f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80091f4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d108      	bne.n	8009212 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009210:	e03d      	b.n	800928e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009212:	2308      	movs	r3, #8
 8009214:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009216:	2308      	movs	r3, #8
 8009218:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	0e5b      	lsrs	r3, r3, #25
 8009222:	b2db      	uxtb	r3, r3
 8009224:	f003 0307 	and.w	r3, r3, #7
 8009228:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	0f5b      	lsrs	r3, r3, #29
 8009232:	b2db      	uxtb	r3, r3
 8009234:	f003 0307 	and.w	r3, r3, #7
 8009238:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800923a:	7fbb      	ldrb	r3, [r7, #30]
 800923c:	7f3a      	ldrb	r2, [r7, #28]
 800923e:	f107 0120 	add.w	r1, r7, #32
 8009242:	440a      	add	r2, r1
 8009244:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009248:	fb02 f303 	mul.w	r3, r2, r3
 800924c:	7f3a      	ldrb	r2, [r7, #28]
 800924e:	f107 0120 	add.w	r1, r7, #32
 8009252:	440a      	add	r2, r1
 8009254:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009258:	fb93 f3f2 	sdiv	r3, r3, r2
 800925c:	b29a      	uxth	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009264:	7ffb      	ldrb	r3, [r7, #31]
 8009266:	7f7a      	ldrb	r2, [r7, #29]
 8009268:	f107 0120 	add.w	r1, r7, #32
 800926c:	440a      	add	r2, r1
 800926e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009272:	fb02 f303 	mul.w	r3, r2, r3
 8009276:	7f7a      	ldrb	r2, [r7, #29]
 8009278:	f107 0120 	add.w	r1, r7, #32
 800927c:	440a      	add	r2, r1
 800927e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009282:	fb93 f3f2 	sdiv	r3, r3, r2
 8009286:	b29a      	uxth	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800928e:	bf00      	nop
 8009290:	3724      	adds	r7, #36	; 0x24
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	0800dc54 	.word	0x0800dc54
 80092a0:	0800dc5c 	.word	0x0800dc5c

080092a4 <bzero>:
 80092a4:	460a      	mov	r2, r1
 80092a6:	2100      	movs	r1, #0
 80092a8:	f000 b835 	b.w	8009316 <memset>

080092ac <__errno>:
 80092ac:	4b01      	ldr	r3, [pc, #4]	; (80092b4 <__errno+0x8>)
 80092ae:	6818      	ldr	r0, [r3, #0]
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	2000000c 	.word	0x2000000c

080092b8 <__libc_init_array>:
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	4e0d      	ldr	r6, [pc, #52]	; (80092f0 <__libc_init_array+0x38>)
 80092bc:	4c0d      	ldr	r4, [pc, #52]	; (80092f4 <__libc_init_array+0x3c>)
 80092be:	1ba4      	subs	r4, r4, r6
 80092c0:	10a4      	asrs	r4, r4, #2
 80092c2:	2500      	movs	r5, #0
 80092c4:	42a5      	cmp	r5, r4
 80092c6:	d109      	bne.n	80092dc <__libc_init_array+0x24>
 80092c8:	4e0b      	ldr	r6, [pc, #44]	; (80092f8 <__libc_init_array+0x40>)
 80092ca:	4c0c      	ldr	r4, [pc, #48]	; (80092fc <__libc_init_array+0x44>)
 80092cc:	f004 fae2 	bl	800d894 <_init>
 80092d0:	1ba4      	subs	r4, r4, r6
 80092d2:	10a4      	asrs	r4, r4, #2
 80092d4:	2500      	movs	r5, #0
 80092d6:	42a5      	cmp	r5, r4
 80092d8:	d105      	bne.n	80092e6 <__libc_init_array+0x2e>
 80092da:	bd70      	pop	{r4, r5, r6, pc}
 80092dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092e0:	4798      	blx	r3
 80092e2:	3501      	adds	r5, #1
 80092e4:	e7ee      	b.n	80092c4 <__libc_init_array+0xc>
 80092e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092ea:	4798      	blx	r3
 80092ec:	3501      	adds	r5, #1
 80092ee:	e7f2      	b.n	80092d6 <__libc_init_array+0x1e>
 80092f0:	0800dff0 	.word	0x0800dff0
 80092f4:	0800dff0 	.word	0x0800dff0
 80092f8:	0800dff0 	.word	0x0800dff0
 80092fc:	0800dff4 	.word	0x0800dff4

08009300 <memcpy>:
 8009300:	b510      	push	{r4, lr}
 8009302:	1e43      	subs	r3, r0, #1
 8009304:	440a      	add	r2, r1
 8009306:	4291      	cmp	r1, r2
 8009308:	d100      	bne.n	800930c <memcpy+0xc>
 800930a:	bd10      	pop	{r4, pc}
 800930c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009310:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009314:	e7f7      	b.n	8009306 <memcpy+0x6>

08009316 <memset>:
 8009316:	4402      	add	r2, r0
 8009318:	4603      	mov	r3, r0
 800931a:	4293      	cmp	r3, r2
 800931c:	d100      	bne.n	8009320 <memset+0xa>
 800931e:	4770      	bx	lr
 8009320:	f803 1b01 	strb.w	r1, [r3], #1
 8009324:	e7f9      	b.n	800931a <memset+0x4>

08009326 <__cvt>:
 8009326:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800932a:	ec55 4b10 	vmov	r4, r5, d0
 800932e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009330:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009334:	2d00      	cmp	r5, #0
 8009336:	460e      	mov	r6, r1
 8009338:	4691      	mov	r9, r2
 800933a:	4619      	mov	r1, r3
 800933c:	bfb8      	it	lt
 800933e:	4622      	movlt	r2, r4
 8009340:	462b      	mov	r3, r5
 8009342:	f027 0720 	bic.w	r7, r7, #32
 8009346:	bfbb      	ittet	lt
 8009348:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800934c:	461d      	movlt	r5, r3
 800934e:	2300      	movge	r3, #0
 8009350:	232d      	movlt	r3, #45	; 0x2d
 8009352:	bfb8      	it	lt
 8009354:	4614      	movlt	r4, r2
 8009356:	2f46      	cmp	r7, #70	; 0x46
 8009358:	700b      	strb	r3, [r1, #0]
 800935a:	d004      	beq.n	8009366 <__cvt+0x40>
 800935c:	2f45      	cmp	r7, #69	; 0x45
 800935e:	d100      	bne.n	8009362 <__cvt+0x3c>
 8009360:	3601      	adds	r6, #1
 8009362:	2102      	movs	r1, #2
 8009364:	e000      	b.n	8009368 <__cvt+0x42>
 8009366:	2103      	movs	r1, #3
 8009368:	ab03      	add	r3, sp, #12
 800936a:	9301      	str	r3, [sp, #4]
 800936c:	ab02      	add	r3, sp, #8
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	4632      	mov	r2, r6
 8009372:	4653      	mov	r3, sl
 8009374:	ec45 4b10 	vmov	d0, r4, r5
 8009378:	f001 ff36 	bl	800b1e8 <_dtoa_r>
 800937c:	2f47      	cmp	r7, #71	; 0x47
 800937e:	4680      	mov	r8, r0
 8009380:	d102      	bne.n	8009388 <__cvt+0x62>
 8009382:	f019 0f01 	tst.w	r9, #1
 8009386:	d026      	beq.n	80093d6 <__cvt+0xb0>
 8009388:	2f46      	cmp	r7, #70	; 0x46
 800938a:	eb08 0906 	add.w	r9, r8, r6
 800938e:	d111      	bne.n	80093b4 <__cvt+0x8e>
 8009390:	f898 3000 	ldrb.w	r3, [r8]
 8009394:	2b30      	cmp	r3, #48	; 0x30
 8009396:	d10a      	bne.n	80093ae <__cvt+0x88>
 8009398:	2200      	movs	r2, #0
 800939a:	2300      	movs	r3, #0
 800939c:	4620      	mov	r0, r4
 800939e:	4629      	mov	r1, r5
 80093a0:	f7f7 fbaa 	bl	8000af8 <__aeabi_dcmpeq>
 80093a4:	b918      	cbnz	r0, 80093ae <__cvt+0x88>
 80093a6:	f1c6 0601 	rsb	r6, r6, #1
 80093aa:	f8ca 6000 	str.w	r6, [sl]
 80093ae:	f8da 3000 	ldr.w	r3, [sl]
 80093b2:	4499      	add	r9, r3
 80093b4:	2200      	movs	r2, #0
 80093b6:	2300      	movs	r3, #0
 80093b8:	4620      	mov	r0, r4
 80093ba:	4629      	mov	r1, r5
 80093bc:	f7f7 fb9c 	bl	8000af8 <__aeabi_dcmpeq>
 80093c0:	b938      	cbnz	r0, 80093d2 <__cvt+0xac>
 80093c2:	2230      	movs	r2, #48	; 0x30
 80093c4:	9b03      	ldr	r3, [sp, #12]
 80093c6:	454b      	cmp	r3, r9
 80093c8:	d205      	bcs.n	80093d6 <__cvt+0xb0>
 80093ca:	1c59      	adds	r1, r3, #1
 80093cc:	9103      	str	r1, [sp, #12]
 80093ce:	701a      	strb	r2, [r3, #0]
 80093d0:	e7f8      	b.n	80093c4 <__cvt+0x9e>
 80093d2:	f8cd 900c 	str.w	r9, [sp, #12]
 80093d6:	9b03      	ldr	r3, [sp, #12]
 80093d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093da:	eba3 0308 	sub.w	r3, r3, r8
 80093de:	4640      	mov	r0, r8
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	b004      	add	sp, #16
 80093e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080093e8 <__exponent>:
 80093e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093ea:	2900      	cmp	r1, #0
 80093ec:	4604      	mov	r4, r0
 80093ee:	bfba      	itte	lt
 80093f0:	4249      	neglt	r1, r1
 80093f2:	232d      	movlt	r3, #45	; 0x2d
 80093f4:	232b      	movge	r3, #43	; 0x2b
 80093f6:	2909      	cmp	r1, #9
 80093f8:	f804 2b02 	strb.w	r2, [r4], #2
 80093fc:	7043      	strb	r3, [r0, #1]
 80093fe:	dd20      	ble.n	8009442 <__exponent+0x5a>
 8009400:	f10d 0307 	add.w	r3, sp, #7
 8009404:	461f      	mov	r7, r3
 8009406:	260a      	movs	r6, #10
 8009408:	fb91 f5f6 	sdiv	r5, r1, r6
 800940c:	fb06 1115 	mls	r1, r6, r5, r1
 8009410:	3130      	adds	r1, #48	; 0x30
 8009412:	2d09      	cmp	r5, #9
 8009414:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009418:	f103 32ff 	add.w	r2, r3, #4294967295
 800941c:	4629      	mov	r1, r5
 800941e:	dc09      	bgt.n	8009434 <__exponent+0x4c>
 8009420:	3130      	adds	r1, #48	; 0x30
 8009422:	3b02      	subs	r3, #2
 8009424:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009428:	42bb      	cmp	r3, r7
 800942a:	4622      	mov	r2, r4
 800942c:	d304      	bcc.n	8009438 <__exponent+0x50>
 800942e:	1a10      	subs	r0, r2, r0
 8009430:	b003      	add	sp, #12
 8009432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009434:	4613      	mov	r3, r2
 8009436:	e7e7      	b.n	8009408 <__exponent+0x20>
 8009438:	f813 2b01 	ldrb.w	r2, [r3], #1
 800943c:	f804 2b01 	strb.w	r2, [r4], #1
 8009440:	e7f2      	b.n	8009428 <__exponent+0x40>
 8009442:	2330      	movs	r3, #48	; 0x30
 8009444:	4419      	add	r1, r3
 8009446:	7083      	strb	r3, [r0, #2]
 8009448:	1d02      	adds	r2, r0, #4
 800944a:	70c1      	strb	r1, [r0, #3]
 800944c:	e7ef      	b.n	800942e <__exponent+0x46>
	...

08009450 <_printf_float>:
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	b08d      	sub	sp, #52	; 0x34
 8009456:	460c      	mov	r4, r1
 8009458:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800945c:	4616      	mov	r6, r2
 800945e:	461f      	mov	r7, r3
 8009460:	4605      	mov	r5, r0
 8009462:	f003 f91f 	bl	800c6a4 <_localeconv_r>
 8009466:	6803      	ldr	r3, [r0, #0]
 8009468:	9304      	str	r3, [sp, #16]
 800946a:	4618      	mov	r0, r3
 800946c:	f7f6 fec8 	bl	8000200 <strlen>
 8009470:	2300      	movs	r3, #0
 8009472:	930a      	str	r3, [sp, #40]	; 0x28
 8009474:	f8d8 3000 	ldr.w	r3, [r8]
 8009478:	9005      	str	r0, [sp, #20]
 800947a:	3307      	adds	r3, #7
 800947c:	f023 0307 	bic.w	r3, r3, #7
 8009480:	f103 0208 	add.w	r2, r3, #8
 8009484:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009488:	f8d4 b000 	ldr.w	fp, [r4]
 800948c:	f8c8 2000 	str.w	r2, [r8]
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009498:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800949c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80094a0:	9307      	str	r3, [sp, #28]
 80094a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80094a6:	f04f 32ff 	mov.w	r2, #4294967295
 80094aa:	4ba7      	ldr	r3, [pc, #668]	; (8009748 <_printf_float+0x2f8>)
 80094ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094b0:	f7f7 fb54 	bl	8000b5c <__aeabi_dcmpun>
 80094b4:	bb70      	cbnz	r0, 8009514 <_printf_float+0xc4>
 80094b6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ba:	4ba3      	ldr	r3, [pc, #652]	; (8009748 <_printf_float+0x2f8>)
 80094bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094c0:	f7f7 fb2e 	bl	8000b20 <__aeabi_dcmple>
 80094c4:	bb30      	cbnz	r0, 8009514 <_printf_float+0xc4>
 80094c6:	2200      	movs	r2, #0
 80094c8:	2300      	movs	r3, #0
 80094ca:	4640      	mov	r0, r8
 80094cc:	4649      	mov	r1, r9
 80094ce:	f7f7 fb1d 	bl	8000b0c <__aeabi_dcmplt>
 80094d2:	b110      	cbz	r0, 80094da <_printf_float+0x8a>
 80094d4:	232d      	movs	r3, #45	; 0x2d
 80094d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094da:	4a9c      	ldr	r2, [pc, #624]	; (800974c <_printf_float+0x2fc>)
 80094dc:	4b9c      	ldr	r3, [pc, #624]	; (8009750 <_printf_float+0x300>)
 80094de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80094e2:	bf8c      	ite	hi
 80094e4:	4690      	movhi	r8, r2
 80094e6:	4698      	movls	r8, r3
 80094e8:	2303      	movs	r3, #3
 80094ea:	f02b 0204 	bic.w	r2, fp, #4
 80094ee:	6123      	str	r3, [r4, #16]
 80094f0:	6022      	str	r2, [r4, #0]
 80094f2:	f04f 0900 	mov.w	r9, #0
 80094f6:	9700      	str	r7, [sp, #0]
 80094f8:	4633      	mov	r3, r6
 80094fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80094fc:	4621      	mov	r1, r4
 80094fe:	4628      	mov	r0, r5
 8009500:	f000 f9e6 	bl	80098d0 <_printf_common>
 8009504:	3001      	adds	r0, #1
 8009506:	f040 808d 	bne.w	8009624 <_printf_float+0x1d4>
 800950a:	f04f 30ff 	mov.w	r0, #4294967295
 800950e:	b00d      	add	sp, #52	; 0x34
 8009510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009514:	4642      	mov	r2, r8
 8009516:	464b      	mov	r3, r9
 8009518:	4640      	mov	r0, r8
 800951a:	4649      	mov	r1, r9
 800951c:	f7f7 fb1e 	bl	8000b5c <__aeabi_dcmpun>
 8009520:	b110      	cbz	r0, 8009528 <_printf_float+0xd8>
 8009522:	4a8c      	ldr	r2, [pc, #560]	; (8009754 <_printf_float+0x304>)
 8009524:	4b8c      	ldr	r3, [pc, #560]	; (8009758 <_printf_float+0x308>)
 8009526:	e7da      	b.n	80094de <_printf_float+0x8e>
 8009528:	6861      	ldr	r1, [r4, #4]
 800952a:	1c4b      	adds	r3, r1, #1
 800952c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009530:	a80a      	add	r0, sp, #40	; 0x28
 8009532:	d13e      	bne.n	80095b2 <_printf_float+0x162>
 8009534:	2306      	movs	r3, #6
 8009536:	6063      	str	r3, [r4, #4]
 8009538:	2300      	movs	r3, #0
 800953a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800953e:	ab09      	add	r3, sp, #36	; 0x24
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	ec49 8b10 	vmov	d0, r8, r9
 8009546:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800954a:	6022      	str	r2, [r4, #0]
 800954c:	f8cd a004 	str.w	sl, [sp, #4]
 8009550:	6861      	ldr	r1, [r4, #4]
 8009552:	4628      	mov	r0, r5
 8009554:	f7ff fee7 	bl	8009326 <__cvt>
 8009558:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800955c:	2b47      	cmp	r3, #71	; 0x47
 800955e:	4680      	mov	r8, r0
 8009560:	d109      	bne.n	8009576 <_printf_float+0x126>
 8009562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009564:	1cd8      	adds	r0, r3, #3
 8009566:	db02      	blt.n	800956e <_printf_float+0x11e>
 8009568:	6862      	ldr	r2, [r4, #4]
 800956a:	4293      	cmp	r3, r2
 800956c:	dd47      	ble.n	80095fe <_printf_float+0x1ae>
 800956e:	f1aa 0a02 	sub.w	sl, sl, #2
 8009572:	fa5f fa8a 	uxtb.w	sl, sl
 8009576:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800957a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800957c:	d824      	bhi.n	80095c8 <_printf_float+0x178>
 800957e:	3901      	subs	r1, #1
 8009580:	4652      	mov	r2, sl
 8009582:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009586:	9109      	str	r1, [sp, #36]	; 0x24
 8009588:	f7ff ff2e 	bl	80093e8 <__exponent>
 800958c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800958e:	1813      	adds	r3, r2, r0
 8009590:	2a01      	cmp	r2, #1
 8009592:	4681      	mov	r9, r0
 8009594:	6123      	str	r3, [r4, #16]
 8009596:	dc02      	bgt.n	800959e <_printf_float+0x14e>
 8009598:	6822      	ldr	r2, [r4, #0]
 800959a:	07d1      	lsls	r1, r2, #31
 800959c:	d501      	bpl.n	80095a2 <_printf_float+0x152>
 800959e:	3301      	adds	r3, #1
 80095a0:	6123      	str	r3, [r4, #16]
 80095a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d0a5      	beq.n	80094f6 <_printf_float+0xa6>
 80095aa:	232d      	movs	r3, #45	; 0x2d
 80095ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095b0:	e7a1      	b.n	80094f6 <_printf_float+0xa6>
 80095b2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80095b6:	f000 8177 	beq.w	80098a8 <_printf_float+0x458>
 80095ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80095be:	d1bb      	bne.n	8009538 <_printf_float+0xe8>
 80095c0:	2900      	cmp	r1, #0
 80095c2:	d1b9      	bne.n	8009538 <_printf_float+0xe8>
 80095c4:	2301      	movs	r3, #1
 80095c6:	e7b6      	b.n	8009536 <_printf_float+0xe6>
 80095c8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80095cc:	d119      	bne.n	8009602 <_printf_float+0x1b2>
 80095ce:	2900      	cmp	r1, #0
 80095d0:	6863      	ldr	r3, [r4, #4]
 80095d2:	dd0c      	ble.n	80095ee <_printf_float+0x19e>
 80095d4:	6121      	str	r1, [r4, #16]
 80095d6:	b913      	cbnz	r3, 80095de <_printf_float+0x18e>
 80095d8:	6822      	ldr	r2, [r4, #0]
 80095da:	07d2      	lsls	r2, r2, #31
 80095dc:	d502      	bpl.n	80095e4 <_printf_float+0x194>
 80095de:	3301      	adds	r3, #1
 80095e0:	440b      	add	r3, r1
 80095e2:	6123      	str	r3, [r4, #16]
 80095e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e6:	65a3      	str	r3, [r4, #88]	; 0x58
 80095e8:	f04f 0900 	mov.w	r9, #0
 80095ec:	e7d9      	b.n	80095a2 <_printf_float+0x152>
 80095ee:	b913      	cbnz	r3, 80095f6 <_printf_float+0x1a6>
 80095f0:	6822      	ldr	r2, [r4, #0]
 80095f2:	07d0      	lsls	r0, r2, #31
 80095f4:	d501      	bpl.n	80095fa <_printf_float+0x1aa>
 80095f6:	3302      	adds	r3, #2
 80095f8:	e7f3      	b.n	80095e2 <_printf_float+0x192>
 80095fa:	2301      	movs	r3, #1
 80095fc:	e7f1      	b.n	80095e2 <_printf_float+0x192>
 80095fe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009602:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009606:	4293      	cmp	r3, r2
 8009608:	db05      	blt.n	8009616 <_printf_float+0x1c6>
 800960a:	6822      	ldr	r2, [r4, #0]
 800960c:	6123      	str	r3, [r4, #16]
 800960e:	07d1      	lsls	r1, r2, #31
 8009610:	d5e8      	bpl.n	80095e4 <_printf_float+0x194>
 8009612:	3301      	adds	r3, #1
 8009614:	e7e5      	b.n	80095e2 <_printf_float+0x192>
 8009616:	2b00      	cmp	r3, #0
 8009618:	bfd4      	ite	le
 800961a:	f1c3 0302 	rsble	r3, r3, #2
 800961e:	2301      	movgt	r3, #1
 8009620:	4413      	add	r3, r2
 8009622:	e7de      	b.n	80095e2 <_printf_float+0x192>
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	055a      	lsls	r2, r3, #21
 8009628:	d407      	bmi.n	800963a <_printf_float+0x1ea>
 800962a:	6923      	ldr	r3, [r4, #16]
 800962c:	4642      	mov	r2, r8
 800962e:	4631      	mov	r1, r6
 8009630:	4628      	mov	r0, r5
 8009632:	47b8      	blx	r7
 8009634:	3001      	adds	r0, #1
 8009636:	d12b      	bne.n	8009690 <_printf_float+0x240>
 8009638:	e767      	b.n	800950a <_printf_float+0xba>
 800963a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800963e:	f240 80dc 	bls.w	80097fa <_printf_float+0x3aa>
 8009642:	2200      	movs	r2, #0
 8009644:	2300      	movs	r3, #0
 8009646:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800964a:	f7f7 fa55 	bl	8000af8 <__aeabi_dcmpeq>
 800964e:	2800      	cmp	r0, #0
 8009650:	d033      	beq.n	80096ba <_printf_float+0x26a>
 8009652:	2301      	movs	r3, #1
 8009654:	4a41      	ldr	r2, [pc, #260]	; (800975c <_printf_float+0x30c>)
 8009656:	4631      	mov	r1, r6
 8009658:	4628      	mov	r0, r5
 800965a:	47b8      	blx	r7
 800965c:	3001      	adds	r0, #1
 800965e:	f43f af54 	beq.w	800950a <_printf_float+0xba>
 8009662:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009666:	429a      	cmp	r2, r3
 8009668:	db02      	blt.n	8009670 <_printf_float+0x220>
 800966a:	6823      	ldr	r3, [r4, #0]
 800966c:	07d8      	lsls	r0, r3, #31
 800966e:	d50f      	bpl.n	8009690 <_printf_float+0x240>
 8009670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009674:	4631      	mov	r1, r6
 8009676:	4628      	mov	r0, r5
 8009678:	47b8      	blx	r7
 800967a:	3001      	adds	r0, #1
 800967c:	f43f af45 	beq.w	800950a <_printf_float+0xba>
 8009680:	f04f 0800 	mov.w	r8, #0
 8009684:	f104 091a 	add.w	r9, r4, #26
 8009688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800968a:	3b01      	subs	r3, #1
 800968c:	4543      	cmp	r3, r8
 800968e:	dc09      	bgt.n	80096a4 <_printf_float+0x254>
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	079b      	lsls	r3, r3, #30
 8009694:	f100 8103 	bmi.w	800989e <_printf_float+0x44e>
 8009698:	68e0      	ldr	r0, [r4, #12]
 800969a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800969c:	4298      	cmp	r0, r3
 800969e:	bfb8      	it	lt
 80096a0:	4618      	movlt	r0, r3
 80096a2:	e734      	b.n	800950e <_printf_float+0xbe>
 80096a4:	2301      	movs	r3, #1
 80096a6:	464a      	mov	r2, r9
 80096a8:	4631      	mov	r1, r6
 80096aa:	4628      	mov	r0, r5
 80096ac:	47b8      	blx	r7
 80096ae:	3001      	adds	r0, #1
 80096b0:	f43f af2b 	beq.w	800950a <_printf_float+0xba>
 80096b4:	f108 0801 	add.w	r8, r8, #1
 80096b8:	e7e6      	b.n	8009688 <_printf_float+0x238>
 80096ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096bc:	2b00      	cmp	r3, #0
 80096be:	dc2b      	bgt.n	8009718 <_printf_float+0x2c8>
 80096c0:	2301      	movs	r3, #1
 80096c2:	4a26      	ldr	r2, [pc, #152]	; (800975c <_printf_float+0x30c>)
 80096c4:	4631      	mov	r1, r6
 80096c6:	4628      	mov	r0, r5
 80096c8:	47b8      	blx	r7
 80096ca:	3001      	adds	r0, #1
 80096cc:	f43f af1d 	beq.w	800950a <_printf_float+0xba>
 80096d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d2:	b923      	cbnz	r3, 80096de <_printf_float+0x28e>
 80096d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096d6:	b913      	cbnz	r3, 80096de <_printf_float+0x28e>
 80096d8:	6823      	ldr	r3, [r4, #0]
 80096da:	07d9      	lsls	r1, r3, #31
 80096dc:	d5d8      	bpl.n	8009690 <_printf_float+0x240>
 80096de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096e2:	4631      	mov	r1, r6
 80096e4:	4628      	mov	r0, r5
 80096e6:	47b8      	blx	r7
 80096e8:	3001      	adds	r0, #1
 80096ea:	f43f af0e 	beq.w	800950a <_printf_float+0xba>
 80096ee:	f04f 0900 	mov.w	r9, #0
 80096f2:	f104 0a1a 	add.w	sl, r4, #26
 80096f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096f8:	425b      	negs	r3, r3
 80096fa:	454b      	cmp	r3, r9
 80096fc:	dc01      	bgt.n	8009702 <_printf_float+0x2b2>
 80096fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009700:	e794      	b.n	800962c <_printf_float+0x1dc>
 8009702:	2301      	movs	r3, #1
 8009704:	4652      	mov	r2, sl
 8009706:	4631      	mov	r1, r6
 8009708:	4628      	mov	r0, r5
 800970a:	47b8      	blx	r7
 800970c:	3001      	adds	r0, #1
 800970e:	f43f aefc 	beq.w	800950a <_printf_float+0xba>
 8009712:	f109 0901 	add.w	r9, r9, #1
 8009716:	e7ee      	b.n	80096f6 <_printf_float+0x2a6>
 8009718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800971a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800971c:	429a      	cmp	r2, r3
 800971e:	bfa8      	it	ge
 8009720:	461a      	movge	r2, r3
 8009722:	2a00      	cmp	r2, #0
 8009724:	4691      	mov	r9, r2
 8009726:	dd07      	ble.n	8009738 <_printf_float+0x2e8>
 8009728:	4613      	mov	r3, r2
 800972a:	4631      	mov	r1, r6
 800972c:	4642      	mov	r2, r8
 800972e:	4628      	mov	r0, r5
 8009730:	47b8      	blx	r7
 8009732:	3001      	adds	r0, #1
 8009734:	f43f aee9 	beq.w	800950a <_printf_float+0xba>
 8009738:	f104 031a 	add.w	r3, r4, #26
 800973c:	f04f 0b00 	mov.w	fp, #0
 8009740:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009744:	9306      	str	r3, [sp, #24]
 8009746:	e015      	b.n	8009774 <_printf_float+0x324>
 8009748:	7fefffff 	.word	0x7fefffff
 800974c:	0800dccc 	.word	0x0800dccc
 8009750:	0800dcc8 	.word	0x0800dcc8
 8009754:	0800dcd4 	.word	0x0800dcd4
 8009758:	0800dcd0 	.word	0x0800dcd0
 800975c:	0800dcd8 	.word	0x0800dcd8
 8009760:	2301      	movs	r3, #1
 8009762:	9a06      	ldr	r2, [sp, #24]
 8009764:	4631      	mov	r1, r6
 8009766:	4628      	mov	r0, r5
 8009768:	47b8      	blx	r7
 800976a:	3001      	adds	r0, #1
 800976c:	f43f aecd 	beq.w	800950a <_printf_float+0xba>
 8009770:	f10b 0b01 	add.w	fp, fp, #1
 8009774:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009778:	ebaa 0309 	sub.w	r3, sl, r9
 800977c:	455b      	cmp	r3, fp
 800977e:	dcef      	bgt.n	8009760 <_printf_float+0x310>
 8009780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009784:	429a      	cmp	r2, r3
 8009786:	44d0      	add	r8, sl
 8009788:	db15      	blt.n	80097b6 <_printf_float+0x366>
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	07da      	lsls	r2, r3, #31
 800978e:	d412      	bmi.n	80097b6 <_printf_float+0x366>
 8009790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009792:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009794:	eba3 020a 	sub.w	r2, r3, sl
 8009798:	eba3 0a01 	sub.w	sl, r3, r1
 800979c:	4592      	cmp	sl, r2
 800979e:	bfa8      	it	ge
 80097a0:	4692      	movge	sl, r2
 80097a2:	f1ba 0f00 	cmp.w	sl, #0
 80097a6:	dc0e      	bgt.n	80097c6 <_printf_float+0x376>
 80097a8:	f04f 0800 	mov.w	r8, #0
 80097ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097b0:	f104 091a 	add.w	r9, r4, #26
 80097b4:	e019      	b.n	80097ea <_printf_float+0x39a>
 80097b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097ba:	4631      	mov	r1, r6
 80097bc:	4628      	mov	r0, r5
 80097be:	47b8      	blx	r7
 80097c0:	3001      	adds	r0, #1
 80097c2:	d1e5      	bne.n	8009790 <_printf_float+0x340>
 80097c4:	e6a1      	b.n	800950a <_printf_float+0xba>
 80097c6:	4653      	mov	r3, sl
 80097c8:	4642      	mov	r2, r8
 80097ca:	4631      	mov	r1, r6
 80097cc:	4628      	mov	r0, r5
 80097ce:	47b8      	blx	r7
 80097d0:	3001      	adds	r0, #1
 80097d2:	d1e9      	bne.n	80097a8 <_printf_float+0x358>
 80097d4:	e699      	b.n	800950a <_printf_float+0xba>
 80097d6:	2301      	movs	r3, #1
 80097d8:	464a      	mov	r2, r9
 80097da:	4631      	mov	r1, r6
 80097dc:	4628      	mov	r0, r5
 80097de:	47b8      	blx	r7
 80097e0:	3001      	adds	r0, #1
 80097e2:	f43f ae92 	beq.w	800950a <_printf_float+0xba>
 80097e6:	f108 0801 	add.w	r8, r8, #1
 80097ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097ee:	1a9b      	subs	r3, r3, r2
 80097f0:	eba3 030a 	sub.w	r3, r3, sl
 80097f4:	4543      	cmp	r3, r8
 80097f6:	dcee      	bgt.n	80097d6 <_printf_float+0x386>
 80097f8:	e74a      	b.n	8009690 <_printf_float+0x240>
 80097fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097fc:	2a01      	cmp	r2, #1
 80097fe:	dc01      	bgt.n	8009804 <_printf_float+0x3b4>
 8009800:	07db      	lsls	r3, r3, #31
 8009802:	d53a      	bpl.n	800987a <_printf_float+0x42a>
 8009804:	2301      	movs	r3, #1
 8009806:	4642      	mov	r2, r8
 8009808:	4631      	mov	r1, r6
 800980a:	4628      	mov	r0, r5
 800980c:	47b8      	blx	r7
 800980e:	3001      	adds	r0, #1
 8009810:	f43f ae7b 	beq.w	800950a <_printf_float+0xba>
 8009814:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009818:	4631      	mov	r1, r6
 800981a:	4628      	mov	r0, r5
 800981c:	47b8      	blx	r7
 800981e:	3001      	adds	r0, #1
 8009820:	f108 0801 	add.w	r8, r8, #1
 8009824:	f43f ae71 	beq.w	800950a <_printf_float+0xba>
 8009828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800982a:	2200      	movs	r2, #0
 800982c:	f103 3aff 	add.w	sl, r3, #4294967295
 8009830:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009834:	2300      	movs	r3, #0
 8009836:	f7f7 f95f 	bl	8000af8 <__aeabi_dcmpeq>
 800983a:	b9c8      	cbnz	r0, 8009870 <_printf_float+0x420>
 800983c:	4653      	mov	r3, sl
 800983e:	4642      	mov	r2, r8
 8009840:	4631      	mov	r1, r6
 8009842:	4628      	mov	r0, r5
 8009844:	47b8      	blx	r7
 8009846:	3001      	adds	r0, #1
 8009848:	d10e      	bne.n	8009868 <_printf_float+0x418>
 800984a:	e65e      	b.n	800950a <_printf_float+0xba>
 800984c:	2301      	movs	r3, #1
 800984e:	4652      	mov	r2, sl
 8009850:	4631      	mov	r1, r6
 8009852:	4628      	mov	r0, r5
 8009854:	47b8      	blx	r7
 8009856:	3001      	adds	r0, #1
 8009858:	f43f ae57 	beq.w	800950a <_printf_float+0xba>
 800985c:	f108 0801 	add.w	r8, r8, #1
 8009860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009862:	3b01      	subs	r3, #1
 8009864:	4543      	cmp	r3, r8
 8009866:	dcf1      	bgt.n	800984c <_printf_float+0x3fc>
 8009868:	464b      	mov	r3, r9
 800986a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800986e:	e6de      	b.n	800962e <_printf_float+0x1de>
 8009870:	f04f 0800 	mov.w	r8, #0
 8009874:	f104 0a1a 	add.w	sl, r4, #26
 8009878:	e7f2      	b.n	8009860 <_printf_float+0x410>
 800987a:	2301      	movs	r3, #1
 800987c:	e7df      	b.n	800983e <_printf_float+0x3ee>
 800987e:	2301      	movs	r3, #1
 8009880:	464a      	mov	r2, r9
 8009882:	4631      	mov	r1, r6
 8009884:	4628      	mov	r0, r5
 8009886:	47b8      	blx	r7
 8009888:	3001      	adds	r0, #1
 800988a:	f43f ae3e 	beq.w	800950a <_printf_float+0xba>
 800988e:	f108 0801 	add.w	r8, r8, #1
 8009892:	68e3      	ldr	r3, [r4, #12]
 8009894:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009896:	1a9b      	subs	r3, r3, r2
 8009898:	4543      	cmp	r3, r8
 800989a:	dcf0      	bgt.n	800987e <_printf_float+0x42e>
 800989c:	e6fc      	b.n	8009698 <_printf_float+0x248>
 800989e:	f04f 0800 	mov.w	r8, #0
 80098a2:	f104 0919 	add.w	r9, r4, #25
 80098a6:	e7f4      	b.n	8009892 <_printf_float+0x442>
 80098a8:	2900      	cmp	r1, #0
 80098aa:	f43f ae8b 	beq.w	80095c4 <_printf_float+0x174>
 80098ae:	2300      	movs	r3, #0
 80098b0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80098b4:	ab09      	add	r3, sp, #36	; 0x24
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	ec49 8b10 	vmov	d0, r8, r9
 80098bc:	6022      	str	r2, [r4, #0]
 80098be:	f8cd a004 	str.w	sl, [sp, #4]
 80098c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098c6:	4628      	mov	r0, r5
 80098c8:	f7ff fd2d 	bl	8009326 <__cvt>
 80098cc:	4680      	mov	r8, r0
 80098ce:	e648      	b.n	8009562 <_printf_float+0x112>

080098d0 <_printf_common>:
 80098d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d4:	4691      	mov	r9, r2
 80098d6:	461f      	mov	r7, r3
 80098d8:	688a      	ldr	r2, [r1, #8]
 80098da:	690b      	ldr	r3, [r1, #16]
 80098dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098e0:	4293      	cmp	r3, r2
 80098e2:	bfb8      	it	lt
 80098e4:	4613      	movlt	r3, r2
 80098e6:	f8c9 3000 	str.w	r3, [r9]
 80098ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098ee:	4606      	mov	r6, r0
 80098f0:	460c      	mov	r4, r1
 80098f2:	b112      	cbz	r2, 80098fa <_printf_common+0x2a>
 80098f4:	3301      	adds	r3, #1
 80098f6:	f8c9 3000 	str.w	r3, [r9]
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	0699      	lsls	r1, r3, #26
 80098fe:	bf42      	ittt	mi
 8009900:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009904:	3302      	addmi	r3, #2
 8009906:	f8c9 3000 	strmi.w	r3, [r9]
 800990a:	6825      	ldr	r5, [r4, #0]
 800990c:	f015 0506 	ands.w	r5, r5, #6
 8009910:	d107      	bne.n	8009922 <_printf_common+0x52>
 8009912:	f104 0a19 	add.w	sl, r4, #25
 8009916:	68e3      	ldr	r3, [r4, #12]
 8009918:	f8d9 2000 	ldr.w	r2, [r9]
 800991c:	1a9b      	subs	r3, r3, r2
 800991e:	42ab      	cmp	r3, r5
 8009920:	dc28      	bgt.n	8009974 <_printf_common+0xa4>
 8009922:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009926:	6822      	ldr	r2, [r4, #0]
 8009928:	3300      	adds	r3, #0
 800992a:	bf18      	it	ne
 800992c:	2301      	movne	r3, #1
 800992e:	0692      	lsls	r2, r2, #26
 8009930:	d42d      	bmi.n	800998e <_printf_common+0xbe>
 8009932:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009936:	4639      	mov	r1, r7
 8009938:	4630      	mov	r0, r6
 800993a:	47c0      	blx	r8
 800993c:	3001      	adds	r0, #1
 800993e:	d020      	beq.n	8009982 <_printf_common+0xb2>
 8009940:	6823      	ldr	r3, [r4, #0]
 8009942:	68e5      	ldr	r5, [r4, #12]
 8009944:	f8d9 2000 	ldr.w	r2, [r9]
 8009948:	f003 0306 	and.w	r3, r3, #6
 800994c:	2b04      	cmp	r3, #4
 800994e:	bf08      	it	eq
 8009950:	1aad      	subeq	r5, r5, r2
 8009952:	68a3      	ldr	r3, [r4, #8]
 8009954:	6922      	ldr	r2, [r4, #16]
 8009956:	bf0c      	ite	eq
 8009958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800995c:	2500      	movne	r5, #0
 800995e:	4293      	cmp	r3, r2
 8009960:	bfc4      	itt	gt
 8009962:	1a9b      	subgt	r3, r3, r2
 8009964:	18ed      	addgt	r5, r5, r3
 8009966:	f04f 0900 	mov.w	r9, #0
 800996a:	341a      	adds	r4, #26
 800996c:	454d      	cmp	r5, r9
 800996e:	d11a      	bne.n	80099a6 <_printf_common+0xd6>
 8009970:	2000      	movs	r0, #0
 8009972:	e008      	b.n	8009986 <_printf_common+0xb6>
 8009974:	2301      	movs	r3, #1
 8009976:	4652      	mov	r2, sl
 8009978:	4639      	mov	r1, r7
 800997a:	4630      	mov	r0, r6
 800997c:	47c0      	blx	r8
 800997e:	3001      	adds	r0, #1
 8009980:	d103      	bne.n	800998a <_printf_common+0xba>
 8009982:	f04f 30ff 	mov.w	r0, #4294967295
 8009986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800998a:	3501      	adds	r5, #1
 800998c:	e7c3      	b.n	8009916 <_printf_common+0x46>
 800998e:	18e1      	adds	r1, r4, r3
 8009990:	1c5a      	adds	r2, r3, #1
 8009992:	2030      	movs	r0, #48	; 0x30
 8009994:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009998:	4422      	add	r2, r4
 800999a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800999e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099a2:	3302      	adds	r3, #2
 80099a4:	e7c5      	b.n	8009932 <_printf_common+0x62>
 80099a6:	2301      	movs	r3, #1
 80099a8:	4622      	mov	r2, r4
 80099aa:	4639      	mov	r1, r7
 80099ac:	4630      	mov	r0, r6
 80099ae:	47c0      	blx	r8
 80099b0:	3001      	adds	r0, #1
 80099b2:	d0e6      	beq.n	8009982 <_printf_common+0xb2>
 80099b4:	f109 0901 	add.w	r9, r9, #1
 80099b8:	e7d8      	b.n	800996c <_printf_common+0x9c>
	...

080099bc <_printf_i>:
 80099bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80099c4:	460c      	mov	r4, r1
 80099c6:	7e09      	ldrb	r1, [r1, #24]
 80099c8:	b085      	sub	sp, #20
 80099ca:	296e      	cmp	r1, #110	; 0x6e
 80099cc:	4617      	mov	r7, r2
 80099ce:	4606      	mov	r6, r0
 80099d0:	4698      	mov	r8, r3
 80099d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099d4:	f000 80b3 	beq.w	8009b3e <_printf_i+0x182>
 80099d8:	d822      	bhi.n	8009a20 <_printf_i+0x64>
 80099da:	2963      	cmp	r1, #99	; 0x63
 80099dc:	d036      	beq.n	8009a4c <_printf_i+0x90>
 80099de:	d80a      	bhi.n	80099f6 <_printf_i+0x3a>
 80099e0:	2900      	cmp	r1, #0
 80099e2:	f000 80b9 	beq.w	8009b58 <_printf_i+0x19c>
 80099e6:	2958      	cmp	r1, #88	; 0x58
 80099e8:	f000 8083 	beq.w	8009af2 <_printf_i+0x136>
 80099ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80099f4:	e032      	b.n	8009a5c <_printf_i+0xa0>
 80099f6:	2964      	cmp	r1, #100	; 0x64
 80099f8:	d001      	beq.n	80099fe <_printf_i+0x42>
 80099fa:	2969      	cmp	r1, #105	; 0x69
 80099fc:	d1f6      	bne.n	80099ec <_printf_i+0x30>
 80099fe:	6820      	ldr	r0, [r4, #0]
 8009a00:	6813      	ldr	r3, [r2, #0]
 8009a02:	0605      	lsls	r5, r0, #24
 8009a04:	f103 0104 	add.w	r1, r3, #4
 8009a08:	d52a      	bpl.n	8009a60 <_printf_i+0xa4>
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6011      	str	r1, [r2, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	da03      	bge.n	8009a1a <_printf_i+0x5e>
 8009a12:	222d      	movs	r2, #45	; 0x2d
 8009a14:	425b      	negs	r3, r3
 8009a16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009a1a:	486f      	ldr	r0, [pc, #444]	; (8009bd8 <_printf_i+0x21c>)
 8009a1c:	220a      	movs	r2, #10
 8009a1e:	e039      	b.n	8009a94 <_printf_i+0xd8>
 8009a20:	2973      	cmp	r1, #115	; 0x73
 8009a22:	f000 809d 	beq.w	8009b60 <_printf_i+0x1a4>
 8009a26:	d808      	bhi.n	8009a3a <_printf_i+0x7e>
 8009a28:	296f      	cmp	r1, #111	; 0x6f
 8009a2a:	d020      	beq.n	8009a6e <_printf_i+0xb2>
 8009a2c:	2970      	cmp	r1, #112	; 0x70
 8009a2e:	d1dd      	bne.n	80099ec <_printf_i+0x30>
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	f043 0320 	orr.w	r3, r3, #32
 8009a36:	6023      	str	r3, [r4, #0]
 8009a38:	e003      	b.n	8009a42 <_printf_i+0x86>
 8009a3a:	2975      	cmp	r1, #117	; 0x75
 8009a3c:	d017      	beq.n	8009a6e <_printf_i+0xb2>
 8009a3e:	2978      	cmp	r1, #120	; 0x78
 8009a40:	d1d4      	bne.n	80099ec <_printf_i+0x30>
 8009a42:	2378      	movs	r3, #120	; 0x78
 8009a44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a48:	4864      	ldr	r0, [pc, #400]	; (8009bdc <_printf_i+0x220>)
 8009a4a:	e055      	b.n	8009af8 <_printf_i+0x13c>
 8009a4c:	6813      	ldr	r3, [r2, #0]
 8009a4e:	1d19      	adds	r1, r3, #4
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	6011      	str	r1, [r2, #0]
 8009a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e08c      	b.n	8009b7a <_printf_i+0x1be>
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	6011      	str	r1, [r2, #0]
 8009a64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a68:	bf18      	it	ne
 8009a6a:	b21b      	sxthne	r3, r3
 8009a6c:	e7cf      	b.n	8009a0e <_printf_i+0x52>
 8009a6e:	6813      	ldr	r3, [r2, #0]
 8009a70:	6825      	ldr	r5, [r4, #0]
 8009a72:	1d18      	adds	r0, r3, #4
 8009a74:	6010      	str	r0, [r2, #0]
 8009a76:	0628      	lsls	r0, r5, #24
 8009a78:	d501      	bpl.n	8009a7e <_printf_i+0xc2>
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	e002      	b.n	8009a84 <_printf_i+0xc8>
 8009a7e:	0668      	lsls	r0, r5, #25
 8009a80:	d5fb      	bpl.n	8009a7a <_printf_i+0xbe>
 8009a82:	881b      	ldrh	r3, [r3, #0]
 8009a84:	4854      	ldr	r0, [pc, #336]	; (8009bd8 <_printf_i+0x21c>)
 8009a86:	296f      	cmp	r1, #111	; 0x6f
 8009a88:	bf14      	ite	ne
 8009a8a:	220a      	movne	r2, #10
 8009a8c:	2208      	moveq	r2, #8
 8009a8e:	2100      	movs	r1, #0
 8009a90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a94:	6865      	ldr	r5, [r4, #4]
 8009a96:	60a5      	str	r5, [r4, #8]
 8009a98:	2d00      	cmp	r5, #0
 8009a9a:	f2c0 8095 	blt.w	8009bc8 <_printf_i+0x20c>
 8009a9e:	6821      	ldr	r1, [r4, #0]
 8009aa0:	f021 0104 	bic.w	r1, r1, #4
 8009aa4:	6021      	str	r1, [r4, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d13d      	bne.n	8009b26 <_printf_i+0x16a>
 8009aaa:	2d00      	cmp	r5, #0
 8009aac:	f040 808e 	bne.w	8009bcc <_printf_i+0x210>
 8009ab0:	4665      	mov	r5, ip
 8009ab2:	2a08      	cmp	r2, #8
 8009ab4:	d10b      	bne.n	8009ace <_printf_i+0x112>
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	07db      	lsls	r3, r3, #31
 8009aba:	d508      	bpl.n	8009ace <_printf_i+0x112>
 8009abc:	6923      	ldr	r3, [r4, #16]
 8009abe:	6862      	ldr	r2, [r4, #4]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	bfde      	ittt	le
 8009ac4:	2330      	movle	r3, #48	; 0x30
 8009ac6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009aca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ace:	ebac 0305 	sub.w	r3, ip, r5
 8009ad2:	6123      	str	r3, [r4, #16]
 8009ad4:	f8cd 8000 	str.w	r8, [sp]
 8009ad8:	463b      	mov	r3, r7
 8009ada:	aa03      	add	r2, sp, #12
 8009adc:	4621      	mov	r1, r4
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f7ff fef6 	bl	80098d0 <_printf_common>
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	d14d      	bne.n	8009b84 <_printf_i+0x1c8>
 8009ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aec:	b005      	add	sp, #20
 8009aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009af2:	4839      	ldr	r0, [pc, #228]	; (8009bd8 <_printf_i+0x21c>)
 8009af4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009af8:	6813      	ldr	r3, [r2, #0]
 8009afa:	6821      	ldr	r1, [r4, #0]
 8009afc:	1d1d      	adds	r5, r3, #4
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6015      	str	r5, [r2, #0]
 8009b02:	060a      	lsls	r2, r1, #24
 8009b04:	d50b      	bpl.n	8009b1e <_printf_i+0x162>
 8009b06:	07ca      	lsls	r2, r1, #31
 8009b08:	bf44      	itt	mi
 8009b0a:	f041 0120 	orrmi.w	r1, r1, #32
 8009b0e:	6021      	strmi	r1, [r4, #0]
 8009b10:	b91b      	cbnz	r3, 8009b1a <_printf_i+0x15e>
 8009b12:	6822      	ldr	r2, [r4, #0]
 8009b14:	f022 0220 	bic.w	r2, r2, #32
 8009b18:	6022      	str	r2, [r4, #0]
 8009b1a:	2210      	movs	r2, #16
 8009b1c:	e7b7      	b.n	8009a8e <_printf_i+0xd2>
 8009b1e:	064d      	lsls	r5, r1, #25
 8009b20:	bf48      	it	mi
 8009b22:	b29b      	uxthmi	r3, r3
 8009b24:	e7ef      	b.n	8009b06 <_printf_i+0x14a>
 8009b26:	4665      	mov	r5, ip
 8009b28:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b2c:	fb02 3311 	mls	r3, r2, r1, r3
 8009b30:	5cc3      	ldrb	r3, [r0, r3]
 8009b32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009b36:	460b      	mov	r3, r1
 8009b38:	2900      	cmp	r1, #0
 8009b3a:	d1f5      	bne.n	8009b28 <_printf_i+0x16c>
 8009b3c:	e7b9      	b.n	8009ab2 <_printf_i+0xf6>
 8009b3e:	6813      	ldr	r3, [r2, #0]
 8009b40:	6825      	ldr	r5, [r4, #0]
 8009b42:	6961      	ldr	r1, [r4, #20]
 8009b44:	1d18      	adds	r0, r3, #4
 8009b46:	6010      	str	r0, [r2, #0]
 8009b48:	0628      	lsls	r0, r5, #24
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	d501      	bpl.n	8009b52 <_printf_i+0x196>
 8009b4e:	6019      	str	r1, [r3, #0]
 8009b50:	e002      	b.n	8009b58 <_printf_i+0x19c>
 8009b52:	066a      	lsls	r2, r5, #25
 8009b54:	d5fb      	bpl.n	8009b4e <_printf_i+0x192>
 8009b56:	8019      	strh	r1, [r3, #0]
 8009b58:	2300      	movs	r3, #0
 8009b5a:	6123      	str	r3, [r4, #16]
 8009b5c:	4665      	mov	r5, ip
 8009b5e:	e7b9      	b.n	8009ad4 <_printf_i+0x118>
 8009b60:	6813      	ldr	r3, [r2, #0]
 8009b62:	1d19      	adds	r1, r3, #4
 8009b64:	6011      	str	r1, [r2, #0]
 8009b66:	681d      	ldr	r5, [r3, #0]
 8009b68:	6862      	ldr	r2, [r4, #4]
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	f7f6 fb4f 	bl	8000210 <memchr>
 8009b72:	b108      	cbz	r0, 8009b78 <_printf_i+0x1bc>
 8009b74:	1b40      	subs	r0, r0, r5
 8009b76:	6060      	str	r0, [r4, #4]
 8009b78:	6863      	ldr	r3, [r4, #4]
 8009b7a:	6123      	str	r3, [r4, #16]
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b82:	e7a7      	b.n	8009ad4 <_printf_i+0x118>
 8009b84:	6923      	ldr	r3, [r4, #16]
 8009b86:	462a      	mov	r2, r5
 8009b88:	4639      	mov	r1, r7
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	47c0      	blx	r8
 8009b8e:	3001      	adds	r0, #1
 8009b90:	d0aa      	beq.n	8009ae8 <_printf_i+0x12c>
 8009b92:	6823      	ldr	r3, [r4, #0]
 8009b94:	079b      	lsls	r3, r3, #30
 8009b96:	d413      	bmi.n	8009bc0 <_printf_i+0x204>
 8009b98:	68e0      	ldr	r0, [r4, #12]
 8009b9a:	9b03      	ldr	r3, [sp, #12]
 8009b9c:	4298      	cmp	r0, r3
 8009b9e:	bfb8      	it	lt
 8009ba0:	4618      	movlt	r0, r3
 8009ba2:	e7a3      	b.n	8009aec <_printf_i+0x130>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	464a      	mov	r2, r9
 8009ba8:	4639      	mov	r1, r7
 8009baa:	4630      	mov	r0, r6
 8009bac:	47c0      	blx	r8
 8009bae:	3001      	adds	r0, #1
 8009bb0:	d09a      	beq.n	8009ae8 <_printf_i+0x12c>
 8009bb2:	3501      	adds	r5, #1
 8009bb4:	68e3      	ldr	r3, [r4, #12]
 8009bb6:	9a03      	ldr	r2, [sp, #12]
 8009bb8:	1a9b      	subs	r3, r3, r2
 8009bba:	42ab      	cmp	r3, r5
 8009bbc:	dcf2      	bgt.n	8009ba4 <_printf_i+0x1e8>
 8009bbe:	e7eb      	b.n	8009b98 <_printf_i+0x1dc>
 8009bc0:	2500      	movs	r5, #0
 8009bc2:	f104 0919 	add.w	r9, r4, #25
 8009bc6:	e7f5      	b.n	8009bb4 <_printf_i+0x1f8>
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1ac      	bne.n	8009b26 <_printf_i+0x16a>
 8009bcc:	7803      	ldrb	r3, [r0, #0]
 8009bce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bd6:	e76c      	b.n	8009ab2 <_printf_i+0xf6>
 8009bd8:	0800dcda 	.word	0x0800dcda
 8009bdc:	0800dceb 	.word	0x0800dceb

08009be0 <_scanf_float>:
 8009be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	469a      	mov	sl, r3
 8009be6:	688b      	ldr	r3, [r1, #8]
 8009be8:	4616      	mov	r6, r2
 8009bea:	1e5a      	subs	r2, r3, #1
 8009bec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009bf0:	b087      	sub	sp, #28
 8009bf2:	bf83      	ittte	hi
 8009bf4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8009bf8:	189b      	addhi	r3, r3, r2
 8009bfa:	9301      	strhi	r3, [sp, #4]
 8009bfc:	2300      	movls	r3, #0
 8009bfe:	bf86      	itte	hi
 8009c00:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009c04:	608b      	strhi	r3, [r1, #8]
 8009c06:	9301      	strls	r3, [sp, #4]
 8009c08:	680b      	ldr	r3, [r1, #0]
 8009c0a:	4688      	mov	r8, r1
 8009c0c:	f04f 0b00 	mov.w	fp, #0
 8009c10:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009c14:	f848 3b1c 	str.w	r3, [r8], #28
 8009c18:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8009c1c:	4607      	mov	r7, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	4645      	mov	r5, r8
 8009c22:	465a      	mov	r2, fp
 8009c24:	46d9      	mov	r9, fp
 8009c26:	f8cd b008 	str.w	fp, [sp, #8]
 8009c2a:	68a1      	ldr	r1, [r4, #8]
 8009c2c:	b181      	cbz	r1, 8009c50 <_scanf_float+0x70>
 8009c2e:	6833      	ldr	r3, [r6, #0]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	2b49      	cmp	r3, #73	; 0x49
 8009c34:	d071      	beq.n	8009d1a <_scanf_float+0x13a>
 8009c36:	d84d      	bhi.n	8009cd4 <_scanf_float+0xf4>
 8009c38:	2b39      	cmp	r3, #57	; 0x39
 8009c3a:	d840      	bhi.n	8009cbe <_scanf_float+0xde>
 8009c3c:	2b31      	cmp	r3, #49	; 0x31
 8009c3e:	f080 8088 	bcs.w	8009d52 <_scanf_float+0x172>
 8009c42:	2b2d      	cmp	r3, #45	; 0x2d
 8009c44:	f000 8090 	beq.w	8009d68 <_scanf_float+0x188>
 8009c48:	d815      	bhi.n	8009c76 <_scanf_float+0x96>
 8009c4a:	2b2b      	cmp	r3, #43	; 0x2b
 8009c4c:	f000 808c 	beq.w	8009d68 <_scanf_float+0x188>
 8009c50:	f1b9 0f00 	cmp.w	r9, #0
 8009c54:	d003      	beq.n	8009c5e <_scanf_float+0x7e>
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	3a01      	subs	r2, #1
 8009c60:	2a01      	cmp	r2, #1
 8009c62:	f200 80ea 	bhi.w	8009e3a <_scanf_float+0x25a>
 8009c66:	4545      	cmp	r5, r8
 8009c68:	f200 80dc 	bhi.w	8009e24 <_scanf_float+0x244>
 8009c6c:	2601      	movs	r6, #1
 8009c6e:	4630      	mov	r0, r6
 8009c70:	b007      	add	sp, #28
 8009c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c76:	2b2e      	cmp	r3, #46	; 0x2e
 8009c78:	f000 809f 	beq.w	8009dba <_scanf_float+0x1da>
 8009c7c:	2b30      	cmp	r3, #48	; 0x30
 8009c7e:	d1e7      	bne.n	8009c50 <_scanf_float+0x70>
 8009c80:	6820      	ldr	r0, [r4, #0]
 8009c82:	f410 7f80 	tst.w	r0, #256	; 0x100
 8009c86:	d064      	beq.n	8009d52 <_scanf_float+0x172>
 8009c88:	9b01      	ldr	r3, [sp, #4]
 8009c8a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8009c8e:	6020      	str	r0, [r4, #0]
 8009c90:	f109 0901 	add.w	r9, r9, #1
 8009c94:	b11b      	cbz	r3, 8009c9e <_scanf_float+0xbe>
 8009c96:	3b01      	subs	r3, #1
 8009c98:	3101      	adds	r1, #1
 8009c9a:	9301      	str	r3, [sp, #4]
 8009c9c:	60a1      	str	r1, [r4, #8]
 8009c9e:	68a3      	ldr	r3, [r4, #8]
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	60a3      	str	r3, [r4, #8]
 8009ca4:	6923      	ldr	r3, [r4, #16]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	6123      	str	r3, [r4, #16]
 8009caa:	6873      	ldr	r3, [r6, #4]
 8009cac:	3b01      	subs	r3, #1
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	6073      	str	r3, [r6, #4]
 8009cb2:	f340 80ac 	ble.w	8009e0e <_scanf_float+0x22e>
 8009cb6:	6833      	ldr	r3, [r6, #0]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	6033      	str	r3, [r6, #0]
 8009cbc:	e7b5      	b.n	8009c2a <_scanf_float+0x4a>
 8009cbe:	2b45      	cmp	r3, #69	; 0x45
 8009cc0:	f000 8085 	beq.w	8009dce <_scanf_float+0x1ee>
 8009cc4:	2b46      	cmp	r3, #70	; 0x46
 8009cc6:	d06a      	beq.n	8009d9e <_scanf_float+0x1be>
 8009cc8:	2b41      	cmp	r3, #65	; 0x41
 8009cca:	d1c1      	bne.n	8009c50 <_scanf_float+0x70>
 8009ccc:	2a01      	cmp	r2, #1
 8009cce:	d1bf      	bne.n	8009c50 <_scanf_float+0x70>
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	e046      	b.n	8009d62 <_scanf_float+0x182>
 8009cd4:	2b65      	cmp	r3, #101	; 0x65
 8009cd6:	d07a      	beq.n	8009dce <_scanf_float+0x1ee>
 8009cd8:	d818      	bhi.n	8009d0c <_scanf_float+0x12c>
 8009cda:	2b54      	cmp	r3, #84	; 0x54
 8009cdc:	d066      	beq.n	8009dac <_scanf_float+0x1cc>
 8009cde:	d811      	bhi.n	8009d04 <_scanf_float+0x124>
 8009ce0:	2b4e      	cmp	r3, #78	; 0x4e
 8009ce2:	d1b5      	bne.n	8009c50 <_scanf_float+0x70>
 8009ce4:	2a00      	cmp	r2, #0
 8009ce6:	d146      	bne.n	8009d76 <_scanf_float+0x196>
 8009ce8:	f1b9 0f00 	cmp.w	r9, #0
 8009cec:	d145      	bne.n	8009d7a <_scanf_float+0x19a>
 8009cee:	6821      	ldr	r1, [r4, #0]
 8009cf0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009cf4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009cf8:	d13f      	bne.n	8009d7a <_scanf_float+0x19a>
 8009cfa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009cfe:	6021      	str	r1, [r4, #0]
 8009d00:	2201      	movs	r2, #1
 8009d02:	e02e      	b.n	8009d62 <_scanf_float+0x182>
 8009d04:	2b59      	cmp	r3, #89	; 0x59
 8009d06:	d01e      	beq.n	8009d46 <_scanf_float+0x166>
 8009d08:	2b61      	cmp	r3, #97	; 0x61
 8009d0a:	e7de      	b.n	8009cca <_scanf_float+0xea>
 8009d0c:	2b6e      	cmp	r3, #110	; 0x6e
 8009d0e:	d0e9      	beq.n	8009ce4 <_scanf_float+0x104>
 8009d10:	d815      	bhi.n	8009d3e <_scanf_float+0x15e>
 8009d12:	2b66      	cmp	r3, #102	; 0x66
 8009d14:	d043      	beq.n	8009d9e <_scanf_float+0x1be>
 8009d16:	2b69      	cmp	r3, #105	; 0x69
 8009d18:	d19a      	bne.n	8009c50 <_scanf_float+0x70>
 8009d1a:	f1bb 0f00 	cmp.w	fp, #0
 8009d1e:	d138      	bne.n	8009d92 <_scanf_float+0x1b2>
 8009d20:	f1b9 0f00 	cmp.w	r9, #0
 8009d24:	d197      	bne.n	8009c56 <_scanf_float+0x76>
 8009d26:	6821      	ldr	r1, [r4, #0]
 8009d28:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009d2c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009d30:	d195      	bne.n	8009c5e <_scanf_float+0x7e>
 8009d32:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009d36:	6021      	str	r1, [r4, #0]
 8009d38:	f04f 0b01 	mov.w	fp, #1
 8009d3c:	e011      	b.n	8009d62 <_scanf_float+0x182>
 8009d3e:	2b74      	cmp	r3, #116	; 0x74
 8009d40:	d034      	beq.n	8009dac <_scanf_float+0x1cc>
 8009d42:	2b79      	cmp	r3, #121	; 0x79
 8009d44:	d184      	bne.n	8009c50 <_scanf_float+0x70>
 8009d46:	f1bb 0f07 	cmp.w	fp, #7
 8009d4a:	d181      	bne.n	8009c50 <_scanf_float+0x70>
 8009d4c:	f04f 0b08 	mov.w	fp, #8
 8009d50:	e007      	b.n	8009d62 <_scanf_float+0x182>
 8009d52:	eb12 0f0b 	cmn.w	r2, fp
 8009d56:	f47f af7b 	bne.w	8009c50 <_scanf_float+0x70>
 8009d5a:	6821      	ldr	r1, [r4, #0]
 8009d5c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8009d60:	6021      	str	r1, [r4, #0]
 8009d62:	702b      	strb	r3, [r5, #0]
 8009d64:	3501      	adds	r5, #1
 8009d66:	e79a      	b.n	8009c9e <_scanf_float+0xbe>
 8009d68:	6821      	ldr	r1, [r4, #0]
 8009d6a:	0608      	lsls	r0, r1, #24
 8009d6c:	f57f af70 	bpl.w	8009c50 <_scanf_float+0x70>
 8009d70:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009d74:	e7f4      	b.n	8009d60 <_scanf_float+0x180>
 8009d76:	2a02      	cmp	r2, #2
 8009d78:	d047      	beq.n	8009e0a <_scanf_float+0x22a>
 8009d7a:	f1bb 0f01 	cmp.w	fp, #1
 8009d7e:	d003      	beq.n	8009d88 <_scanf_float+0x1a8>
 8009d80:	f1bb 0f04 	cmp.w	fp, #4
 8009d84:	f47f af64 	bne.w	8009c50 <_scanf_float+0x70>
 8009d88:	f10b 0b01 	add.w	fp, fp, #1
 8009d8c:	fa5f fb8b 	uxtb.w	fp, fp
 8009d90:	e7e7      	b.n	8009d62 <_scanf_float+0x182>
 8009d92:	f1bb 0f03 	cmp.w	fp, #3
 8009d96:	d0f7      	beq.n	8009d88 <_scanf_float+0x1a8>
 8009d98:	f1bb 0f05 	cmp.w	fp, #5
 8009d9c:	e7f2      	b.n	8009d84 <_scanf_float+0x1a4>
 8009d9e:	f1bb 0f02 	cmp.w	fp, #2
 8009da2:	f47f af55 	bne.w	8009c50 <_scanf_float+0x70>
 8009da6:	f04f 0b03 	mov.w	fp, #3
 8009daa:	e7da      	b.n	8009d62 <_scanf_float+0x182>
 8009dac:	f1bb 0f06 	cmp.w	fp, #6
 8009db0:	f47f af4e 	bne.w	8009c50 <_scanf_float+0x70>
 8009db4:	f04f 0b07 	mov.w	fp, #7
 8009db8:	e7d3      	b.n	8009d62 <_scanf_float+0x182>
 8009dba:	6821      	ldr	r1, [r4, #0]
 8009dbc:	0588      	lsls	r0, r1, #22
 8009dbe:	f57f af47 	bpl.w	8009c50 <_scanf_float+0x70>
 8009dc2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8009dc6:	6021      	str	r1, [r4, #0]
 8009dc8:	f8cd 9008 	str.w	r9, [sp, #8]
 8009dcc:	e7c9      	b.n	8009d62 <_scanf_float+0x182>
 8009dce:	6821      	ldr	r1, [r4, #0]
 8009dd0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8009dd4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009dd8:	d006      	beq.n	8009de8 <_scanf_float+0x208>
 8009dda:	0548      	lsls	r0, r1, #21
 8009ddc:	f57f af38 	bpl.w	8009c50 <_scanf_float+0x70>
 8009de0:	f1b9 0f00 	cmp.w	r9, #0
 8009de4:	f43f af3b 	beq.w	8009c5e <_scanf_float+0x7e>
 8009de8:	0588      	lsls	r0, r1, #22
 8009dea:	bf58      	it	pl
 8009dec:	9802      	ldrpl	r0, [sp, #8]
 8009dee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009df2:	bf58      	it	pl
 8009df4:	eba9 0000 	subpl.w	r0, r9, r0
 8009df8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8009dfc:	bf58      	it	pl
 8009dfe:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8009e02:	6021      	str	r1, [r4, #0]
 8009e04:	f04f 0900 	mov.w	r9, #0
 8009e08:	e7ab      	b.n	8009d62 <_scanf_float+0x182>
 8009e0a:	2203      	movs	r2, #3
 8009e0c:	e7a9      	b.n	8009d62 <_scanf_float+0x182>
 8009e0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009e12:	9205      	str	r2, [sp, #20]
 8009e14:	4631      	mov	r1, r6
 8009e16:	4638      	mov	r0, r7
 8009e18:	4798      	blx	r3
 8009e1a:	9a05      	ldr	r2, [sp, #20]
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	f43f af04 	beq.w	8009c2a <_scanf_float+0x4a>
 8009e22:	e715      	b.n	8009c50 <_scanf_float+0x70>
 8009e24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e28:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009e2c:	4632      	mov	r2, r6
 8009e2e:	4638      	mov	r0, r7
 8009e30:	4798      	blx	r3
 8009e32:	6923      	ldr	r3, [r4, #16]
 8009e34:	3b01      	subs	r3, #1
 8009e36:	6123      	str	r3, [r4, #16]
 8009e38:	e715      	b.n	8009c66 <_scanf_float+0x86>
 8009e3a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009e3e:	2b06      	cmp	r3, #6
 8009e40:	d80a      	bhi.n	8009e58 <_scanf_float+0x278>
 8009e42:	f1bb 0f02 	cmp.w	fp, #2
 8009e46:	d968      	bls.n	8009f1a <_scanf_float+0x33a>
 8009e48:	f1ab 0b03 	sub.w	fp, fp, #3
 8009e4c:	fa5f fb8b 	uxtb.w	fp, fp
 8009e50:	eba5 0b0b 	sub.w	fp, r5, fp
 8009e54:	455d      	cmp	r5, fp
 8009e56:	d14b      	bne.n	8009ef0 <_scanf_float+0x310>
 8009e58:	6823      	ldr	r3, [r4, #0]
 8009e5a:	05da      	lsls	r2, r3, #23
 8009e5c:	d51f      	bpl.n	8009e9e <_scanf_float+0x2be>
 8009e5e:	055b      	lsls	r3, r3, #21
 8009e60:	d468      	bmi.n	8009f34 <_scanf_float+0x354>
 8009e62:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009e66:	6923      	ldr	r3, [r4, #16]
 8009e68:	2965      	cmp	r1, #101	; 0x65
 8009e6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e6e:	f105 3bff 	add.w	fp, r5, #4294967295
 8009e72:	6123      	str	r3, [r4, #16]
 8009e74:	d00d      	beq.n	8009e92 <_scanf_float+0x2b2>
 8009e76:	2945      	cmp	r1, #69	; 0x45
 8009e78:	d00b      	beq.n	8009e92 <_scanf_float+0x2b2>
 8009e7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e7e:	4632      	mov	r2, r6
 8009e80:	4638      	mov	r0, r7
 8009e82:	4798      	blx	r3
 8009e84:	6923      	ldr	r3, [r4, #16]
 8009e86:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	f1a5 0b02 	sub.w	fp, r5, #2
 8009e90:	6123      	str	r3, [r4, #16]
 8009e92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e96:	4632      	mov	r2, r6
 8009e98:	4638      	mov	r0, r7
 8009e9a:	4798      	blx	r3
 8009e9c:	465d      	mov	r5, fp
 8009e9e:	6826      	ldr	r6, [r4, #0]
 8009ea0:	f016 0610 	ands.w	r6, r6, #16
 8009ea4:	d17a      	bne.n	8009f9c <_scanf_float+0x3bc>
 8009ea6:	702e      	strb	r6, [r5, #0]
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eb2:	d142      	bne.n	8009f3a <_scanf_float+0x35a>
 8009eb4:	9b02      	ldr	r3, [sp, #8]
 8009eb6:	eba9 0303 	sub.w	r3, r9, r3
 8009eba:	425a      	negs	r2, r3
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d149      	bne.n	8009f54 <_scanf_float+0x374>
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	4641      	mov	r1, r8
 8009ec4:	4638      	mov	r0, r7
 8009ec6:	f000 ff4f 	bl	800ad68 <_strtod_r>
 8009eca:	6825      	ldr	r5, [r4, #0]
 8009ecc:	f8da 3000 	ldr.w	r3, [sl]
 8009ed0:	f015 0f02 	tst.w	r5, #2
 8009ed4:	f103 0204 	add.w	r2, r3, #4
 8009ed8:	ec59 8b10 	vmov	r8, r9, d0
 8009edc:	f8ca 2000 	str.w	r2, [sl]
 8009ee0:	d043      	beq.n	8009f6a <_scanf_float+0x38a>
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	e9c3 8900 	strd	r8, r9, [r3]
 8009ee8:	68e3      	ldr	r3, [r4, #12]
 8009eea:	3301      	adds	r3, #1
 8009eec:	60e3      	str	r3, [r4, #12]
 8009eee:	e6be      	b.n	8009c6e <_scanf_float+0x8e>
 8009ef0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ef4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009ef8:	4632      	mov	r2, r6
 8009efa:	4638      	mov	r0, r7
 8009efc:	4798      	blx	r3
 8009efe:	6923      	ldr	r3, [r4, #16]
 8009f00:	3b01      	subs	r3, #1
 8009f02:	6123      	str	r3, [r4, #16]
 8009f04:	e7a6      	b.n	8009e54 <_scanf_float+0x274>
 8009f06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f0a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009f0e:	4632      	mov	r2, r6
 8009f10:	4638      	mov	r0, r7
 8009f12:	4798      	blx	r3
 8009f14:	6923      	ldr	r3, [r4, #16]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	6123      	str	r3, [r4, #16]
 8009f1a:	4545      	cmp	r5, r8
 8009f1c:	d8f3      	bhi.n	8009f06 <_scanf_float+0x326>
 8009f1e:	e6a5      	b.n	8009c6c <_scanf_float+0x8c>
 8009f20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f24:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009f28:	4632      	mov	r2, r6
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	4798      	blx	r3
 8009f2e:	6923      	ldr	r3, [r4, #16]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	6123      	str	r3, [r4, #16]
 8009f34:	4545      	cmp	r5, r8
 8009f36:	d8f3      	bhi.n	8009f20 <_scanf_float+0x340>
 8009f38:	e698      	b.n	8009c6c <_scanf_float+0x8c>
 8009f3a:	9b03      	ldr	r3, [sp, #12]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d0bf      	beq.n	8009ec0 <_scanf_float+0x2e0>
 8009f40:	9904      	ldr	r1, [sp, #16]
 8009f42:	230a      	movs	r3, #10
 8009f44:	4632      	mov	r2, r6
 8009f46:	3101      	adds	r1, #1
 8009f48:	4638      	mov	r0, r7
 8009f4a:	f000 ffed 	bl	800af28 <_strtol_r>
 8009f4e:	9b03      	ldr	r3, [sp, #12]
 8009f50:	9d04      	ldr	r5, [sp, #16]
 8009f52:	1ac2      	subs	r2, r0, r3
 8009f54:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009f58:	429d      	cmp	r5, r3
 8009f5a:	bf28      	it	cs
 8009f5c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009f60:	490f      	ldr	r1, [pc, #60]	; (8009fa0 <_scanf_float+0x3c0>)
 8009f62:	4628      	mov	r0, r5
 8009f64:	f000 f8a0 	bl	800a0a8 <siprintf>
 8009f68:	e7aa      	b.n	8009ec0 <_scanf_float+0x2e0>
 8009f6a:	f015 0504 	ands.w	r5, r5, #4
 8009f6e:	d1b8      	bne.n	8009ee2 <_scanf_float+0x302>
 8009f70:	681f      	ldr	r7, [r3, #0]
 8009f72:	ee10 2a10 	vmov	r2, s0
 8009f76:	464b      	mov	r3, r9
 8009f78:	ee10 0a10 	vmov	r0, s0
 8009f7c:	4649      	mov	r1, r9
 8009f7e:	f7f6 fded 	bl	8000b5c <__aeabi_dcmpun>
 8009f82:	b128      	cbz	r0, 8009f90 <_scanf_float+0x3b0>
 8009f84:	4628      	mov	r0, r5
 8009f86:	f000 f889 	bl	800a09c <nanf>
 8009f8a:	ed87 0a00 	vstr	s0, [r7]
 8009f8e:	e7ab      	b.n	8009ee8 <_scanf_float+0x308>
 8009f90:	4640      	mov	r0, r8
 8009f92:	4649      	mov	r1, r9
 8009f94:	f7f6 fe40 	bl	8000c18 <__aeabi_d2f>
 8009f98:	6038      	str	r0, [r7, #0]
 8009f9a:	e7a5      	b.n	8009ee8 <_scanf_float+0x308>
 8009f9c:	2600      	movs	r6, #0
 8009f9e:	e666      	b.n	8009c6e <_scanf_float+0x8e>
 8009fa0:	0800dcfc 	.word	0x0800dcfc

08009fa4 <iprintf>:
 8009fa4:	b40f      	push	{r0, r1, r2, r3}
 8009fa6:	4b0a      	ldr	r3, [pc, #40]	; (8009fd0 <iprintf+0x2c>)
 8009fa8:	b513      	push	{r0, r1, r4, lr}
 8009faa:	681c      	ldr	r4, [r3, #0]
 8009fac:	b124      	cbz	r4, 8009fb8 <iprintf+0x14>
 8009fae:	69a3      	ldr	r3, [r4, #24]
 8009fb0:	b913      	cbnz	r3, 8009fb8 <iprintf+0x14>
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f001 ffc0 	bl	800bf38 <__sinit>
 8009fb8:	ab05      	add	r3, sp, #20
 8009fba:	9a04      	ldr	r2, [sp, #16]
 8009fbc:	68a1      	ldr	r1, [r4, #8]
 8009fbe:	9301      	str	r3, [sp, #4]
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f003 fa2d 	bl	800d420 <_vfiprintf_r>
 8009fc6:	b002      	add	sp, #8
 8009fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fcc:	b004      	add	sp, #16
 8009fce:	4770      	bx	lr
 8009fd0:	2000000c 	.word	0x2000000c

08009fd4 <_puts_r>:
 8009fd4:	b570      	push	{r4, r5, r6, lr}
 8009fd6:	460e      	mov	r6, r1
 8009fd8:	4605      	mov	r5, r0
 8009fda:	b118      	cbz	r0, 8009fe4 <_puts_r+0x10>
 8009fdc:	6983      	ldr	r3, [r0, #24]
 8009fde:	b90b      	cbnz	r3, 8009fe4 <_puts_r+0x10>
 8009fe0:	f001 ffaa 	bl	800bf38 <__sinit>
 8009fe4:	69ab      	ldr	r3, [r5, #24]
 8009fe6:	68ac      	ldr	r4, [r5, #8]
 8009fe8:	b913      	cbnz	r3, 8009ff0 <_puts_r+0x1c>
 8009fea:	4628      	mov	r0, r5
 8009fec:	f001 ffa4 	bl	800bf38 <__sinit>
 8009ff0:	4b23      	ldr	r3, [pc, #140]	; (800a080 <_puts_r+0xac>)
 8009ff2:	429c      	cmp	r4, r3
 8009ff4:	d117      	bne.n	800a026 <_puts_r+0x52>
 8009ff6:	686c      	ldr	r4, [r5, #4]
 8009ff8:	89a3      	ldrh	r3, [r4, #12]
 8009ffa:	071b      	lsls	r3, r3, #28
 8009ffc:	d51d      	bpl.n	800a03a <_puts_r+0x66>
 8009ffe:	6923      	ldr	r3, [r4, #16]
 800a000:	b1db      	cbz	r3, 800a03a <_puts_r+0x66>
 800a002:	3e01      	subs	r6, #1
 800a004:	68a3      	ldr	r3, [r4, #8]
 800a006:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a00a:	3b01      	subs	r3, #1
 800a00c:	60a3      	str	r3, [r4, #8]
 800a00e:	b9e9      	cbnz	r1, 800a04c <_puts_r+0x78>
 800a010:	2b00      	cmp	r3, #0
 800a012:	da2e      	bge.n	800a072 <_puts_r+0x9e>
 800a014:	4622      	mov	r2, r4
 800a016:	210a      	movs	r1, #10
 800a018:	4628      	mov	r0, r5
 800a01a:	f000 ff97 	bl	800af4c <__swbuf_r>
 800a01e:	3001      	adds	r0, #1
 800a020:	d011      	beq.n	800a046 <_puts_r+0x72>
 800a022:	200a      	movs	r0, #10
 800a024:	e011      	b.n	800a04a <_puts_r+0x76>
 800a026:	4b17      	ldr	r3, [pc, #92]	; (800a084 <_puts_r+0xb0>)
 800a028:	429c      	cmp	r4, r3
 800a02a:	d101      	bne.n	800a030 <_puts_r+0x5c>
 800a02c:	68ac      	ldr	r4, [r5, #8]
 800a02e:	e7e3      	b.n	8009ff8 <_puts_r+0x24>
 800a030:	4b15      	ldr	r3, [pc, #84]	; (800a088 <_puts_r+0xb4>)
 800a032:	429c      	cmp	r4, r3
 800a034:	bf08      	it	eq
 800a036:	68ec      	ldreq	r4, [r5, #12]
 800a038:	e7de      	b.n	8009ff8 <_puts_r+0x24>
 800a03a:	4621      	mov	r1, r4
 800a03c:	4628      	mov	r0, r5
 800a03e:	f000 ffd7 	bl	800aff0 <__swsetup_r>
 800a042:	2800      	cmp	r0, #0
 800a044:	d0dd      	beq.n	800a002 <_puts_r+0x2e>
 800a046:	f04f 30ff 	mov.w	r0, #4294967295
 800a04a:	bd70      	pop	{r4, r5, r6, pc}
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	da04      	bge.n	800a05a <_puts_r+0x86>
 800a050:	69a2      	ldr	r2, [r4, #24]
 800a052:	429a      	cmp	r2, r3
 800a054:	dc06      	bgt.n	800a064 <_puts_r+0x90>
 800a056:	290a      	cmp	r1, #10
 800a058:	d004      	beq.n	800a064 <_puts_r+0x90>
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	1c5a      	adds	r2, r3, #1
 800a05e:	6022      	str	r2, [r4, #0]
 800a060:	7019      	strb	r1, [r3, #0]
 800a062:	e7cf      	b.n	800a004 <_puts_r+0x30>
 800a064:	4622      	mov	r2, r4
 800a066:	4628      	mov	r0, r5
 800a068:	f000 ff70 	bl	800af4c <__swbuf_r>
 800a06c:	3001      	adds	r0, #1
 800a06e:	d1c9      	bne.n	800a004 <_puts_r+0x30>
 800a070:	e7e9      	b.n	800a046 <_puts_r+0x72>
 800a072:	6823      	ldr	r3, [r4, #0]
 800a074:	200a      	movs	r0, #10
 800a076:	1c5a      	adds	r2, r3, #1
 800a078:	6022      	str	r2, [r4, #0]
 800a07a:	7018      	strb	r0, [r3, #0]
 800a07c:	e7e5      	b.n	800a04a <_puts_r+0x76>
 800a07e:	bf00      	nop
 800a080:	0800dd88 	.word	0x0800dd88
 800a084:	0800dda8 	.word	0x0800dda8
 800a088:	0800dd68 	.word	0x0800dd68

0800a08c <puts>:
 800a08c:	4b02      	ldr	r3, [pc, #8]	; (800a098 <puts+0xc>)
 800a08e:	4601      	mov	r1, r0
 800a090:	6818      	ldr	r0, [r3, #0]
 800a092:	f7ff bf9f 	b.w	8009fd4 <_puts_r>
 800a096:	bf00      	nop
 800a098:	2000000c 	.word	0x2000000c

0800a09c <nanf>:
 800a09c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a0a4 <nanf+0x8>
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	7fc00000 	.word	0x7fc00000

0800a0a8 <siprintf>:
 800a0a8:	b40e      	push	{r1, r2, r3}
 800a0aa:	b500      	push	{lr}
 800a0ac:	b09c      	sub	sp, #112	; 0x70
 800a0ae:	ab1d      	add	r3, sp, #116	; 0x74
 800a0b0:	9002      	str	r0, [sp, #8]
 800a0b2:	9006      	str	r0, [sp, #24]
 800a0b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0b8:	4809      	ldr	r0, [pc, #36]	; (800a0e0 <siprintf+0x38>)
 800a0ba:	9107      	str	r1, [sp, #28]
 800a0bc:	9104      	str	r1, [sp, #16]
 800a0be:	4909      	ldr	r1, [pc, #36]	; (800a0e4 <siprintf+0x3c>)
 800a0c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0c4:	9105      	str	r1, [sp, #20]
 800a0c6:	6800      	ldr	r0, [r0, #0]
 800a0c8:	9301      	str	r3, [sp, #4]
 800a0ca:	a902      	add	r1, sp, #8
 800a0cc:	f003 f886 	bl	800d1dc <_svfiprintf_r>
 800a0d0:	9b02      	ldr	r3, [sp, #8]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	701a      	strb	r2, [r3, #0]
 800a0d6:	b01c      	add	sp, #112	; 0x70
 800a0d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0dc:	b003      	add	sp, #12
 800a0de:	4770      	bx	lr
 800a0e0:	2000000c 	.word	0x2000000c
 800a0e4:	ffff0208 	.word	0xffff0208

0800a0e8 <strncpy>:
 800a0e8:	b570      	push	{r4, r5, r6, lr}
 800a0ea:	3901      	subs	r1, #1
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	b902      	cbnz	r2, 800a0f2 <strncpy+0xa>
 800a0f0:	bd70      	pop	{r4, r5, r6, pc}
 800a0f2:	4623      	mov	r3, r4
 800a0f4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a0f8:	f803 5b01 	strb.w	r5, [r3], #1
 800a0fc:	1e56      	subs	r6, r2, #1
 800a0fe:	b92d      	cbnz	r5, 800a10c <strncpy+0x24>
 800a100:	4414      	add	r4, r2
 800a102:	42a3      	cmp	r3, r4
 800a104:	d0f4      	beq.n	800a0f0 <strncpy+0x8>
 800a106:	f803 5b01 	strb.w	r5, [r3], #1
 800a10a:	e7fa      	b.n	800a102 <strncpy+0x1a>
 800a10c:	461c      	mov	r4, r3
 800a10e:	4632      	mov	r2, r6
 800a110:	e7ed      	b.n	800a0ee <strncpy+0x6>

0800a112 <strstr>:
 800a112:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a114:	7803      	ldrb	r3, [r0, #0]
 800a116:	b17b      	cbz	r3, 800a138 <strstr+0x26>
 800a118:	4604      	mov	r4, r0
 800a11a:	7823      	ldrb	r3, [r4, #0]
 800a11c:	4620      	mov	r0, r4
 800a11e:	1c66      	adds	r6, r4, #1
 800a120:	b17b      	cbz	r3, 800a142 <strstr+0x30>
 800a122:	1e4a      	subs	r2, r1, #1
 800a124:	1e63      	subs	r3, r4, #1
 800a126:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a12a:	b14d      	cbz	r5, 800a140 <strstr+0x2e>
 800a12c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a130:	42af      	cmp	r7, r5
 800a132:	4634      	mov	r4, r6
 800a134:	d0f7      	beq.n	800a126 <strstr+0x14>
 800a136:	e7f0      	b.n	800a11a <strstr+0x8>
 800a138:	780b      	ldrb	r3, [r1, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	bf18      	it	ne
 800a13e:	2000      	movne	r0, #0
 800a140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a142:	4618      	mov	r0, r3
 800a144:	e7fc      	b.n	800a140 <strstr+0x2e>

0800a146 <sulp>:
 800a146:	b570      	push	{r4, r5, r6, lr}
 800a148:	4604      	mov	r4, r0
 800a14a:	460d      	mov	r5, r1
 800a14c:	ec45 4b10 	vmov	d0, r4, r5
 800a150:	4616      	mov	r6, r2
 800a152:	f002 fdff 	bl	800cd54 <__ulp>
 800a156:	ec51 0b10 	vmov	r0, r1, d0
 800a15a:	b17e      	cbz	r6, 800a17c <sulp+0x36>
 800a15c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a160:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a164:	2b00      	cmp	r3, #0
 800a166:	dd09      	ble.n	800a17c <sulp+0x36>
 800a168:	051b      	lsls	r3, r3, #20
 800a16a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a16e:	2400      	movs	r4, #0
 800a170:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a174:	4622      	mov	r2, r4
 800a176:	462b      	mov	r3, r5
 800a178:	f7f6 fa56 	bl	8000628 <__aeabi_dmul>
 800a17c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a180 <_strtod_l>:
 800a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	461f      	mov	r7, r3
 800a186:	b0a1      	sub	sp, #132	; 0x84
 800a188:	2300      	movs	r3, #0
 800a18a:	4681      	mov	r9, r0
 800a18c:	4638      	mov	r0, r7
 800a18e:	460e      	mov	r6, r1
 800a190:	9217      	str	r2, [sp, #92]	; 0x5c
 800a192:	931c      	str	r3, [sp, #112]	; 0x70
 800a194:	f002 fa83 	bl	800c69e <__localeconv_l>
 800a198:	4680      	mov	r8, r0
 800a19a:	6800      	ldr	r0, [r0, #0]
 800a19c:	f7f6 f830 	bl	8000200 <strlen>
 800a1a0:	f04f 0a00 	mov.w	sl, #0
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	f04f 0b00 	mov.w	fp, #0
 800a1aa:	961b      	str	r6, [sp, #108]	; 0x6c
 800a1ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1ae:	781a      	ldrb	r2, [r3, #0]
 800a1b0:	2a0d      	cmp	r2, #13
 800a1b2:	d832      	bhi.n	800a21a <_strtod_l+0x9a>
 800a1b4:	2a09      	cmp	r2, #9
 800a1b6:	d236      	bcs.n	800a226 <_strtod_l+0xa6>
 800a1b8:	2a00      	cmp	r2, #0
 800a1ba:	d03e      	beq.n	800a23a <_strtod_l+0xba>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	930d      	str	r3, [sp, #52]	; 0x34
 800a1c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a1c2:	782b      	ldrb	r3, [r5, #0]
 800a1c4:	2b30      	cmp	r3, #48	; 0x30
 800a1c6:	f040 80ac 	bne.w	800a322 <_strtod_l+0x1a2>
 800a1ca:	786b      	ldrb	r3, [r5, #1]
 800a1cc:	2b58      	cmp	r3, #88	; 0x58
 800a1ce:	d001      	beq.n	800a1d4 <_strtod_l+0x54>
 800a1d0:	2b78      	cmp	r3, #120	; 0x78
 800a1d2:	d167      	bne.n	800a2a4 <_strtod_l+0x124>
 800a1d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1d6:	9301      	str	r3, [sp, #4]
 800a1d8:	ab1c      	add	r3, sp, #112	; 0x70
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	9702      	str	r7, [sp, #8]
 800a1de:	ab1d      	add	r3, sp, #116	; 0x74
 800a1e0:	4a88      	ldr	r2, [pc, #544]	; (800a404 <_strtod_l+0x284>)
 800a1e2:	a91b      	add	r1, sp, #108	; 0x6c
 800a1e4:	4648      	mov	r0, r9
 800a1e6:	f001 ff80 	bl	800c0ea <__gethex>
 800a1ea:	f010 0407 	ands.w	r4, r0, #7
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	d005      	beq.n	800a1fe <_strtod_l+0x7e>
 800a1f2:	2c06      	cmp	r4, #6
 800a1f4:	d12b      	bne.n	800a24e <_strtod_l+0xce>
 800a1f6:	3501      	adds	r5, #1
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	951b      	str	r5, [sp, #108]	; 0x6c
 800a1fc:	930d      	str	r3, [sp, #52]	; 0x34
 800a1fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a200:	2b00      	cmp	r3, #0
 800a202:	f040 859a 	bne.w	800ad3a <_strtod_l+0xbba>
 800a206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a208:	b1e3      	cbz	r3, 800a244 <_strtod_l+0xc4>
 800a20a:	4652      	mov	r2, sl
 800a20c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a210:	ec43 2b10 	vmov	d0, r2, r3
 800a214:	b021      	add	sp, #132	; 0x84
 800a216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21a:	2a2b      	cmp	r2, #43	; 0x2b
 800a21c:	d015      	beq.n	800a24a <_strtod_l+0xca>
 800a21e:	2a2d      	cmp	r2, #45	; 0x2d
 800a220:	d004      	beq.n	800a22c <_strtod_l+0xac>
 800a222:	2a20      	cmp	r2, #32
 800a224:	d1ca      	bne.n	800a1bc <_strtod_l+0x3c>
 800a226:	3301      	adds	r3, #1
 800a228:	931b      	str	r3, [sp, #108]	; 0x6c
 800a22a:	e7bf      	b.n	800a1ac <_strtod_l+0x2c>
 800a22c:	2201      	movs	r2, #1
 800a22e:	920d      	str	r2, [sp, #52]	; 0x34
 800a230:	1c5a      	adds	r2, r3, #1
 800a232:	921b      	str	r2, [sp, #108]	; 0x6c
 800a234:	785b      	ldrb	r3, [r3, #1]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d1c2      	bne.n	800a1c0 <_strtod_l+0x40>
 800a23a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a23c:	961b      	str	r6, [sp, #108]	; 0x6c
 800a23e:	2b00      	cmp	r3, #0
 800a240:	f040 8579 	bne.w	800ad36 <_strtod_l+0xbb6>
 800a244:	4652      	mov	r2, sl
 800a246:	465b      	mov	r3, fp
 800a248:	e7e2      	b.n	800a210 <_strtod_l+0x90>
 800a24a:	2200      	movs	r2, #0
 800a24c:	e7ef      	b.n	800a22e <_strtod_l+0xae>
 800a24e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a250:	b13a      	cbz	r2, 800a262 <_strtod_l+0xe2>
 800a252:	2135      	movs	r1, #53	; 0x35
 800a254:	a81e      	add	r0, sp, #120	; 0x78
 800a256:	f002 fe75 	bl	800cf44 <__copybits>
 800a25a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a25c:	4648      	mov	r0, r9
 800a25e:	f002 fae1 	bl	800c824 <_Bfree>
 800a262:	3c01      	subs	r4, #1
 800a264:	2c04      	cmp	r4, #4
 800a266:	d806      	bhi.n	800a276 <_strtod_l+0xf6>
 800a268:	e8df f004 	tbb	[pc, r4]
 800a26c:	1714030a 	.word	0x1714030a
 800a270:	0a          	.byte	0x0a
 800a271:	00          	.byte	0x00
 800a272:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800a276:	0730      	lsls	r0, r6, #28
 800a278:	d5c1      	bpl.n	800a1fe <_strtod_l+0x7e>
 800a27a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a27e:	e7be      	b.n	800a1fe <_strtod_l+0x7e>
 800a280:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800a284:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a286:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a28a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a28e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a292:	e7f0      	b.n	800a276 <_strtod_l+0xf6>
 800a294:	f8df b170 	ldr.w	fp, [pc, #368]	; 800a408 <_strtod_l+0x288>
 800a298:	e7ed      	b.n	800a276 <_strtod_l+0xf6>
 800a29a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a29e:	f04f 3aff 	mov.w	sl, #4294967295
 800a2a2:	e7e8      	b.n	800a276 <_strtod_l+0xf6>
 800a2a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	921b      	str	r2, [sp, #108]	; 0x6c
 800a2aa:	785b      	ldrb	r3, [r3, #1]
 800a2ac:	2b30      	cmp	r3, #48	; 0x30
 800a2ae:	d0f9      	beq.n	800a2a4 <_strtod_l+0x124>
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d0a4      	beq.n	800a1fe <_strtod_l+0x7e>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	2500      	movs	r5, #0
 800a2b8:	9306      	str	r3, [sp, #24]
 800a2ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a2bc:	9308      	str	r3, [sp, #32]
 800a2be:	9507      	str	r5, [sp, #28]
 800a2c0:	9505      	str	r5, [sp, #20]
 800a2c2:	220a      	movs	r2, #10
 800a2c4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a2c6:	7807      	ldrb	r7, [r0, #0]
 800a2c8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a2cc:	b2d9      	uxtb	r1, r3
 800a2ce:	2909      	cmp	r1, #9
 800a2d0:	d929      	bls.n	800a326 <_strtod_l+0x1a6>
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	f8d8 1000 	ldr.w	r1, [r8]
 800a2d8:	f003 fa0b 	bl	800d6f2 <strncmp>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d031      	beq.n	800a344 <_strtod_l+0x1c4>
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	9c05      	ldr	r4, [sp, #20]
 800a2e4:	9004      	str	r0, [sp, #16]
 800a2e6:	463b      	mov	r3, r7
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	2b65      	cmp	r3, #101	; 0x65
 800a2ec:	d001      	beq.n	800a2f2 <_strtod_l+0x172>
 800a2ee:	2b45      	cmp	r3, #69	; 0x45
 800a2f0:	d114      	bne.n	800a31c <_strtod_l+0x19c>
 800a2f2:	b924      	cbnz	r4, 800a2fe <_strtod_l+0x17e>
 800a2f4:	b910      	cbnz	r0, 800a2fc <_strtod_l+0x17c>
 800a2f6:	9b06      	ldr	r3, [sp, #24]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d09e      	beq.n	800a23a <_strtod_l+0xba>
 800a2fc:	2400      	movs	r4, #0
 800a2fe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a300:	1c73      	adds	r3, r6, #1
 800a302:	931b      	str	r3, [sp, #108]	; 0x6c
 800a304:	7873      	ldrb	r3, [r6, #1]
 800a306:	2b2b      	cmp	r3, #43	; 0x2b
 800a308:	d078      	beq.n	800a3fc <_strtod_l+0x27c>
 800a30a:	2b2d      	cmp	r3, #45	; 0x2d
 800a30c:	d070      	beq.n	800a3f0 <_strtod_l+0x270>
 800a30e:	f04f 0c00 	mov.w	ip, #0
 800a312:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a316:	2f09      	cmp	r7, #9
 800a318:	d97c      	bls.n	800a414 <_strtod_l+0x294>
 800a31a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a31c:	f04f 0e00 	mov.w	lr, #0
 800a320:	e09a      	b.n	800a458 <_strtod_l+0x2d8>
 800a322:	2300      	movs	r3, #0
 800a324:	e7c7      	b.n	800a2b6 <_strtod_l+0x136>
 800a326:	9905      	ldr	r1, [sp, #20]
 800a328:	2908      	cmp	r1, #8
 800a32a:	bfdd      	ittte	le
 800a32c:	9907      	ldrle	r1, [sp, #28]
 800a32e:	fb02 3301 	mlale	r3, r2, r1, r3
 800a332:	9307      	strle	r3, [sp, #28]
 800a334:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a338:	9b05      	ldr	r3, [sp, #20]
 800a33a:	3001      	adds	r0, #1
 800a33c:	3301      	adds	r3, #1
 800a33e:	9305      	str	r3, [sp, #20]
 800a340:	901b      	str	r0, [sp, #108]	; 0x6c
 800a342:	e7bf      	b.n	800a2c4 <_strtod_l+0x144>
 800a344:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a346:	191a      	adds	r2, r3, r4
 800a348:	921b      	str	r2, [sp, #108]	; 0x6c
 800a34a:	9a05      	ldr	r2, [sp, #20]
 800a34c:	5d1b      	ldrb	r3, [r3, r4]
 800a34e:	2a00      	cmp	r2, #0
 800a350:	d037      	beq.n	800a3c2 <_strtod_l+0x242>
 800a352:	9c05      	ldr	r4, [sp, #20]
 800a354:	4602      	mov	r2, r0
 800a356:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a35a:	2909      	cmp	r1, #9
 800a35c:	d913      	bls.n	800a386 <_strtod_l+0x206>
 800a35e:	2101      	movs	r1, #1
 800a360:	9104      	str	r1, [sp, #16]
 800a362:	e7c2      	b.n	800a2ea <_strtod_l+0x16a>
 800a364:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a366:	1c5a      	adds	r2, r3, #1
 800a368:	921b      	str	r2, [sp, #108]	; 0x6c
 800a36a:	785b      	ldrb	r3, [r3, #1]
 800a36c:	3001      	adds	r0, #1
 800a36e:	2b30      	cmp	r3, #48	; 0x30
 800a370:	d0f8      	beq.n	800a364 <_strtod_l+0x1e4>
 800a372:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a376:	2a08      	cmp	r2, #8
 800a378:	f200 84e4 	bhi.w	800ad44 <_strtod_l+0xbc4>
 800a37c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a37e:	9208      	str	r2, [sp, #32]
 800a380:	4602      	mov	r2, r0
 800a382:	2000      	movs	r0, #0
 800a384:	4604      	mov	r4, r0
 800a386:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a38a:	f100 0101 	add.w	r1, r0, #1
 800a38e:	d012      	beq.n	800a3b6 <_strtod_l+0x236>
 800a390:	440a      	add	r2, r1
 800a392:	eb00 0c04 	add.w	ip, r0, r4
 800a396:	4621      	mov	r1, r4
 800a398:	270a      	movs	r7, #10
 800a39a:	458c      	cmp	ip, r1
 800a39c:	d113      	bne.n	800a3c6 <_strtod_l+0x246>
 800a39e:	1821      	adds	r1, r4, r0
 800a3a0:	2908      	cmp	r1, #8
 800a3a2:	f104 0401 	add.w	r4, r4, #1
 800a3a6:	4404      	add	r4, r0
 800a3a8:	dc19      	bgt.n	800a3de <_strtod_l+0x25e>
 800a3aa:	9b07      	ldr	r3, [sp, #28]
 800a3ac:	210a      	movs	r1, #10
 800a3ae:	fb01 e303 	mla	r3, r1, r3, lr
 800a3b2:	9307      	str	r3, [sp, #28]
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3b8:	1c58      	adds	r0, r3, #1
 800a3ba:	901b      	str	r0, [sp, #108]	; 0x6c
 800a3bc:	785b      	ldrb	r3, [r3, #1]
 800a3be:	4608      	mov	r0, r1
 800a3c0:	e7c9      	b.n	800a356 <_strtod_l+0x1d6>
 800a3c2:	9805      	ldr	r0, [sp, #20]
 800a3c4:	e7d3      	b.n	800a36e <_strtod_l+0x1ee>
 800a3c6:	2908      	cmp	r1, #8
 800a3c8:	f101 0101 	add.w	r1, r1, #1
 800a3cc:	dc03      	bgt.n	800a3d6 <_strtod_l+0x256>
 800a3ce:	9b07      	ldr	r3, [sp, #28]
 800a3d0:	437b      	muls	r3, r7
 800a3d2:	9307      	str	r3, [sp, #28]
 800a3d4:	e7e1      	b.n	800a39a <_strtod_l+0x21a>
 800a3d6:	2910      	cmp	r1, #16
 800a3d8:	bfd8      	it	le
 800a3da:	437d      	mulle	r5, r7
 800a3dc:	e7dd      	b.n	800a39a <_strtod_l+0x21a>
 800a3de:	2c10      	cmp	r4, #16
 800a3e0:	bfdc      	itt	le
 800a3e2:	210a      	movle	r1, #10
 800a3e4:	fb01 e505 	mlale	r5, r1, r5, lr
 800a3e8:	e7e4      	b.n	800a3b4 <_strtod_l+0x234>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	9304      	str	r3, [sp, #16]
 800a3ee:	e781      	b.n	800a2f4 <_strtod_l+0x174>
 800a3f0:	f04f 0c01 	mov.w	ip, #1
 800a3f4:	1cb3      	adds	r3, r6, #2
 800a3f6:	931b      	str	r3, [sp, #108]	; 0x6c
 800a3f8:	78b3      	ldrb	r3, [r6, #2]
 800a3fa:	e78a      	b.n	800a312 <_strtod_l+0x192>
 800a3fc:	f04f 0c00 	mov.w	ip, #0
 800a400:	e7f8      	b.n	800a3f4 <_strtod_l+0x274>
 800a402:	bf00      	nop
 800a404:	0800dd04 	.word	0x0800dd04
 800a408:	7ff00000 	.word	0x7ff00000
 800a40c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a40e:	1c5f      	adds	r7, r3, #1
 800a410:	971b      	str	r7, [sp, #108]	; 0x6c
 800a412:	785b      	ldrb	r3, [r3, #1]
 800a414:	2b30      	cmp	r3, #48	; 0x30
 800a416:	d0f9      	beq.n	800a40c <_strtod_l+0x28c>
 800a418:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a41c:	2f08      	cmp	r7, #8
 800a41e:	f63f af7d 	bhi.w	800a31c <_strtod_l+0x19c>
 800a422:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a426:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a428:	930a      	str	r3, [sp, #40]	; 0x28
 800a42a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a42c:	1c5f      	adds	r7, r3, #1
 800a42e:	971b      	str	r7, [sp, #108]	; 0x6c
 800a430:	785b      	ldrb	r3, [r3, #1]
 800a432:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a436:	f1b8 0f09 	cmp.w	r8, #9
 800a43a:	d937      	bls.n	800a4ac <_strtod_l+0x32c>
 800a43c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a43e:	1a7f      	subs	r7, r7, r1
 800a440:	2f08      	cmp	r7, #8
 800a442:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a446:	dc37      	bgt.n	800a4b8 <_strtod_l+0x338>
 800a448:	45be      	cmp	lr, r7
 800a44a:	bfa8      	it	ge
 800a44c:	46be      	movge	lr, r7
 800a44e:	f1bc 0f00 	cmp.w	ip, #0
 800a452:	d001      	beq.n	800a458 <_strtod_l+0x2d8>
 800a454:	f1ce 0e00 	rsb	lr, lr, #0
 800a458:	2c00      	cmp	r4, #0
 800a45a:	d151      	bne.n	800a500 <_strtod_l+0x380>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	f47f aece 	bne.w	800a1fe <_strtod_l+0x7e>
 800a462:	9a06      	ldr	r2, [sp, #24]
 800a464:	2a00      	cmp	r2, #0
 800a466:	f47f aeca 	bne.w	800a1fe <_strtod_l+0x7e>
 800a46a:	9a04      	ldr	r2, [sp, #16]
 800a46c:	2a00      	cmp	r2, #0
 800a46e:	f47f aee4 	bne.w	800a23a <_strtod_l+0xba>
 800a472:	2b4e      	cmp	r3, #78	; 0x4e
 800a474:	d027      	beq.n	800a4c6 <_strtod_l+0x346>
 800a476:	dc21      	bgt.n	800a4bc <_strtod_l+0x33c>
 800a478:	2b49      	cmp	r3, #73	; 0x49
 800a47a:	f47f aede 	bne.w	800a23a <_strtod_l+0xba>
 800a47e:	49a0      	ldr	r1, [pc, #640]	; (800a700 <_strtod_l+0x580>)
 800a480:	a81b      	add	r0, sp, #108	; 0x6c
 800a482:	f002 f865 	bl	800c550 <__match>
 800a486:	2800      	cmp	r0, #0
 800a488:	f43f aed7 	beq.w	800a23a <_strtod_l+0xba>
 800a48c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a48e:	499d      	ldr	r1, [pc, #628]	; (800a704 <_strtod_l+0x584>)
 800a490:	3b01      	subs	r3, #1
 800a492:	a81b      	add	r0, sp, #108	; 0x6c
 800a494:	931b      	str	r3, [sp, #108]	; 0x6c
 800a496:	f002 f85b 	bl	800c550 <__match>
 800a49a:	b910      	cbnz	r0, 800a4a2 <_strtod_l+0x322>
 800a49c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a49e:	3301      	adds	r3, #1
 800a4a0:	931b      	str	r3, [sp, #108]	; 0x6c
 800a4a2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800a718 <_strtod_l+0x598>
 800a4a6:	f04f 0a00 	mov.w	sl, #0
 800a4aa:	e6a8      	b.n	800a1fe <_strtod_l+0x7e>
 800a4ac:	210a      	movs	r1, #10
 800a4ae:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a4b2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a4b6:	e7b8      	b.n	800a42a <_strtod_l+0x2aa>
 800a4b8:	46be      	mov	lr, r7
 800a4ba:	e7c8      	b.n	800a44e <_strtod_l+0x2ce>
 800a4bc:	2b69      	cmp	r3, #105	; 0x69
 800a4be:	d0de      	beq.n	800a47e <_strtod_l+0x2fe>
 800a4c0:	2b6e      	cmp	r3, #110	; 0x6e
 800a4c2:	f47f aeba 	bne.w	800a23a <_strtod_l+0xba>
 800a4c6:	4990      	ldr	r1, [pc, #576]	; (800a708 <_strtod_l+0x588>)
 800a4c8:	a81b      	add	r0, sp, #108	; 0x6c
 800a4ca:	f002 f841 	bl	800c550 <__match>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	f43f aeb3 	beq.w	800a23a <_strtod_l+0xba>
 800a4d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	2b28      	cmp	r3, #40	; 0x28
 800a4da:	d10e      	bne.n	800a4fa <_strtod_l+0x37a>
 800a4dc:	aa1e      	add	r2, sp, #120	; 0x78
 800a4de:	498b      	ldr	r1, [pc, #556]	; (800a70c <_strtod_l+0x58c>)
 800a4e0:	a81b      	add	r0, sp, #108	; 0x6c
 800a4e2:	f002 f849 	bl	800c578 <__hexnan>
 800a4e6:	2805      	cmp	r0, #5
 800a4e8:	d107      	bne.n	800a4fa <_strtod_l+0x37a>
 800a4ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a4ec:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800a4f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a4f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a4f8:	e681      	b.n	800a1fe <_strtod_l+0x7e>
 800a4fa:	f8df b224 	ldr.w	fp, [pc, #548]	; 800a720 <_strtod_l+0x5a0>
 800a4fe:	e7d2      	b.n	800a4a6 <_strtod_l+0x326>
 800a500:	ebae 0302 	sub.w	r3, lr, r2
 800a504:	9306      	str	r3, [sp, #24]
 800a506:	9b05      	ldr	r3, [sp, #20]
 800a508:	9807      	ldr	r0, [sp, #28]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	bf08      	it	eq
 800a50e:	4623      	moveq	r3, r4
 800a510:	2c10      	cmp	r4, #16
 800a512:	9305      	str	r3, [sp, #20]
 800a514:	46a0      	mov	r8, r4
 800a516:	bfa8      	it	ge
 800a518:	f04f 0810 	movge.w	r8, #16
 800a51c:	f7f6 f80a 	bl	8000534 <__aeabi_ui2d>
 800a520:	2c09      	cmp	r4, #9
 800a522:	4682      	mov	sl, r0
 800a524:	468b      	mov	fp, r1
 800a526:	dc13      	bgt.n	800a550 <_strtod_l+0x3d0>
 800a528:	9b06      	ldr	r3, [sp, #24]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f43f ae67 	beq.w	800a1fe <_strtod_l+0x7e>
 800a530:	9b06      	ldr	r3, [sp, #24]
 800a532:	dd7a      	ble.n	800a62a <_strtod_l+0x4aa>
 800a534:	2b16      	cmp	r3, #22
 800a536:	dc61      	bgt.n	800a5fc <_strtod_l+0x47c>
 800a538:	4a75      	ldr	r2, [pc, #468]	; (800a710 <_strtod_l+0x590>)
 800a53a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a53e:	e9de 0100 	ldrd	r0, r1, [lr]
 800a542:	4652      	mov	r2, sl
 800a544:	465b      	mov	r3, fp
 800a546:	f7f6 f86f 	bl	8000628 <__aeabi_dmul>
 800a54a:	4682      	mov	sl, r0
 800a54c:	468b      	mov	fp, r1
 800a54e:	e656      	b.n	800a1fe <_strtod_l+0x7e>
 800a550:	4b6f      	ldr	r3, [pc, #444]	; (800a710 <_strtod_l+0x590>)
 800a552:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a556:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a55a:	f7f6 f865 	bl	8000628 <__aeabi_dmul>
 800a55e:	4606      	mov	r6, r0
 800a560:	4628      	mov	r0, r5
 800a562:	460f      	mov	r7, r1
 800a564:	f7f5 ffe6 	bl	8000534 <__aeabi_ui2d>
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	4630      	mov	r0, r6
 800a56e:	4639      	mov	r1, r7
 800a570:	f7f5 fea4 	bl	80002bc <__adddf3>
 800a574:	2c0f      	cmp	r4, #15
 800a576:	4682      	mov	sl, r0
 800a578:	468b      	mov	fp, r1
 800a57a:	ddd5      	ble.n	800a528 <_strtod_l+0x3a8>
 800a57c:	9b06      	ldr	r3, [sp, #24]
 800a57e:	eba4 0808 	sub.w	r8, r4, r8
 800a582:	4498      	add	r8, r3
 800a584:	f1b8 0f00 	cmp.w	r8, #0
 800a588:	f340 8096 	ble.w	800a6b8 <_strtod_l+0x538>
 800a58c:	f018 030f 	ands.w	r3, r8, #15
 800a590:	d00a      	beq.n	800a5a8 <_strtod_l+0x428>
 800a592:	495f      	ldr	r1, [pc, #380]	; (800a710 <_strtod_l+0x590>)
 800a594:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a598:	4652      	mov	r2, sl
 800a59a:	465b      	mov	r3, fp
 800a59c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5a0:	f7f6 f842 	bl	8000628 <__aeabi_dmul>
 800a5a4:	4682      	mov	sl, r0
 800a5a6:	468b      	mov	fp, r1
 800a5a8:	f038 080f 	bics.w	r8, r8, #15
 800a5ac:	d073      	beq.n	800a696 <_strtod_l+0x516>
 800a5ae:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a5b2:	dd47      	ble.n	800a644 <_strtod_l+0x4c4>
 800a5b4:	2400      	movs	r4, #0
 800a5b6:	46a0      	mov	r8, r4
 800a5b8:	9407      	str	r4, [sp, #28]
 800a5ba:	9405      	str	r4, [sp, #20]
 800a5bc:	2322      	movs	r3, #34	; 0x22
 800a5be:	f8df b158 	ldr.w	fp, [pc, #344]	; 800a718 <_strtod_l+0x598>
 800a5c2:	f8c9 3000 	str.w	r3, [r9]
 800a5c6:	f04f 0a00 	mov.w	sl, #0
 800a5ca:	9b07      	ldr	r3, [sp, #28]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f43f ae16 	beq.w	800a1fe <_strtod_l+0x7e>
 800a5d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a5d4:	4648      	mov	r0, r9
 800a5d6:	f002 f925 	bl	800c824 <_Bfree>
 800a5da:	9905      	ldr	r1, [sp, #20]
 800a5dc:	4648      	mov	r0, r9
 800a5de:	f002 f921 	bl	800c824 <_Bfree>
 800a5e2:	4641      	mov	r1, r8
 800a5e4:	4648      	mov	r0, r9
 800a5e6:	f002 f91d 	bl	800c824 <_Bfree>
 800a5ea:	9907      	ldr	r1, [sp, #28]
 800a5ec:	4648      	mov	r0, r9
 800a5ee:	f002 f919 	bl	800c824 <_Bfree>
 800a5f2:	4621      	mov	r1, r4
 800a5f4:	4648      	mov	r0, r9
 800a5f6:	f002 f915 	bl	800c824 <_Bfree>
 800a5fa:	e600      	b.n	800a1fe <_strtod_l+0x7e>
 800a5fc:	9a06      	ldr	r2, [sp, #24]
 800a5fe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a602:	4293      	cmp	r3, r2
 800a604:	dbba      	blt.n	800a57c <_strtod_l+0x3fc>
 800a606:	4d42      	ldr	r5, [pc, #264]	; (800a710 <_strtod_l+0x590>)
 800a608:	f1c4 040f 	rsb	r4, r4, #15
 800a60c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a610:	4652      	mov	r2, sl
 800a612:	465b      	mov	r3, fp
 800a614:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a618:	f7f6 f806 	bl	8000628 <__aeabi_dmul>
 800a61c:	9b06      	ldr	r3, [sp, #24]
 800a61e:	1b1c      	subs	r4, r3, r4
 800a620:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a624:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a628:	e78d      	b.n	800a546 <_strtod_l+0x3c6>
 800a62a:	f113 0f16 	cmn.w	r3, #22
 800a62e:	dba5      	blt.n	800a57c <_strtod_l+0x3fc>
 800a630:	4a37      	ldr	r2, [pc, #220]	; (800a710 <_strtod_l+0x590>)
 800a632:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a636:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a63a:	4650      	mov	r0, sl
 800a63c:	4659      	mov	r1, fp
 800a63e:	f7f6 f91d 	bl	800087c <__aeabi_ddiv>
 800a642:	e782      	b.n	800a54a <_strtod_l+0x3ca>
 800a644:	2300      	movs	r3, #0
 800a646:	4e33      	ldr	r6, [pc, #204]	; (800a714 <_strtod_l+0x594>)
 800a648:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a64c:	4650      	mov	r0, sl
 800a64e:	4659      	mov	r1, fp
 800a650:	461d      	mov	r5, r3
 800a652:	f1b8 0f01 	cmp.w	r8, #1
 800a656:	dc21      	bgt.n	800a69c <_strtod_l+0x51c>
 800a658:	b10b      	cbz	r3, 800a65e <_strtod_l+0x4de>
 800a65a:	4682      	mov	sl, r0
 800a65c:	468b      	mov	fp, r1
 800a65e:	4b2d      	ldr	r3, [pc, #180]	; (800a714 <_strtod_l+0x594>)
 800a660:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a664:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a668:	4652      	mov	r2, sl
 800a66a:	465b      	mov	r3, fp
 800a66c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a670:	f7f5 ffda 	bl	8000628 <__aeabi_dmul>
 800a674:	4b28      	ldr	r3, [pc, #160]	; (800a718 <_strtod_l+0x598>)
 800a676:	460a      	mov	r2, r1
 800a678:	400b      	ands	r3, r1
 800a67a:	4928      	ldr	r1, [pc, #160]	; (800a71c <_strtod_l+0x59c>)
 800a67c:	428b      	cmp	r3, r1
 800a67e:	4682      	mov	sl, r0
 800a680:	d898      	bhi.n	800a5b4 <_strtod_l+0x434>
 800a682:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a686:	428b      	cmp	r3, r1
 800a688:	bf86      	itte	hi
 800a68a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a724 <_strtod_l+0x5a4>
 800a68e:	f04f 3aff 	movhi.w	sl, #4294967295
 800a692:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a696:	2300      	movs	r3, #0
 800a698:	9304      	str	r3, [sp, #16]
 800a69a:	e077      	b.n	800a78c <_strtod_l+0x60c>
 800a69c:	f018 0f01 	tst.w	r8, #1
 800a6a0:	d006      	beq.n	800a6b0 <_strtod_l+0x530>
 800a6a2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6aa:	f7f5 ffbd 	bl	8000628 <__aeabi_dmul>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	3501      	adds	r5, #1
 800a6b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a6b6:	e7cc      	b.n	800a652 <_strtod_l+0x4d2>
 800a6b8:	d0ed      	beq.n	800a696 <_strtod_l+0x516>
 800a6ba:	f1c8 0800 	rsb	r8, r8, #0
 800a6be:	f018 020f 	ands.w	r2, r8, #15
 800a6c2:	d00a      	beq.n	800a6da <_strtod_l+0x55a>
 800a6c4:	4b12      	ldr	r3, [pc, #72]	; (800a710 <_strtod_l+0x590>)
 800a6c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6ca:	4650      	mov	r0, sl
 800a6cc:	4659      	mov	r1, fp
 800a6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d2:	f7f6 f8d3 	bl	800087c <__aeabi_ddiv>
 800a6d6:	4682      	mov	sl, r0
 800a6d8:	468b      	mov	fp, r1
 800a6da:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a6de:	d0da      	beq.n	800a696 <_strtod_l+0x516>
 800a6e0:	f1b8 0f1f 	cmp.w	r8, #31
 800a6e4:	dd20      	ble.n	800a728 <_strtod_l+0x5a8>
 800a6e6:	2400      	movs	r4, #0
 800a6e8:	46a0      	mov	r8, r4
 800a6ea:	9407      	str	r4, [sp, #28]
 800a6ec:	9405      	str	r4, [sp, #20]
 800a6ee:	2322      	movs	r3, #34	; 0x22
 800a6f0:	f04f 0a00 	mov.w	sl, #0
 800a6f4:	f04f 0b00 	mov.w	fp, #0
 800a6f8:	f8c9 3000 	str.w	r3, [r9]
 800a6fc:	e765      	b.n	800a5ca <_strtod_l+0x44a>
 800a6fe:	bf00      	nop
 800a700:	0800dccd 	.word	0x0800dccd
 800a704:	0800dd5b 	.word	0x0800dd5b
 800a708:	0800dcd5 	.word	0x0800dcd5
 800a70c:	0800dd18 	.word	0x0800dd18
 800a710:	0800de00 	.word	0x0800de00
 800a714:	0800ddd8 	.word	0x0800ddd8
 800a718:	7ff00000 	.word	0x7ff00000
 800a71c:	7ca00000 	.word	0x7ca00000
 800a720:	fff80000 	.word	0xfff80000
 800a724:	7fefffff 	.word	0x7fefffff
 800a728:	f018 0310 	ands.w	r3, r8, #16
 800a72c:	bf18      	it	ne
 800a72e:	236a      	movne	r3, #106	; 0x6a
 800a730:	4da0      	ldr	r5, [pc, #640]	; (800a9b4 <_strtod_l+0x834>)
 800a732:	9304      	str	r3, [sp, #16]
 800a734:	4650      	mov	r0, sl
 800a736:	4659      	mov	r1, fp
 800a738:	2300      	movs	r3, #0
 800a73a:	f1b8 0f00 	cmp.w	r8, #0
 800a73e:	f300 810a 	bgt.w	800a956 <_strtod_l+0x7d6>
 800a742:	b10b      	cbz	r3, 800a748 <_strtod_l+0x5c8>
 800a744:	4682      	mov	sl, r0
 800a746:	468b      	mov	fp, r1
 800a748:	9b04      	ldr	r3, [sp, #16]
 800a74a:	b1bb      	cbz	r3, 800a77c <_strtod_l+0x5fc>
 800a74c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a750:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a754:	2b00      	cmp	r3, #0
 800a756:	4659      	mov	r1, fp
 800a758:	dd10      	ble.n	800a77c <_strtod_l+0x5fc>
 800a75a:	2b1f      	cmp	r3, #31
 800a75c:	f340 8107 	ble.w	800a96e <_strtod_l+0x7ee>
 800a760:	2b34      	cmp	r3, #52	; 0x34
 800a762:	bfde      	ittt	le
 800a764:	3b20      	suble	r3, #32
 800a766:	f04f 32ff 	movle.w	r2, #4294967295
 800a76a:	fa02 f303 	lslle.w	r3, r2, r3
 800a76e:	f04f 0a00 	mov.w	sl, #0
 800a772:	bfcc      	ite	gt
 800a774:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a778:	ea03 0b01 	andle.w	fp, r3, r1
 800a77c:	2200      	movs	r2, #0
 800a77e:	2300      	movs	r3, #0
 800a780:	4650      	mov	r0, sl
 800a782:	4659      	mov	r1, fp
 800a784:	f7f6 f9b8 	bl	8000af8 <__aeabi_dcmpeq>
 800a788:	2800      	cmp	r0, #0
 800a78a:	d1ac      	bne.n	800a6e6 <_strtod_l+0x566>
 800a78c:	9b07      	ldr	r3, [sp, #28]
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	9a05      	ldr	r2, [sp, #20]
 800a792:	9908      	ldr	r1, [sp, #32]
 800a794:	4623      	mov	r3, r4
 800a796:	4648      	mov	r0, r9
 800a798:	f002 f896 	bl	800c8c8 <__s2b>
 800a79c:	9007      	str	r0, [sp, #28]
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	f43f af08 	beq.w	800a5b4 <_strtod_l+0x434>
 800a7a4:	9a06      	ldr	r2, [sp, #24]
 800a7a6:	9b06      	ldr	r3, [sp, #24]
 800a7a8:	2a00      	cmp	r2, #0
 800a7aa:	f1c3 0300 	rsb	r3, r3, #0
 800a7ae:	bfa8      	it	ge
 800a7b0:	2300      	movge	r3, #0
 800a7b2:	930e      	str	r3, [sp, #56]	; 0x38
 800a7b4:	2400      	movs	r4, #0
 800a7b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a7ba:	9316      	str	r3, [sp, #88]	; 0x58
 800a7bc:	46a0      	mov	r8, r4
 800a7be:	9b07      	ldr	r3, [sp, #28]
 800a7c0:	4648      	mov	r0, r9
 800a7c2:	6859      	ldr	r1, [r3, #4]
 800a7c4:	f001 fffa 	bl	800c7bc <_Balloc>
 800a7c8:	9005      	str	r0, [sp, #20]
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	f43f aef6 	beq.w	800a5bc <_strtod_l+0x43c>
 800a7d0:	9b07      	ldr	r3, [sp, #28]
 800a7d2:	691a      	ldr	r2, [r3, #16]
 800a7d4:	3202      	adds	r2, #2
 800a7d6:	f103 010c 	add.w	r1, r3, #12
 800a7da:	0092      	lsls	r2, r2, #2
 800a7dc:	300c      	adds	r0, #12
 800a7de:	f7fe fd8f 	bl	8009300 <memcpy>
 800a7e2:	aa1e      	add	r2, sp, #120	; 0x78
 800a7e4:	a91d      	add	r1, sp, #116	; 0x74
 800a7e6:	ec4b ab10 	vmov	d0, sl, fp
 800a7ea:	4648      	mov	r0, r9
 800a7ec:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a7f0:	f002 fb26 	bl	800ce40 <__d2b>
 800a7f4:	901c      	str	r0, [sp, #112]	; 0x70
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	f43f aee0 	beq.w	800a5bc <_strtod_l+0x43c>
 800a7fc:	2101      	movs	r1, #1
 800a7fe:	4648      	mov	r0, r9
 800a800:	f002 f8ee 	bl	800c9e0 <__i2b>
 800a804:	4680      	mov	r8, r0
 800a806:	2800      	cmp	r0, #0
 800a808:	f43f aed8 	beq.w	800a5bc <_strtod_l+0x43c>
 800a80c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a80e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a810:	2e00      	cmp	r6, #0
 800a812:	bfab      	itete	ge
 800a814:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a816:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a818:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a81a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800a81c:	bfac      	ite	ge
 800a81e:	18f7      	addge	r7, r6, r3
 800a820:	1b9d      	sublt	r5, r3, r6
 800a822:	9b04      	ldr	r3, [sp, #16]
 800a824:	1af6      	subs	r6, r6, r3
 800a826:	4416      	add	r6, r2
 800a828:	4b63      	ldr	r3, [pc, #396]	; (800a9b8 <_strtod_l+0x838>)
 800a82a:	3e01      	subs	r6, #1
 800a82c:	429e      	cmp	r6, r3
 800a82e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a832:	f280 80af 	bge.w	800a994 <_strtod_l+0x814>
 800a836:	1b9b      	subs	r3, r3, r6
 800a838:	2b1f      	cmp	r3, #31
 800a83a:	eba2 0203 	sub.w	r2, r2, r3
 800a83e:	f04f 0101 	mov.w	r1, #1
 800a842:	f300 809b 	bgt.w	800a97c <_strtod_l+0x7fc>
 800a846:	fa01 f303 	lsl.w	r3, r1, r3
 800a84a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a84c:	2300      	movs	r3, #0
 800a84e:	930a      	str	r3, [sp, #40]	; 0x28
 800a850:	18be      	adds	r6, r7, r2
 800a852:	9b04      	ldr	r3, [sp, #16]
 800a854:	42b7      	cmp	r7, r6
 800a856:	4415      	add	r5, r2
 800a858:	441d      	add	r5, r3
 800a85a:	463b      	mov	r3, r7
 800a85c:	bfa8      	it	ge
 800a85e:	4633      	movge	r3, r6
 800a860:	42ab      	cmp	r3, r5
 800a862:	bfa8      	it	ge
 800a864:	462b      	movge	r3, r5
 800a866:	2b00      	cmp	r3, #0
 800a868:	bfc2      	ittt	gt
 800a86a:	1af6      	subgt	r6, r6, r3
 800a86c:	1aed      	subgt	r5, r5, r3
 800a86e:	1aff      	subgt	r7, r7, r3
 800a870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a872:	b1bb      	cbz	r3, 800a8a4 <_strtod_l+0x724>
 800a874:	4641      	mov	r1, r8
 800a876:	461a      	mov	r2, r3
 800a878:	4648      	mov	r0, r9
 800a87a:	f002 f951 	bl	800cb20 <__pow5mult>
 800a87e:	4680      	mov	r8, r0
 800a880:	2800      	cmp	r0, #0
 800a882:	f43f ae9b 	beq.w	800a5bc <_strtod_l+0x43c>
 800a886:	4601      	mov	r1, r0
 800a888:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a88a:	4648      	mov	r0, r9
 800a88c:	f002 f8b1 	bl	800c9f2 <__multiply>
 800a890:	900c      	str	r0, [sp, #48]	; 0x30
 800a892:	2800      	cmp	r0, #0
 800a894:	f43f ae92 	beq.w	800a5bc <_strtod_l+0x43c>
 800a898:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a89a:	4648      	mov	r0, r9
 800a89c:	f001 ffc2 	bl	800c824 <_Bfree>
 800a8a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8a2:	931c      	str	r3, [sp, #112]	; 0x70
 800a8a4:	2e00      	cmp	r6, #0
 800a8a6:	dc7a      	bgt.n	800a99e <_strtod_l+0x81e>
 800a8a8:	9b06      	ldr	r3, [sp, #24]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	dd08      	ble.n	800a8c0 <_strtod_l+0x740>
 800a8ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a8b0:	9905      	ldr	r1, [sp, #20]
 800a8b2:	4648      	mov	r0, r9
 800a8b4:	f002 f934 	bl	800cb20 <__pow5mult>
 800a8b8:	9005      	str	r0, [sp, #20]
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	f43f ae7e 	beq.w	800a5bc <_strtod_l+0x43c>
 800a8c0:	2d00      	cmp	r5, #0
 800a8c2:	dd08      	ble.n	800a8d6 <_strtod_l+0x756>
 800a8c4:	462a      	mov	r2, r5
 800a8c6:	9905      	ldr	r1, [sp, #20]
 800a8c8:	4648      	mov	r0, r9
 800a8ca:	f002 f977 	bl	800cbbc <__lshift>
 800a8ce:	9005      	str	r0, [sp, #20]
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	f43f ae73 	beq.w	800a5bc <_strtod_l+0x43c>
 800a8d6:	2f00      	cmp	r7, #0
 800a8d8:	dd08      	ble.n	800a8ec <_strtod_l+0x76c>
 800a8da:	4641      	mov	r1, r8
 800a8dc:	463a      	mov	r2, r7
 800a8de:	4648      	mov	r0, r9
 800a8e0:	f002 f96c 	bl	800cbbc <__lshift>
 800a8e4:	4680      	mov	r8, r0
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	f43f ae68 	beq.w	800a5bc <_strtod_l+0x43c>
 800a8ec:	9a05      	ldr	r2, [sp, #20]
 800a8ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a8f0:	4648      	mov	r0, r9
 800a8f2:	f002 f9d1 	bl	800cc98 <__mdiff>
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	f43f ae5f 	beq.w	800a5bc <_strtod_l+0x43c>
 800a8fe:	68c3      	ldr	r3, [r0, #12]
 800a900:	930c      	str	r3, [sp, #48]	; 0x30
 800a902:	2300      	movs	r3, #0
 800a904:	60c3      	str	r3, [r0, #12]
 800a906:	4641      	mov	r1, r8
 800a908:	f002 f9ac 	bl	800cc64 <__mcmp>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	da55      	bge.n	800a9bc <_strtod_l+0x83c>
 800a910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a912:	b9e3      	cbnz	r3, 800a94e <_strtod_l+0x7ce>
 800a914:	f1ba 0f00 	cmp.w	sl, #0
 800a918:	d119      	bne.n	800a94e <_strtod_l+0x7ce>
 800a91a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a91e:	b9b3      	cbnz	r3, 800a94e <_strtod_l+0x7ce>
 800a920:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a924:	0d1b      	lsrs	r3, r3, #20
 800a926:	051b      	lsls	r3, r3, #20
 800a928:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a92c:	d90f      	bls.n	800a94e <_strtod_l+0x7ce>
 800a92e:	6963      	ldr	r3, [r4, #20]
 800a930:	b913      	cbnz	r3, 800a938 <_strtod_l+0x7b8>
 800a932:	6923      	ldr	r3, [r4, #16]
 800a934:	2b01      	cmp	r3, #1
 800a936:	dd0a      	ble.n	800a94e <_strtod_l+0x7ce>
 800a938:	4621      	mov	r1, r4
 800a93a:	2201      	movs	r2, #1
 800a93c:	4648      	mov	r0, r9
 800a93e:	f002 f93d 	bl	800cbbc <__lshift>
 800a942:	4641      	mov	r1, r8
 800a944:	4604      	mov	r4, r0
 800a946:	f002 f98d 	bl	800cc64 <__mcmp>
 800a94a:	2800      	cmp	r0, #0
 800a94c:	dc67      	bgt.n	800aa1e <_strtod_l+0x89e>
 800a94e:	9b04      	ldr	r3, [sp, #16]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d171      	bne.n	800aa38 <_strtod_l+0x8b8>
 800a954:	e63d      	b.n	800a5d2 <_strtod_l+0x452>
 800a956:	f018 0f01 	tst.w	r8, #1
 800a95a:	d004      	beq.n	800a966 <_strtod_l+0x7e6>
 800a95c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a960:	f7f5 fe62 	bl	8000628 <__aeabi_dmul>
 800a964:	2301      	movs	r3, #1
 800a966:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a96a:	3508      	adds	r5, #8
 800a96c:	e6e5      	b.n	800a73a <_strtod_l+0x5ba>
 800a96e:	f04f 32ff 	mov.w	r2, #4294967295
 800a972:	fa02 f303 	lsl.w	r3, r2, r3
 800a976:	ea03 0a0a 	and.w	sl, r3, sl
 800a97a:	e6ff      	b.n	800a77c <_strtod_l+0x5fc>
 800a97c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a980:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a984:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a988:	36e2      	adds	r6, #226	; 0xe2
 800a98a:	fa01 f306 	lsl.w	r3, r1, r6
 800a98e:	930a      	str	r3, [sp, #40]	; 0x28
 800a990:	910f      	str	r1, [sp, #60]	; 0x3c
 800a992:	e75d      	b.n	800a850 <_strtod_l+0x6d0>
 800a994:	2300      	movs	r3, #0
 800a996:	930a      	str	r3, [sp, #40]	; 0x28
 800a998:	2301      	movs	r3, #1
 800a99a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a99c:	e758      	b.n	800a850 <_strtod_l+0x6d0>
 800a99e:	4632      	mov	r2, r6
 800a9a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a9a2:	4648      	mov	r0, r9
 800a9a4:	f002 f90a 	bl	800cbbc <__lshift>
 800a9a8:	901c      	str	r0, [sp, #112]	; 0x70
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	f47f af7c 	bne.w	800a8a8 <_strtod_l+0x728>
 800a9b0:	e604      	b.n	800a5bc <_strtod_l+0x43c>
 800a9b2:	bf00      	nop
 800a9b4:	0800dd30 	.word	0x0800dd30
 800a9b8:	fffffc02 	.word	0xfffffc02
 800a9bc:	465d      	mov	r5, fp
 800a9be:	f040 8086 	bne.w	800aace <_strtod_l+0x94e>
 800a9c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9c8:	b32a      	cbz	r2, 800aa16 <_strtod_l+0x896>
 800a9ca:	4aaf      	ldr	r2, [pc, #700]	; (800ac88 <_strtod_l+0xb08>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d153      	bne.n	800aa78 <_strtod_l+0x8f8>
 800a9d0:	9b04      	ldr	r3, [sp, #16]
 800a9d2:	4650      	mov	r0, sl
 800a9d4:	b1d3      	cbz	r3, 800aa0c <_strtod_l+0x88c>
 800a9d6:	4aad      	ldr	r2, [pc, #692]	; (800ac8c <_strtod_l+0xb0c>)
 800a9d8:	402a      	ands	r2, r5
 800a9da:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a9de:	f04f 31ff 	mov.w	r1, #4294967295
 800a9e2:	d816      	bhi.n	800aa12 <_strtod_l+0x892>
 800a9e4:	0d12      	lsrs	r2, r2, #20
 800a9e6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a9ea:	fa01 f303 	lsl.w	r3, r1, r3
 800a9ee:	4298      	cmp	r0, r3
 800a9f0:	d142      	bne.n	800aa78 <_strtod_l+0x8f8>
 800a9f2:	4ba7      	ldr	r3, [pc, #668]	; (800ac90 <_strtod_l+0xb10>)
 800a9f4:	429d      	cmp	r5, r3
 800a9f6:	d102      	bne.n	800a9fe <_strtod_l+0x87e>
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	f43f addf 	beq.w	800a5bc <_strtod_l+0x43c>
 800a9fe:	4ba3      	ldr	r3, [pc, #652]	; (800ac8c <_strtod_l+0xb0c>)
 800aa00:	402b      	ands	r3, r5
 800aa02:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800aa06:	f04f 0a00 	mov.w	sl, #0
 800aa0a:	e7a0      	b.n	800a94e <_strtod_l+0x7ce>
 800aa0c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa10:	e7ed      	b.n	800a9ee <_strtod_l+0x86e>
 800aa12:	460b      	mov	r3, r1
 800aa14:	e7eb      	b.n	800a9ee <_strtod_l+0x86e>
 800aa16:	bb7b      	cbnz	r3, 800aa78 <_strtod_l+0x8f8>
 800aa18:	f1ba 0f00 	cmp.w	sl, #0
 800aa1c:	d12c      	bne.n	800aa78 <_strtod_l+0x8f8>
 800aa1e:	9904      	ldr	r1, [sp, #16]
 800aa20:	4a9a      	ldr	r2, [pc, #616]	; (800ac8c <_strtod_l+0xb0c>)
 800aa22:	465b      	mov	r3, fp
 800aa24:	b1f1      	cbz	r1, 800aa64 <_strtod_l+0x8e4>
 800aa26:	ea02 010b 	and.w	r1, r2, fp
 800aa2a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aa2e:	dc19      	bgt.n	800aa64 <_strtod_l+0x8e4>
 800aa30:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aa34:	f77f ae5b 	ble.w	800a6ee <_strtod_l+0x56e>
 800aa38:	4a96      	ldr	r2, [pc, #600]	; (800ac94 <_strtod_l+0xb14>)
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800aa40:	4650      	mov	r0, sl
 800aa42:	4659      	mov	r1, fp
 800aa44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800aa48:	f7f5 fdee 	bl	8000628 <__aeabi_dmul>
 800aa4c:	4682      	mov	sl, r0
 800aa4e:	468b      	mov	fp, r1
 800aa50:	2900      	cmp	r1, #0
 800aa52:	f47f adbe 	bne.w	800a5d2 <_strtod_l+0x452>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f47f adbb 	bne.w	800a5d2 <_strtod_l+0x452>
 800aa5c:	2322      	movs	r3, #34	; 0x22
 800aa5e:	f8c9 3000 	str.w	r3, [r9]
 800aa62:	e5b6      	b.n	800a5d2 <_strtod_l+0x452>
 800aa64:	4013      	ands	r3, r2
 800aa66:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aa6a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aa6e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aa72:	f04f 3aff 	mov.w	sl, #4294967295
 800aa76:	e76a      	b.n	800a94e <_strtod_l+0x7ce>
 800aa78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa7a:	b193      	cbz	r3, 800aaa2 <_strtod_l+0x922>
 800aa7c:	422b      	tst	r3, r5
 800aa7e:	f43f af66 	beq.w	800a94e <_strtod_l+0x7ce>
 800aa82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa84:	9a04      	ldr	r2, [sp, #16]
 800aa86:	4650      	mov	r0, sl
 800aa88:	4659      	mov	r1, fp
 800aa8a:	b173      	cbz	r3, 800aaaa <_strtod_l+0x92a>
 800aa8c:	f7ff fb5b 	bl	800a146 <sulp>
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aa98:	f7f5 fc10 	bl	80002bc <__adddf3>
 800aa9c:	4682      	mov	sl, r0
 800aa9e:	468b      	mov	fp, r1
 800aaa0:	e755      	b.n	800a94e <_strtod_l+0x7ce>
 800aaa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aaa4:	ea13 0f0a 	tst.w	r3, sl
 800aaa8:	e7e9      	b.n	800aa7e <_strtod_l+0x8fe>
 800aaaa:	f7ff fb4c 	bl	800a146 <sulp>
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aab6:	f7f5 fbff 	bl	80002b8 <__aeabi_dsub>
 800aaba:	2200      	movs	r2, #0
 800aabc:	2300      	movs	r3, #0
 800aabe:	4682      	mov	sl, r0
 800aac0:	468b      	mov	fp, r1
 800aac2:	f7f6 f819 	bl	8000af8 <__aeabi_dcmpeq>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f47f ae11 	bne.w	800a6ee <_strtod_l+0x56e>
 800aacc:	e73f      	b.n	800a94e <_strtod_l+0x7ce>
 800aace:	4641      	mov	r1, r8
 800aad0:	4620      	mov	r0, r4
 800aad2:	f002 fa04 	bl	800cede <__ratio>
 800aad6:	ec57 6b10 	vmov	r6, r7, d0
 800aada:	2200      	movs	r2, #0
 800aadc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aae0:	ee10 0a10 	vmov	r0, s0
 800aae4:	4639      	mov	r1, r7
 800aae6:	f7f6 f81b 	bl	8000b20 <__aeabi_dcmple>
 800aaea:	2800      	cmp	r0, #0
 800aaec:	d077      	beq.n	800abde <_strtod_l+0xa5e>
 800aaee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d04a      	beq.n	800ab8a <_strtod_l+0xa0a>
 800aaf4:	4b68      	ldr	r3, [pc, #416]	; (800ac98 <_strtod_l+0xb18>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800aafc:	4f66      	ldr	r7, [pc, #408]	; (800ac98 <_strtod_l+0xb18>)
 800aafe:	2600      	movs	r6, #0
 800ab00:	4b62      	ldr	r3, [pc, #392]	; (800ac8c <_strtod_l+0xb0c>)
 800ab02:	402b      	ands	r3, r5
 800ab04:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab08:	4b64      	ldr	r3, [pc, #400]	; (800ac9c <_strtod_l+0xb1c>)
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	f040 80ce 	bne.w	800acac <_strtod_l+0xb2c>
 800ab10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab18:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800ab1c:	ec4b ab10 	vmov	d0, sl, fp
 800ab20:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ab24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ab28:	f002 f914 	bl	800cd54 <__ulp>
 800ab2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab30:	ec53 2b10 	vmov	r2, r3, d0
 800ab34:	f7f5 fd78 	bl	8000628 <__aeabi_dmul>
 800ab38:	4652      	mov	r2, sl
 800ab3a:	465b      	mov	r3, fp
 800ab3c:	f7f5 fbbe 	bl	80002bc <__adddf3>
 800ab40:	460b      	mov	r3, r1
 800ab42:	4952      	ldr	r1, [pc, #328]	; (800ac8c <_strtod_l+0xb0c>)
 800ab44:	4a56      	ldr	r2, [pc, #344]	; (800aca0 <_strtod_l+0xb20>)
 800ab46:	4019      	ands	r1, r3
 800ab48:	4291      	cmp	r1, r2
 800ab4a:	4682      	mov	sl, r0
 800ab4c:	d95b      	bls.n	800ac06 <_strtod_l+0xa86>
 800ab4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab50:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d103      	bne.n	800ab60 <_strtod_l+0x9e0>
 800ab58:	9b08      	ldr	r3, [sp, #32]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	f43f ad2e 	beq.w	800a5bc <_strtod_l+0x43c>
 800ab60:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800ac90 <_strtod_l+0xb10>
 800ab64:	f04f 3aff 	mov.w	sl, #4294967295
 800ab68:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ab6a:	4648      	mov	r0, r9
 800ab6c:	f001 fe5a 	bl	800c824 <_Bfree>
 800ab70:	9905      	ldr	r1, [sp, #20]
 800ab72:	4648      	mov	r0, r9
 800ab74:	f001 fe56 	bl	800c824 <_Bfree>
 800ab78:	4641      	mov	r1, r8
 800ab7a:	4648      	mov	r0, r9
 800ab7c:	f001 fe52 	bl	800c824 <_Bfree>
 800ab80:	4621      	mov	r1, r4
 800ab82:	4648      	mov	r0, r9
 800ab84:	f001 fe4e 	bl	800c824 <_Bfree>
 800ab88:	e619      	b.n	800a7be <_strtod_l+0x63e>
 800ab8a:	f1ba 0f00 	cmp.w	sl, #0
 800ab8e:	d11a      	bne.n	800abc6 <_strtod_l+0xa46>
 800ab90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab94:	b9eb      	cbnz	r3, 800abd2 <_strtod_l+0xa52>
 800ab96:	2200      	movs	r2, #0
 800ab98:	4b3f      	ldr	r3, [pc, #252]	; (800ac98 <_strtod_l+0xb18>)
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	4639      	mov	r1, r7
 800ab9e:	f7f5 ffb5 	bl	8000b0c <__aeabi_dcmplt>
 800aba2:	b9c8      	cbnz	r0, 800abd8 <_strtod_l+0xa58>
 800aba4:	4630      	mov	r0, r6
 800aba6:	4639      	mov	r1, r7
 800aba8:	2200      	movs	r2, #0
 800abaa:	4b3e      	ldr	r3, [pc, #248]	; (800aca4 <_strtod_l+0xb24>)
 800abac:	f7f5 fd3c 	bl	8000628 <__aeabi_dmul>
 800abb0:	4606      	mov	r6, r0
 800abb2:	460f      	mov	r7, r1
 800abb4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800abb8:	9618      	str	r6, [sp, #96]	; 0x60
 800abba:	9319      	str	r3, [sp, #100]	; 0x64
 800abbc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800abc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800abc4:	e79c      	b.n	800ab00 <_strtod_l+0x980>
 800abc6:	f1ba 0f01 	cmp.w	sl, #1
 800abca:	d102      	bne.n	800abd2 <_strtod_l+0xa52>
 800abcc:	2d00      	cmp	r5, #0
 800abce:	f43f ad8e 	beq.w	800a6ee <_strtod_l+0x56e>
 800abd2:	2200      	movs	r2, #0
 800abd4:	4b34      	ldr	r3, [pc, #208]	; (800aca8 <_strtod_l+0xb28>)
 800abd6:	e78f      	b.n	800aaf8 <_strtod_l+0x978>
 800abd8:	2600      	movs	r6, #0
 800abda:	4f32      	ldr	r7, [pc, #200]	; (800aca4 <_strtod_l+0xb24>)
 800abdc:	e7ea      	b.n	800abb4 <_strtod_l+0xa34>
 800abde:	4b31      	ldr	r3, [pc, #196]	; (800aca4 <_strtod_l+0xb24>)
 800abe0:	4630      	mov	r0, r6
 800abe2:	4639      	mov	r1, r7
 800abe4:	2200      	movs	r2, #0
 800abe6:	f7f5 fd1f 	bl	8000628 <__aeabi_dmul>
 800abea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abec:	4606      	mov	r6, r0
 800abee:	460f      	mov	r7, r1
 800abf0:	b933      	cbnz	r3, 800ac00 <_strtod_l+0xa80>
 800abf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abf6:	9010      	str	r0, [sp, #64]	; 0x40
 800abf8:	9311      	str	r3, [sp, #68]	; 0x44
 800abfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800abfe:	e7df      	b.n	800abc0 <_strtod_l+0xa40>
 800ac00:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ac04:	e7f9      	b.n	800abfa <_strtod_l+0xa7a>
 800ac06:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ac0a:	9b04      	ldr	r3, [sp, #16]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d1ab      	bne.n	800ab68 <_strtod_l+0x9e8>
 800ac10:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac14:	0d1b      	lsrs	r3, r3, #20
 800ac16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac18:	051b      	lsls	r3, r3, #20
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	465d      	mov	r5, fp
 800ac1e:	d1a3      	bne.n	800ab68 <_strtod_l+0x9e8>
 800ac20:	4639      	mov	r1, r7
 800ac22:	4630      	mov	r0, r6
 800ac24:	f7f5 ffb0 	bl	8000b88 <__aeabi_d2iz>
 800ac28:	f7f5 fc94 	bl	8000554 <__aeabi_i2d>
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4602      	mov	r2, r0
 800ac30:	4639      	mov	r1, r7
 800ac32:	4630      	mov	r0, r6
 800ac34:	f7f5 fb40 	bl	80002b8 <__aeabi_dsub>
 800ac38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac3a:	4606      	mov	r6, r0
 800ac3c:	460f      	mov	r7, r1
 800ac3e:	b933      	cbnz	r3, 800ac4e <_strtod_l+0xace>
 800ac40:	f1ba 0f00 	cmp.w	sl, #0
 800ac44:	d103      	bne.n	800ac4e <_strtod_l+0xace>
 800ac46:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800ac4a:	2d00      	cmp	r5, #0
 800ac4c:	d06d      	beq.n	800ad2a <_strtod_l+0xbaa>
 800ac4e:	a30a      	add	r3, pc, #40	; (adr r3, 800ac78 <_strtod_l+0xaf8>)
 800ac50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac54:	4630      	mov	r0, r6
 800ac56:	4639      	mov	r1, r7
 800ac58:	f7f5 ff58 	bl	8000b0c <__aeabi_dcmplt>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	f47f acb8 	bne.w	800a5d2 <_strtod_l+0x452>
 800ac62:	a307      	add	r3, pc, #28	; (adr r3, 800ac80 <_strtod_l+0xb00>)
 800ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac68:	4630      	mov	r0, r6
 800ac6a:	4639      	mov	r1, r7
 800ac6c:	f7f5 ff6c 	bl	8000b48 <__aeabi_dcmpgt>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	f43f af79 	beq.w	800ab68 <_strtod_l+0x9e8>
 800ac76:	e4ac      	b.n	800a5d2 <_strtod_l+0x452>
 800ac78:	94a03595 	.word	0x94a03595
 800ac7c:	3fdfffff 	.word	0x3fdfffff
 800ac80:	35afe535 	.word	0x35afe535
 800ac84:	3fe00000 	.word	0x3fe00000
 800ac88:	000fffff 	.word	0x000fffff
 800ac8c:	7ff00000 	.word	0x7ff00000
 800ac90:	7fefffff 	.word	0x7fefffff
 800ac94:	39500000 	.word	0x39500000
 800ac98:	3ff00000 	.word	0x3ff00000
 800ac9c:	7fe00000 	.word	0x7fe00000
 800aca0:	7c9fffff 	.word	0x7c9fffff
 800aca4:	3fe00000 	.word	0x3fe00000
 800aca8:	bff00000 	.word	0xbff00000
 800acac:	9b04      	ldr	r3, [sp, #16]
 800acae:	b333      	cbz	r3, 800acfe <_strtod_l+0xb7e>
 800acb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acb2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800acb6:	d822      	bhi.n	800acfe <_strtod_l+0xb7e>
 800acb8:	a327      	add	r3, pc, #156	; (adr r3, 800ad58 <_strtod_l+0xbd8>)
 800acba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbe:	4630      	mov	r0, r6
 800acc0:	4639      	mov	r1, r7
 800acc2:	f7f5 ff2d 	bl	8000b20 <__aeabi_dcmple>
 800acc6:	b1a0      	cbz	r0, 800acf2 <_strtod_l+0xb72>
 800acc8:	4639      	mov	r1, r7
 800acca:	4630      	mov	r0, r6
 800accc:	f7f5 ff84 	bl	8000bd8 <__aeabi_d2uiz>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	bf08      	it	eq
 800acd4:	2001      	moveq	r0, #1
 800acd6:	f7f5 fc2d 	bl	8000534 <__aeabi_ui2d>
 800acda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acdc:	4606      	mov	r6, r0
 800acde:	460f      	mov	r7, r1
 800ace0:	bb03      	cbnz	r3, 800ad24 <_strtod_l+0xba4>
 800ace2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ace6:	9012      	str	r0, [sp, #72]	; 0x48
 800ace8:	9313      	str	r3, [sp, #76]	; 0x4c
 800acea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800acee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800acf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acf4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acf6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800acfa:	1a9b      	subs	r3, r3, r2
 800acfc:	930b      	str	r3, [sp, #44]	; 0x2c
 800acfe:	ed9d 0b08 	vldr	d0, [sp, #32]
 800ad02:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800ad06:	f002 f825 	bl	800cd54 <__ulp>
 800ad0a:	4650      	mov	r0, sl
 800ad0c:	ec53 2b10 	vmov	r2, r3, d0
 800ad10:	4659      	mov	r1, fp
 800ad12:	f7f5 fc89 	bl	8000628 <__aeabi_dmul>
 800ad16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad1a:	f7f5 facf 	bl	80002bc <__adddf3>
 800ad1e:	4682      	mov	sl, r0
 800ad20:	468b      	mov	fp, r1
 800ad22:	e772      	b.n	800ac0a <_strtod_l+0xa8a>
 800ad24:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800ad28:	e7df      	b.n	800acea <_strtod_l+0xb6a>
 800ad2a:	a30d      	add	r3, pc, #52	; (adr r3, 800ad60 <_strtod_l+0xbe0>)
 800ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad30:	f7f5 feec 	bl	8000b0c <__aeabi_dcmplt>
 800ad34:	e79c      	b.n	800ac70 <_strtod_l+0xaf0>
 800ad36:	2300      	movs	r3, #0
 800ad38:	930d      	str	r3, [sp, #52]	; 0x34
 800ad3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad3e:	6013      	str	r3, [r2, #0]
 800ad40:	f7ff ba61 	b.w	800a206 <_strtod_l+0x86>
 800ad44:	2b65      	cmp	r3, #101	; 0x65
 800ad46:	f04f 0200 	mov.w	r2, #0
 800ad4a:	f43f ab4e 	beq.w	800a3ea <_strtod_l+0x26a>
 800ad4e:	2101      	movs	r1, #1
 800ad50:	4614      	mov	r4, r2
 800ad52:	9104      	str	r1, [sp, #16]
 800ad54:	f7ff bacb 	b.w	800a2ee <_strtod_l+0x16e>
 800ad58:	ffc00000 	.word	0xffc00000
 800ad5c:	41dfffff 	.word	0x41dfffff
 800ad60:	94a03595 	.word	0x94a03595
 800ad64:	3fcfffff 	.word	0x3fcfffff

0800ad68 <_strtod_r>:
 800ad68:	4b05      	ldr	r3, [pc, #20]	; (800ad80 <_strtod_r+0x18>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	b410      	push	{r4}
 800ad6e:	6a1b      	ldr	r3, [r3, #32]
 800ad70:	4c04      	ldr	r4, [pc, #16]	; (800ad84 <_strtod_r+0x1c>)
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	bf08      	it	eq
 800ad76:	4623      	moveq	r3, r4
 800ad78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad7c:	f7ff ba00 	b.w	800a180 <_strtod_l>
 800ad80:	2000000c 	.word	0x2000000c
 800ad84:	20000070 	.word	0x20000070

0800ad88 <strtok>:
 800ad88:	4b13      	ldr	r3, [pc, #76]	; (800add8 <strtok+0x50>)
 800ad8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad8e:	681d      	ldr	r5, [r3, #0]
 800ad90:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800ad92:	4606      	mov	r6, r0
 800ad94:	460f      	mov	r7, r1
 800ad96:	b9b4      	cbnz	r4, 800adc6 <strtok+0x3e>
 800ad98:	2050      	movs	r0, #80	; 0x50
 800ad9a:	f001 fcf5 	bl	800c788 <malloc>
 800ad9e:	65a8      	str	r0, [r5, #88]	; 0x58
 800ada0:	e9c0 4400 	strd	r4, r4, [r0]
 800ada4:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ada8:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800adac:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800adb0:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800adb4:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800adb8:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800adbc:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800adc0:	6184      	str	r4, [r0, #24]
 800adc2:	7704      	strb	r4, [r0, #28]
 800adc4:	6244      	str	r4, [r0, #36]	; 0x24
 800adc6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800adc8:	4639      	mov	r1, r7
 800adca:	4630      	mov	r0, r6
 800adcc:	2301      	movs	r3, #1
 800adce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800add2:	f000 b803 	b.w	800addc <__strtok_r>
 800add6:	bf00      	nop
 800add8:	2000000c 	.word	0x2000000c

0800addc <__strtok_r>:
 800addc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adde:	b918      	cbnz	r0, 800ade8 <__strtok_r+0xc>
 800ade0:	6810      	ldr	r0, [r2, #0]
 800ade2:	b908      	cbnz	r0, 800ade8 <__strtok_r+0xc>
 800ade4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ade6:	4620      	mov	r0, r4
 800ade8:	4604      	mov	r4, r0
 800adea:	460f      	mov	r7, r1
 800adec:	f814 5b01 	ldrb.w	r5, [r4], #1
 800adf0:	f817 6b01 	ldrb.w	r6, [r7], #1
 800adf4:	b91e      	cbnz	r6, 800adfe <__strtok_r+0x22>
 800adf6:	b96d      	cbnz	r5, 800ae14 <__strtok_r+0x38>
 800adf8:	6015      	str	r5, [r2, #0]
 800adfa:	4628      	mov	r0, r5
 800adfc:	e7f2      	b.n	800ade4 <__strtok_r+0x8>
 800adfe:	42b5      	cmp	r5, r6
 800ae00:	d1f6      	bne.n	800adf0 <__strtok_r+0x14>
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1ef      	bne.n	800ade6 <__strtok_r+0xa>
 800ae06:	6014      	str	r4, [r2, #0]
 800ae08:	7003      	strb	r3, [r0, #0]
 800ae0a:	e7eb      	b.n	800ade4 <__strtok_r+0x8>
 800ae0c:	462b      	mov	r3, r5
 800ae0e:	e00d      	b.n	800ae2c <__strtok_r+0x50>
 800ae10:	b926      	cbnz	r6, 800ae1c <__strtok_r+0x40>
 800ae12:	461c      	mov	r4, r3
 800ae14:	4623      	mov	r3, r4
 800ae16:	460f      	mov	r7, r1
 800ae18:	f813 5b01 	ldrb.w	r5, [r3], #1
 800ae1c:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ae20:	42b5      	cmp	r5, r6
 800ae22:	d1f5      	bne.n	800ae10 <__strtok_r+0x34>
 800ae24:	2d00      	cmp	r5, #0
 800ae26:	d0f1      	beq.n	800ae0c <__strtok_r+0x30>
 800ae28:	2100      	movs	r1, #0
 800ae2a:	7021      	strb	r1, [r4, #0]
 800ae2c:	6013      	str	r3, [r2, #0]
 800ae2e:	e7d9      	b.n	800ade4 <__strtok_r+0x8>

0800ae30 <_strtol_l.isra.0>:
 800ae30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae34:	4680      	mov	r8, r0
 800ae36:	4689      	mov	r9, r1
 800ae38:	4692      	mov	sl, r2
 800ae3a:	461e      	mov	r6, r3
 800ae3c:	460f      	mov	r7, r1
 800ae3e:	463d      	mov	r5, r7
 800ae40:	9808      	ldr	r0, [sp, #32]
 800ae42:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae46:	f001 fc27 	bl	800c698 <__locale_ctype_ptr_l>
 800ae4a:	4420      	add	r0, r4
 800ae4c:	7843      	ldrb	r3, [r0, #1]
 800ae4e:	f013 0308 	ands.w	r3, r3, #8
 800ae52:	d132      	bne.n	800aeba <_strtol_l.isra.0+0x8a>
 800ae54:	2c2d      	cmp	r4, #45	; 0x2d
 800ae56:	d132      	bne.n	800aebe <_strtol_l.isra.0+0x8e>
 800ae58:	787c      	ldrb	r4, [r7, #1]
 800ae5a:	1cbd      	adds	r5, r7, #2
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	2e00      	cmp	r6, #0
 800ae60:	d05d      	beq.n	800af1e <_strtol_l.isra.0+0xee>
 800ae62:	2e10      	cmp	r6, #16
 800ae64:	d109      	bne.n	800ae7a <_strtol_l.isra.0+0x4a>
 800ae66:	2c30      	cmp	r4, #48	; 0x30
 800ae68:	d107      	bne.n	800ae7a <_strtol_l.isra.0+0x4a>
 800ae6a:	782b      	ldrb	r3, [r5, #0]
 800ae6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ae70:	2b58      	cmp	r3, #88	; 0x58
 800ae72:	d14f      	bne.n	800af14 <_strtol_l.isra.0+0xe4>
 800ae74:	786c      	ldrb	r4, [r5, #1]
 800ae76:	2610      	movs	r6, #16
 800ae78:	3502      	adds	r5, #2
 800ae7a:	2a00      	cmp	r2, #0
 800ae7c:	bf14      	ite	ne
 800ae7e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800ae82:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800ae86:	2700      	movs	r7, #0
 800ae88:	fbb1 fcf6 	udiv	ip, r1, r6
 800ae8c:	4638      	mov	r0, r7
 800ae8e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800ae92:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800ae96:	2b09      	cmp	r3, #9
 800ae98:	d817      	bhi.n	800aeca <_strtol_l.isra.0+0x9a>
 800ae9a:	461c      	mov	r4, r3
 800ae9c:	42a6      	cmp	r6, r4
 800ae9e:	dd23      	ble.n	800aee8 <_strtol_l.isra.0+0xb8>
 800aea0:	1c7b      	adds	r3, r7, #1
 800aea2:	d007      	beq.n	800aeb4 <_strtol_l.isra.0+0x84>
 800aea4:	4584      	cmp	ip, r0
 800aea6:	d31c      	bcc.n	800aee2 <_strtol_l.isra.0+0xb2>
 800aea8:	d101      	bne.n	800aeae <_strtol_l.isra.0+0x7e>
 800aeaa:	45a6      	cmp	lr, r4
 800aeac:	db19      	blt.n	800aee2 <_strtol_l.isra.0+0xb2>
 800aeae:	fb00 4006 	mla	r0, r0, r6, r4
 800aeb2:	2701      	movs	r7, #1
 800aeb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aeb8:	e7eb      	b.n	800ae92 <_strtol_l.isra.0+0x62>
 800aeba:	462f      	mov	r7, r5
 800aebc:	e7bf      	b.n	800ae3e <_strtol_l.isra.0+0xe>
 800aebe:	2c2b      	cmp	r4, #43	; 0x2b
 800aec0:	bf04      	itt	eq
 800aec2:	1cbd      	addeq	r5, r7, #2
 800aec4:	787c      	ldrbeq	r4, [r7, #1]
 800aec6:	461a      	mov	r2, r3
 800aec8:	e7c9      	b.n	800ae5e <_strtol_l.isra.0+0x2e>
 800aeca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800aece:	2b19      	cmp	r3, #25
 800aed0:	d801      	bhi.n	800aed6 <_strtol_l.isra.0+0xa6>
 800aed2:	3c37      	subs	r4, #55	; 0x37
 800aed4:	e7e2      	b.n	800ae9c <_strtol_l.isra.0+0x6c>
 800aed6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800aeda:	2b19      	cmp	r3, #25
 800aedc:	d804      	bhi.n	800aee8 <_strtol_l.isra.0+0xb8>
 800aede:	3c57      	subs	r4, #87	; 0x57
 800aee0:	e7dc      	b.n	800ae9c <_strtol_l.isra.0+0x6c>
 800aee2:	f04f 37ff 	mov.w	r7, #4294967295
 800aee6:	e7e5      	b.n	800aeb4 <_strtol_l.isra.0+0x84>
 800aee8:	1c7b      	adds	r3, r7, #1
 800aeea:	d108      	bne.n	800aefe <_strtol_l.isra.0+0xce>
 800aeec:	2322      	movs	r3, #34	; 0x22
 800aeee:	f8c8 3000 	str.w	r3, [r8]
 800aef2:	4608      	mov	r0, r1
 800aef4:	f1ba 0f00 	cmp.w	sl, #0
 800aef8:	d107      	bne.n	800af0a <_strtol_l.isra.0+0xda>
 800aefa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aefe:	b102      	cbz	r2, 800af02 <_strtol_l.isra.0+0xd2>
 800af00:	4240      	negs	r0, r0
 800af02:	f1ba 0f00 	cmp.w	sl, #0
 800af06:	d0f8      	beq.n	800aefa <_strtol_l.isra.0+0xca>
 800af08:	b10f      	cbz	r7, 800af0e <_strtol_l.isra.0+0xde>
 800af0a:	f105 39ff 	add.w	r9, r5, #4294967295
 800af0e:	f8ca 9000 	str.w	r9, [sl]
 800af12:	e7f2      	b.n	800aefa <_strtol_l.isra.0+0xca>
 800af14:	2430      	movs	r4, #48	; 0x30
 800af16:	2e00      	cmp	r6, #0
 800af18:	d1af      	bne.n	800ae7a <_strtol_l.isra.0+0x4a>
 800af1a:	2608      	movs	r6, #8
 800af1c:	e7ad      	b.n	800ae7a <_strtol_l.isra.0+0x4a>
 800af1e:	2c30      	cmp	r4, #48	; 0x30
 800af20:	d0a3      	beq.n	800ae6a <_strtol_l.isra.0+0x3a>
 800af22:	260a      	movs	r6, #10
 800af24:	e7a9      	b.n	800ae7a <_strtol_l.isra.0+0x4a>
	...

0800af28 <_strtol_r>:
 800af28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af2a:	4c06      	ldr	r4, [pc, #24]	; (800af44 <_strtol_r+0x1c>)
 800af2c:	4d06      	ldr	r5, [pc, #24]	; (800af48 <_strtol_r+0x20>)
 800af2e:	6824      	ldr	r4, [r4, #0]
 800af30:	6a24      	ldr	r4, [r4, #32]
 800af32:	2c00      	cmp	r4, #0
 800af34:	bf08      	it	eq
 800af36:	462c      	moveq	r4, r5
 800af38:	9400      	str	r4, [sp, #0]
 800af3a:	f7ff ff79 	bl	800ae30 <_strtol_l.isra.0>
 800af3e:	b003      	add	sp, #12
 800af40:	bd30      	pop	{r4, r5, pc}
 800af42:	bf00      	nop
 800af44:	2000000c 	.word	0x2000000c
 800af48:	20000070 	.word	0x20000070

0800af4c <__swbuf_r>:
 800af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4e:	460e      	mov	r6, r1
 800af50:	4614      	mov	r4, r2
 800af52:	4605      	mov	r5, r0
 800af54:	b118      	cbz	r0, 800af5e <__swbuf_r+0x12>
 800af56:	6983      	ldr	r3, [r0, #24]
 800af58:	b90b      	cbnz	r3, 800af5e <__swbuf_r+0x12>
 800af5a:	f000 ffed 	bl	800bf38 <__sinit>
 800af5e:	4b21      	ldr	r3, [pc, #132]	; (800afe4 <__swbuf_r+0x98>)
 800af60:	429c      	cmp	r4, r3
 800af62:	d12a      	bne.n	800afba <__swbuf_r+0x6e>
 800af64:	686c      	ldr	r4, [r5, #4]
 800af66:	69a3      	ldr	r3, [r4, #24]
 800af68:	60a3      	str	r3, [r4, #8]
 800af6a:	89a3      	ldrh	r3, [r4, #12]
 800af6c:	071a      	lsls	r2, r3, #28
 800af6e:	d52e      	bpl.n	800afce <__swbuf_r+0x82>
 800af70:	6923      	ldr	r3, [r4, #16]
 800af72:	b363      	cbz	r3, 800afce <__swbuf_r+0x82>
 800af74:	6923      	ldr	r3, [r4, #16]
 800af76:	6820      	ldr	r0, [r4, #0]
 800af78:	1ac0      	subs	r0, r0, r3
 800af7a:	6963      	ldr	r3, [r4, #20]
 800af7c:	b2f6      	uxtb	r6, r6
 800af7e:	4283      	cmp	r3, r0
 800af80:	4637      	mov	r7, r6
 800af82:	dc04      	bgt.n	800af8e <__swbuf_r+0x42>
 800af84:	4621      	mov	r1, r4
 800af86:	4628      	mov	r0, r5
 800af88:	f000 ff6c 	bl	800be64 <_fflush_r>
 800af8c:	bb28      	cbnz	r0, 800afda <__swbuf_r+0x8e>
 800af8e:	68a3      	ldr	r3, [r4, #8]
 800af90:	3b01      	subs	r3, #1
 800af92:	60a3      	str	r3, [r4, #8]
 800af94:	6823      	ldr	r3, [r4, #0]
 800af96:	1c5a      	adds	r2, r3, #1
 800af98:	6022      	str	r2, [r4, #0]
 800af9a:	701e      	strb	r6, [r3, #0]
 800af9c:	6963      	ldr	r3, [r4, #20]
 800af9e:	3001      	adds	r0, #1
 800afa0:	4283      	cmp	r3, r0
 800afa2:	d004      	beq.n	800afae <__swbuf_r+0x62>
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	07db      	lsls	r3, r3, #31
 800afa8:	d519      	bpl.n	800afde <__swbuf_r+0x92>
 800afaa:	2e0a      	cmp	r6, #10
 800afac:	d117      	bne.n	800afde <__swbuf_r+0x92>
 800afae:	4621      	mov	r1, r4
 800afb0:	4628      	mov	r0, r5
 800afb2:	f000 ff57 	bl	800be64 <_fflush_r>
 800afb6:	b190      	cbz	r0, 800afde <__swbuf_r+0x92>
 800afb8:	e00f      	b.n	800afda <__swbuf_r+0x8e>
 800afba:	4b0b      	ldr	r3, [pc, #44]	; (800afe8 <__swbuf_r+0x9c>)
 800afbc:	429c      	cmp	r4, r3
 800afbe:	d101      	bne.n	800afc4 <__swbuf_r+0x78>
 800afc0:	68ac      	ldr	r4, [r5, #8]
 800afc2:	e7d0      	b.n	800af66 <__swbuf_r+0x1a>
 800afc4:	4b09      	ldr	r3, [pc, #36]	; (800afec <__swbuf_r+0xa0>)
 800afc6:	429c      	cmp	r4, r3
 800afc8:	bf08      	it	eq
 800afca:	68ec      	ldreq	r4, [r5, #12]
 800afcc:	e7cb      	b.n	800af66 <__swbuf_r+0x1a>
 800afce:	4621      	mov	r1, r4
 800afd0:	4628      	mov	r0, r5
 800afd2:	f000 f80d 	bl	800aff0 <__swsetup_r>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d0cc      	beq.n	800af74 <__swbuf_r+0x28>
 800afda:	f04f 37ff 	mov.w	r7, #4294967295
 800afde:	4638      	mov	r0, r7
 800afe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afe2:	bf00      	nop
 800afe4:	0800dd88 	.word	0x0800dd88
 800afe8:	0800dda8 	.word	0x0800dda8
 800afec:	0800dd68 	.word	0x0800dd68

0800aff0 <__swsetup_r>:
 800aff0:	4b32      	ldr	r3, [pc, #200]	; (800b0bc <__swsetup_r+0xcc>)
 800aff2:	b570      	push	{r4, r5, r6, lr}
 800aff4:	681d      	ldr	r5, [r3, #0]
 800aff6:	4606      	mov	r6, r0
 800aff8:	460c      	mov	r4, r1
 800affa:	b125      	cbz	r5, 800b006 <__swsetup_r+0x16>
 800affc:	69ab      	ldr	r3, [r5, #24]
 800affe:	b913      	cbnz	r3, 800b006 <__swsetup_r+0x16>
 800b000:	4628      	mov	r0, r5
 800b002:	f000 ff99 	bl	800bf38 <__sinit>
 800b006:	4b2e      	ldr	r3, [pc, #184]	; (800b0c0 <__swsetup_r+0xd0>)
 800b008:	429c      	cmp	r4, r3
 800b00a:	d10f      	bne.n	800b02c <__swsetup_r+0x3c>
 800b00c:	686c      	ldr	r4, [r5, #4]
 800b00e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b012:	b29a      	uxth	r2, r3
 800b014:	0715      	lsls	r5, r2, #28
 800b016:	d42c      	bmi.n	800b072 <__swsetup_r+0x82>
 800b018:	06d0      	lsls	r0, r2, #27
 800b01a:	d411      	bmi.n	800b040 <__swsetup_r+0x50>
 800b01c:	2209      	movs	r2, #9
 800b01e:	6032      	str	r2, [r6, #0]
 800b020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b024:	81a3      	strh	r3, [r4, #12]
 800b026:	f04f 30ff 	mov.w	r0, #4294967295
 800b02a:	e03e      	b.n	800b0aa <__swsetup_r+0xba>
 800b02c:	4b25      	ldr	r3, [pc, #148]	; (800b0c4 <__swsetup_r+0xd4>)
 800b02e:	429c      	cmp	r4, r3
 800b030:	d101      	bne.n	800b036 <__swsetup_r+0x46>
 800b032:	68ac      	ldr	r4, [r5, #8]
 800b034:	e7eb      	b.n	800b00e <__swsetup_r+0x1e>
 800b036:	4b24      	ldr	r3, [pc, #144]	; (800b0c8 <__swsetup_r+0xd8>)
 800b038:	429c      	cmp	r4, r3
 800b03a:	bf08      	it	eq
 800b03c:	68ec      	ldreq	r4, [r5, #12]
 800b03e:	e7e6      	b.n	800b00e <__swsetup_r+0x1e>
 800b040:	0751      	lsls	r1, r2, #29
 800b042:	d512      	bpl.n	800b06a <__swsetup_r+0x7a>
 800b044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b046:	b141      	cbz	r1, 800b05a <__swsetup_r+0x6a>
 800b048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b04c:	4299      	cmp	r1, r3
 800b04e:	d002      	beq.n	800b056 <__swsetup_r+0x66>
 800b050:	4630      	mov	r0, r6
 800b052:	f001 ffc1 	bl	800cfd8 <_free_r>
 800b056:	2300      	movs	r3, #0
 800b058:	6363      	str	r3, [r4, #52]	; 0x34
 800b05a:	89a3      	ldrh	r3, [r4, #12]
 800b05c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b060:	81a3      	strh	r3, [r4, #12]
 800b062:	2300      	movs	r3, #0
 800b064:	6063      	str	r3, [r4, #4]
 800b066:	6923      	ldr	r3, [r4, #16]
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	89a3      	ldrh	r3, [r4, #12]
 800b06c:	f043 0308 	orr.w	r3, r3, #8
 800b070:	81a3      	strh	r3, [r4, #12]
 800b072:	6923      	ldr	r3, [r4, #16]
 800b074:	b94b      	cbnz	r3, 800b08a <__swsetup_r+0x9a>
 800b076:	89a3      	ldrh	r3, [r4, #12]
 800b078:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b07c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b080:	d003      	beq.n	800b08a <__swsetup_r+0x9a>
 800b082:	4621      	mov	r1, r4
 800b084:	4630      	mov	r0, r6
 800b086:	f001 fb3f 	bl	800c708 <__smakebuf_r>
 800b08a:	89a2      	ldrh	r2, [r4, #12]
 800b08c:	f012 0301 	ands.w	r3, r2, #1
 800b090:	d00c      	beq.n	800b0ac <__swsetup_r+0xbc>
 800b092:	2300      	movs	r3, #0
 800b094:	60a3      	str	r3, [r4, #8]
 800b096:	6963      	ldr	r3, [r4, #20]
 800b098:	425b      	negs	r3, r3
 800b09a:	61a3      	str	r3, [r4, #24]
 800b09c:	6923      	ldr	r3, [r4, #16]
 800b09e:	b953      	cbnz	r3, 800b0b6 <__swsetup_r+0xc6>
 800b0a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b0a8:	d1ba      	bne.n	800b020 <__swsetup_r+0x30>
 800b0aa:	bd70      	pop	{r4, r5, r6, pc}
 800b0ac:	0792      	lsls	r2, r2, #30
 800b0ae:	bf58      	it	pl
 800b0b0:	6963      	ldrpl	r3, [r4, #20]
 800b0b2:	60a3      	str	r3, [r4, #8]
 800b0b4:	e7f2      	b.n	800b09c <__swsetup_r+0xac>
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	e7f7      	b.n	800b0aa <__swsetup_r+0xba>
 800b0ba:	bf00      	nop
 800b0bc:	2000000c 	.word	0x2000000c
 800b0c0:	0800dd88 	.word	0x0800dd88
 800b0c4:	0800dda8 	.word	0x0800dda8
 800b0c8:	0800dd68 	.word	0x0800dd68

0800b0cc <quorem>:
 800b0cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d0:	6903      	ldr	r3, [r0, #16]
 800b0d2:	690c      	ldr	r4, [r1, #16]
 800b0d4:	42a3      	cmp	r3, r4
 800b0d6:	4680      	mov	r8, r0
 800b0d8:	f2c0 8082 	blt.w	800b1e0 <quorem+0x114>
 800b0dc:	3c01      	subs	r4, #1
 800b0de:	f101 0714 	add.w	r7, r1, #20
 800b0e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b0e6:	f100 0614 	add.w	r6, r0, #20
 800b0ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b0ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b0f2:	eb06 030c 	add.w	r3, r6, ip
 800b0f6:	3501      	adds	r5, #1
 800b0f8:	eb07 090c 	add.w	r9, r7, ip
 800b0fc:	9301      	str	r3, [sp, #4]
 800b0fe:	fbb0 f5f5 	udiv	r5, r0, r5
 800b102:	b395      	cbz	r5, 800b16a <quorem+0x9e>
 800b104:	f04f 0a00 	mov.w	sl, #0
 800b108:	4638      	mov	r0, r7
 800b10a:	46b6      	mov	lr, r6
 800b10c:	46d3      	mov	fp, sl
 800b10e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b112:	b293      	uxth	r3, r2
 800b114:	fb05 a303 	mla	r3, r5, r3, sl
 800b118:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	ebab 0303 	sub.w	r3, fp, r3
 800b122:	0c12      	lsrs	r2, r2, #16
 800b124:	f8de b000 	ldr.w	fp, [lr]
 800b128:	fb05 a202 	mla	r2, r5, r2, sl
 800b12c:	fa13 f38b 	uxtah	r3, r3, fp
 800b130:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b134:	fa1f fb82 	uxth.w	fp, r2
 800b138:	f8de 2000 	ldr.w	r2, [lr]
 800b13c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b140:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b144:	b29b      	uxth	r3, r3
 800b146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b14a:	4581      	cmp	r9, r0
 800b14c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b150:	f84e 3b04 	str.w	r3, [lr], #4
 800b154:	d2db      	bcs.n	800b10e <quorem+0x42>
 800b156:	f856 300c 	ldr.w	r3, [r6, ip]
 800b15a:	b933      	cbnz	r3, 800b16a <quorem+0x9e>
 800b15c:	9b01      	ldr	r3, [sp, #4]
 800b15e:	3b04      	subs	r3, #4
 800b160:	429e      	cmp	r6, r3
 800b162:	461a      	mov	r2, r3
 800b164:	d330      	bcc.n	800b1c8 <quorem+0xfc>
 800b166:	f8c8 4010 	str.w	r4, [r8, #16]
 800b16a:	4640      	mov	r0, r8
 800b16c:	f001 fd7a 	bl	800cc64 <__mcmp>
 800b170:	2800      	cmp	r0, #0
 800b172:	db25      	blt.n	800b1c0 <quorem+0xf4>
 800b174:	3501      	adds	r5, #1
 800b176:	4630      	mov	r0, r6
 800b178:	f04f 0c00 	mov.w	ip, #0
 800b17c:	f857 2b04 	ldr.w	r2, [r7], #4
 800b180:	f8d0 e000 	ldr.w	lr, [r0]
 800b184:	b293      	uxth	r3, r2
 800b186:	ebac 0303 	sub.w	r3, ip, r3
 800b18a:	0c12      	lsrs	r2, r2, #16
 800b18c:	fa13 f38e 	uxtah	r3, r3, lr
 800b190:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b194:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b198:	b29b      	uxth	r3, r3
 800b19a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b19e:	45b9      	cmp	r9, r7
 800b1a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b1a4:	f840 3b04 	str.w	r3, [r0], #4
 800b1a8:	d2e8      	bcs.n	800b17c <quorem+0xb0>
 800b1aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b1ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b1b2:	b92a      	cbnz	r2, 800b1c0 <quorem+0xf4>
 800b1b4:	3b04      	subs	r3, #4
 800b1b6:	429e      	cmp	r6, r3
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	d30b      	bcc.n	800b1d4 <quorem+0x108>
 800b1bc:	f8c8 4010 	str.w	r4, [r8, #16]
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	b003      	add	sp, #12
 800b1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c8:	6812      	ldr	r2, [r2, #0]
 800b1ca:	3b04      	subs	r3, #4
 800b1cc:	2a00      	cmp	r2, #0
 800b1ce:	d1ca      	bne.n	800b166 <quorem+0x9a>
 800b1d0:	3c01      	subs	r4, #1
 800b1d2:	e7c5      	b.n	800b160 <quorem+0x94>
 800b1d4:	6812      	ldr	r2, [r2, #0]
 800b1d6:	3b04      	subs	r3, #4
 800b1d8:	2a00      	cmp	r2, #0
 800b1da:	d1ef      	bne.n	800b1bc <quorem+0xf0>
 800b1dc:	3c01      	subs	r4, #1
 800b1de:	e7ea      	b.n	800b1b6 <quorem+0xea>
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	e7ee      	b.n	800b1c2 <quorem+0xf6>
 800b1e4:	0000      	movs	r0, r0
	...

0800b1e8 <_dtoa_r>:
 800b1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ec:	ec57 6b10 	vmov	r6, r7, d0
 800b1f0:	b097      	sub	sp, #92	; 0x5c
 800b1f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b1f4:	9106      	str	r1, [sp, #24]
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	920b      	str	r2, [sp, #44]	; 0x2c
 800b1fa:	9312      	str	r3, [sp, #72]	; 0x48
 800b1fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b200:	e9cd 6700 	strd	r6, r7, [sp]
 800b204:	b93d      	cbnz	r5, 800b216 <_dtoa_r+0x2e>
 800b206:	2010      	movs	r0, #16
 800b208:	f001 fabe 	bl	800c788 <malloc>
 800b20c:	6260      	str	r0, [r4, #36]	; 0x24
 800b20e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b212:	6005      	str	r5, [r0, #0]
 800b214:	60c5      	str	r5, [r0, #12]
 800b216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b218:	6819      	ldr	r1, [r3, #0]
 800b21a:	b151      	cbz	r1, 800b232 <_dtoa_r+0x4a>
 800b21c:	685a      	ldr	r2, [r3, #4]
 800b21e:	604a      	str	r2, [r1, #4]
 800b220:	2301      	movs	r3, #1
 800b222:	4093      	lsls	r3, r2
 800b224:	608b      	str	r3, [r1, #8]
 800b226:	4620      	mov	r0, r4
 800b228:	f001 fafc 	bl	800c824 <_Bfree>
 800b22c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b22e:	2200      	movs	r2, #0
 800b230:	601a      	str	r2, [r3, #0]
 800b232:	1e3b      	subs	r3, r7, #0
 800b234:	bfbb      	ittet	lt
 800b236:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b23a:	9301      	strlt	r3, [sp, #4]
 800b23c:	2300      	movge	r3, #0
 800b23e:	2201      	movlt	r2, #1
 800b240:	bfac      	ite	ge
 800b242:	f8c8 3000 	strge.w	r3, [r8]
 800b246:	f8c8 2000 	strlt.w	r2, [r8]
 800b24a:	4baf      	ldr	r3, [pc, #700]	; (800b508 <_dtoa_r+0x320>)
 800b24c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b250:	ea33 0308 	bics.w	r3, r3, r8
 800b254:	d114      	bne.n	800b280 <_dtoa_r+0x98>
 800b256:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b258:	f242 730f 	movw	r3, #9999	; 0x270f
 800b25c:	6013      	str	r3, [r2, #0]
 800b25e:	9b00      	ldr	r3, [sp, #0]
 800b260:	b923      	cbnz	r3, 800b26c <_dtoa_r+0x84>
 800b262:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b266:	2800      	cmp	r0, #0
 800b268:	f000 8542 	beq.w	800bcf0 <_dtoa_r+0xb08>
 800b26c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b26e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b51c <_dtoa_r+0x334>
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 8544 	beq.w	800bd00 <_dtoa_r+0xb18>
 800b278:	f10b 0303 	add.w	r3, fp, #3
 800b27c:	f000 bd3e 	b.w	800bcfc <_dtoa_r+0xb14>
 800b280:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b284:	2200      	movs	r2, #0
 800b286:	2300      	movs	r3, #0
 800b288:	4630      	mov	r0, r6
 800b28a:	4639      	mov	r1, r7
 800b28c:	f7f5 fc34 	bl	8000af8 <__aeabi_dcmpeq>
 800b290:	4681      	mov	r9, r0
 800b292:	b168      	cbz	r0, 800b2b0 <_dtoa_r+0xc8>
 800b294:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b296:	2301      	movs	r3, #1
 800b298:	6013      	str	r3, [r2, #0]
 800b29a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f000 8524 	beq.w	800bcea <_dtoa_r+0xb02>
 800b2a2:	4b9a      	ldr	r3, [pc, #616]	; (800b50c <_dtoa_r+0x324>)
 800b2a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b2a6:	f103 3bff 	add.w	fp, r3, #4294967295
 800b2aa:	6013      	str	r3, [r2, #0]
 800b2ac:	f000 bd28 	b.w	800bd00 <_dtoa_r+0xb18>
 800b2b0:	aa14      	add	r2, sp, #80	; 0x50
 800b2b2:	a915      	add	r1, sp, #84	; 0x54
 800b2b4:	ec47 6b10 	vmov	d0, r6, r7
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f001 fdc1 	bl	800ce40 <__d2b>
 800b2be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b2c2:	9004      	str	r0, [sp, #16]
 800b2c4:	2d00      	cmp	r5, #0
 800b2c6:	d07c      	beq.n	800b3c2 <_dtoa_r+0x1da>
 800b2c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b2cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b2d0:	46b2      	mov	sl, r6
 800b2d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b2d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b2da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b2de:	2200      	movs	r2, #0
 800b2e0:	4b8b      	ldr	r3, [pc, #556]	; (800b510 <_dtoa_r+0x328>)
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	4659      	mov	r1, fp
 800b2e6:	f7f4 ffe7 	bl	80002b8 <__aeabi_dsub>
 800b2ea:	a381      	add	r3, pc, #516	; (adr r3, 800b4f0 <_dtoa_r+0x308>)
 800b2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f0:	f7f5 f99a 	bl	8000628 <__aeabi_dmul>
 800b2f4:	a380      	add	r3, pc, #512	; (adr r3, 800b4f8 <_dtoa_r+0x310>)
 800b2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fa:	f7f4 ffdf 	bl	80002bc <__adddf3>
 800b2fe:	4606      	mov	r6, r0
 800b300:	4628      	mov	r0, r5
 800b302:	460f      	mov	r7, r1
 800b304:	f7f5 f926 	bl	8000554 <__aeabi_i2d>
 800b308:	a37d      	add	r3, pc, #500	; (adr r3, 800b500 <_dtoa_r+0x318>)
 800b30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30e:	f7f5 f98b 	bl	8000628 <__aeabi_dmul>
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	4630      	mov	r0, r6
 800b318:	4639      	mov	r1, r7
 800b31a:	f7f4 ffcf 	bl	80002bc <__adddf3>
 800b31e:	4606      	mov	r6, r0
 800b320:	460f      	mov	r7, r1
 800b322:	f7f5 fc31 	bl	8000b88 <__aeabi_d2iz>
 800b326:	2200      	movs	r2, #0
 800b328:	4682      	mov	sl, r0
 800b32a:	2300      	movs	r3, #0
 800b32c:	4630      	mov	r0, r6
 800b32e:	4639      	mov	r1, r7
 800b330:	f7f5 fbec 	bl	8000b0c <__aeabi_dcmplt>
 800b334:	b148      	cbz	r0, 800b34a <_dtoa_r+0x162>
 800b336:	4650      	mov	r0, sl
 800b338:	f7f5 f90c 	bl	8000554 <__aeabi_i2d>
 800b33c:	4632      	mov	r2, r6
 800b33e:	463b      	mov	r3, r7
 800b340:	f7f5 fbda 	bl	8000af8 <__aeabi_dcmpeq>
 800b344:	b908      	cbnz	r0, 800b34a <_dtoa_r+0x162>
 800b346:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b34a:	f1ba 0f16 	cmp.w	sl, #22
 800b34e:	d859      	bhi.n	800b404 <_dtoa_r+0x21c>
 800b350:	4970      	ldr	r1, [pc, #448]	; (800b514 <_dtoa_r+0x32c>)
 800b352:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b356:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b35a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b35e:	f7f5 fbf3 	bl	8000b48 <__aeabi_dcmpgt>
 800b362:	2800      	cmp	r0, #0
 800b364:	d050      	beq.n	800b408 <_dtoa_r+0x220>
 800b366:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b36a:	2300      	movs	r3, #0
 800b36c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b36e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b370:	1b5d      	subs	r5, r3, r5
 800b372:	f1b5 0801 	subs.w	r8, r5, #1
 800b376:	bf49      	itett	mi
 800b378:	f1c5 0301 	rsbmi	r3, r5, #1
 800b37c:	2300      	movpl	r3, #0
 800b37e:	9305      	strmi	r3, [sp, #20]
 800b380:	f04f 0800 	movmi.w	r8, #0
 800b384:	bf58      	it	pl
 800b386:	9305      	strpl	r3, [sp, #20]
 800b388:	f1ba 0f00 	cmp.w	sl, #0
 800b38c:	db3e      	blt.n	800b40c <_dtoa_r+0x224>
 800b38e:	2300      	movs	r3, #0
 800b390:	44d0      	add	r8, sl
 800b392:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b396:	9307      	str	r3, [sp, #28]
 800b398:	9b06      	ldr	r3, [sp, #24]
 800b39a:	2b09      	cmp	r3, #9
 800b39c:	f200 8090 	bhi.w	800b4c0 <_dtoa_r+0x2d8>
 800b3a0:	2b05      	cmp	r3, #5
 800b3a2:	bfc4      	itt	gt
 800b3a4:	3b04      	subgt	r3, #4
 800b3a6:	9306      	strgt	r3, [sp, #24]
 800b3a8:	9b06      	ldr	r3, [sp, #24]
 800b3aa:	f1a3 0302 	sub.w	r3, r3, #2
 800b3ae:	bfcc      	ite	gt
 800b3b0:	2500      	movgt	r5, #0
 800b3b2:	2501      	movle	r5, #1
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	f200 808f 	bhi.w	800b4d8 <_dtoa_r+0x2f0>
 800b3ba:	e8df f003 	tbb	[pc, r3]
 800b3be:	7f7d      	.short	0x7f7d
 800b3c0:	7131      	.short	0x7131
 800b3c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b3c6:	441d      	add	r5, r3
 800b3c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b3cc:	2820      	cmp	r0, #32
 800b3ce:	dd13      	ble.n	800b3f8 <_dtoa_r+0x210>
 800b3d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b3d4:	9b00      	ldr	r3, [sp, #0]
 800b3d6:	fa08 f800 	lsl.w	r8, r8, r0
 800b3da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b3de:	fa23 f000 	lsr.w	r0, r3, r0
 800b3e2:	ea48 0000 	orr.w	r0, r8, r0
 800b3e6:	f7f5 f8a5 	bl	8000534 <__aeabi_ui2d>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	4682      	mov	sl, r0
 800b3ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b3f2:	3d01      	subs	r5, #1
 800b3f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800b3f6:	e772      	b.n	800b2de <_dtoa_r+0xf6>
 800b3f8:	9b00      	ldr	r3, [sp, #0]
 800b3fa:	f1c0 0020 	rsb	r0, r0, #32
 800b3fe:	fa03 f000 	lsl.w	r0, r3, r0
 800b402:	e7f0      	b.n	800b3e6 <_dtoa_r+0x1fe>
 800b404:	2301      	movs	r3, #1
 800b406:	e7b1      	b.n	800b36c <_dtoa_r+0x184>
 800b408:	900f      	str	r0, [sp, #60]	; 0x3c
 800b40a:	e7b0      	b.n	800b36e <_dtoa_r+0x186>
 800b40c:	9b05      	ldr	r3, [sp, #20]
 800b40e:	eba3 030a 	sub.w	r3, r3, sl
 800b412:	9305      	str	r3, [sp, #20]
 800b414:	f1ca 0300 	rsb	r3, sl, #0
 800b418:	9307      	str	r3, [sp, #28]
 800b41a:	2300      	movs	r3, #0
 800b41c:	930e      	str	r3, [sp, #56]	; 0x38
 800b41e:	e7bb      	b.n	800b398 <_dtoa_r+0x1b0>
 800b420:	2301      	movs	r3, #1
 800b422:	930a      	str	r3, [sp, #40]	; 0x28
 800b424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b426:	2b00      	cmp	r3, #0
 800b428:	dd59      	ble.n	800b4de <_dtoa_r+0x2f6>
 800b42a:	9302      	str	r3, [sp, #8]
 800b42c:	4699      	mov	r9, r3
 800b42e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b430:	2200      	movs	r2, #0
 800b432:	6072      	str	r2, [r6, #4]
 800b434:	2204      	movs	r2, #4
 800b436:	f102 0014 	add.w	r0, r2, #20
 800b43a:	4298      	cmp	r0, r3
 800b43c:	6871      	ldr	r1, [r6, #4]
 800b43e:	d953      	bls.n	800b4e8 <_dtoa_r+0x300>
 800b440:	4620      	mov	r0, r4
 800b442:	f001 f9bb 	bl	800c7bc <_Balloc>
 800b446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b448:	6030      	str	r0, [r6, #0]
 800b44a:	f1b9 0f0e 	cmp.w	r9, #14
 800b44e:	f8d3 b000 	ldr.w	fp, [r3]
 800b452:	f200 80e6 	bhi.w	800b622 <_dtoa_r+0x43a>
 800b456:	2d00      	cmp	r5, #0
 800b458:	f000 80e3 	beq.w	800b622 <_dtoa_r+0x43a>
 800b45c:	ed9d 7b00 	vldr	d7, [sp]
 800b460:	f1ba 0f00 	cmp.w	sl, #0
 800b464:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b468:	dd74      	ble.n	800b554 <_dtoa_r+0x36c>
 800b46a:	4a2a      	ldr	r2, [pc, #168]	; (800b514 <_dtoa_r+0x32c>)
 800b46c:	f00a 030f 	and.w	r3, sl, #15
 800b470:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b474:	ed93 7b00 	vldr	d7, [r3]
 800b478:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b47c:	06f0      	lsls	r0, r6, #27
 800b47e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b482:	d565      	bpl.n	800b550 <_dtoa_r+0x368>
 800b484:	4b24      	ldr	r3, [pc, #144]	; (800b518 <_dtoa_r+0x330>)
 800b486:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b48a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b48e:	f7f5 f9f5 	bl	800087c <__aeabi_ddiv>
 800b492:	e9cd 0100 	strd	r0, r1, [sp]
 800b496:	f006 060f 	and.w	r6, r6, #15
 800b49a:	2503      	movs	r5, #3
 800b49c:	4f1e      	ldr	r7, [pc, #120]	; (800b518 <_dtoa_r+0x330>)
 800b49e:	e04c      	b.n	800b53a <_dtoa_r+0x352>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	930a      	str	r3, [sp, #40]	; 0x28
 800b4a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4a6:	4453      	add	r3, sl
 800b4a8:	f103 0901 	add.w	r9, r3, #1
 800b4ac:	9302      	str	r3, [sp, #8]
 800b4ae:	464b      	mov	r3, r9
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	bfb8      	it	lt
 800b4b4:	2301      	movlt	r3, #1
 800b4b6:	e7ba      	b.n	800b42e <_dtoa_r+0x246>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	e7b2      	b.n	800b422 <_dtoa_r+0x23a>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	e7f0      	b.n	800b4a2 <_dtoa_r+0x2ba>
 800b4c0:	2501      	movs	r5, #1
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	9306      	str	r3, [sp, #24]
 800b4c6:	950a      	str	r5, [sp, #40]	; 0x28
 800b4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4cc:	9302      	str	r3, [sp, #8]
 800b4ce:	4699      	mov	r9, r3
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	2312      	movs	r3, #18
 800b4d4:	920b      	str	r2, [sp, #44]	; 0x2c
 800b4d6:	e7aa      	b.n	800b42e <_dtoa_r+0x246>
 800b4d8:	2301      	movs	r3, #1
 800b4da:	930a      	str	r3, [sp, #40]	; 0x28
 800b4dc:	e7f4      	b.n	800b4c8 <_dtoa_r+0x2e0>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	9302      	str	r3, [sp, #8]
 800b4e2:	4699      	mov	r9, r3
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	e7f5      	b.n	800b4d4 <_dtoa_r+0x2ec>
 800b4e8:	3101      	adds	r1, #1
 800b4ea:	6071      	str	r1, [r6, #4]
 800b4ec:	0052      	lsls	r2, r2, #1
 800b4ee:	e7a2      	b.n	800b436 <_dtoa_r+0x24e>
 800b4f0:	636f4361 	.word	0x636f4361
 800b4f4:	3fd287a7 	.word	0x3fd287a7
 800b4f8:	8b60c8b3 	.word	0x8b60c8b3
 800b4fc:	3fc68a28 	.word	0x3fc68a28
 800b500:	509f79fb 	.word	0x509f79fb
 800b504:	3fd34413 	.word	0x3fd34413
 800b508:	7ff00000 	.word	0x7ff00000
 800b50c:	0800dcd9 	.word	0x0800dcd9
 800b510:	3ff80000 	.word	0x3ff80000
 800b514:	0800de00 	.word	0x0800de00
 800b518:	0800ddd8 	.word	0x0800ddd8
 800b51c:	0800dd61 	.word	0x0800dd61
 800b520:	07f1      	lsls	r1, r6, #31
 800b522:	d508      	bpl.n	800b536 <_dtoa_r+0x34e>
 800b524:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b52c:	f7f5 f87c 	bl	8000628 <__aeabi_dmul>
 800b530:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b534:	3501      	adds	r5, #1
 800b536:	1076      	asrs	r6, r6, #1
 800b538:	3708      	adds	r7, #8
 800b53a:	2e00      	cmp	r6, #0
 800b53c:	d1f0      	bne.n	800b520 <_dtoa_r+0x338>
 800b53e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b542:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b546:	f7f5 f999 	bl	800087c <__aeabi_ddiv>
 800b54a:	e9cd 0100 	strd	r0, r1, [sp]
 800b54e:	e01a      	b.n	800b586 <_dtoa_r+0x39e>
 800b550:	2502      	movs	r5, #2
 800b552:	e7a3      	b.n	800b49c <_dtoa_r+0x2b4>
 800b554:	f000 80a0 	beq.w	800b698 <_dtoa_r+0x4b0>
 800b558:	f1ca 0600 	rsb	r6, sl, #0
 800b55c:	4b9f      	ldr	r3, [pc, #636]	; (800b7dc <_dtoa_r+0x5f4>)
 800b55e:	4fa0      	ldr	r7, [pc, #640]	; (800b7e0 <_dtoa_r+0x5f8>)
 800b560:	f006 020f 	and.w	r2, r6, #15
 800b564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b570:	f7f5 f85a 	bl	8000628 <__aeabi_dmul>
 800b574:	e9cd 0100 	strd	r0, r1, [sp]
 800b578:	1136      	asrs	r6, r6, #4
 800b57a:	2300      	movs	r3, #0
 800b57c:	2502      	movs	r5, #2
 800b57e:	2e00      	cmp	r6, #0
 800b580:	d17f      	bne.n	800b682 <_dtoa_r+0x49a>
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1e1      	bne.n	800b54a <_dtoa_r+0x362>
 800b586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f000 8087 	beq.w	800b69c <_dtoa_r+0x4b4>
 800b58e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b592:	2200      	movs	r2, #0
 800b594:	4b93      	ldr	r3, [pc, #588]	; (800b7e4 <_dtoa_r+0x5fc>)
 800b596:	4630      	mov	r0, r6
 800b598:	4639      	mov	r1, r7
 800b59a:	f7f5 fab7 	bl	8000b0c <__aeabi_dcmplt>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d07c      	beq.n	800b69c <_dtoa_r+0x4b4>
 800b5a2:	f1b9 0f00 	cmp.w	r9, #0
 800b5a6:	d079      	beq.n	800b69c <_dtoa_r+0x4b4>
 800b5a8:	9b02      	ldr	r3, [sp, #8]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	dd35      	ble.n	800b61a <_dtoa_r+0x432>
 800b5ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b5b2:	9308      	str	r3, [sp, #32]
 800b5b4:	4639      	mov	r1, r7
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	4b8b      	ldr	r3, [pc, #556]	; (800b7e8 <_dtoa_r+0x600>)
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	f7f5 f834 	bl	8000628 <__aeabi_dmul>
 800b5c0:	e9cd 0100 	strd	r0, r1, [sp]
 800b5c4:	9f02      	ldr	r7, [sp, #8]
 800b5c6:	3501      	adds	r5, #1
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	f7f4 ffc3 	bl	8000554 <__aeabi_i2d>
 800b5ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5d2:	f7f5 f829 	bl	8000628 <__aeabi_dmul>
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	4b84      	ldr	r3, [pc, #528]	; (800b7ec <_dtoa_r+0x604>)
 800b5da:	f7f4 fe6f 	bl	80002bc <__adddf3>
 800b5de:	4605      	mov	r5, r0
 800b5e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b5e4:	2f00      	cmp	r7, #0
 800b5e6:	d15d      	bne.n	800b6a4 <_dtoa_r+0x4bc>
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	4b81      	ldr	r3, [pc, #516]	; (800b7f0 <_dtoa_r+0x608>)
 800b5ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5f0:	f7f4 fe62 	bl	80002b8 <__aeabi_dsub>
 800b5f4:	462a      	mov	r2, r5
 800b5f6:	4633      	mov	r3, r6
 800b5f8:	e9cd 0100 	strd	r0, r1, [sp]
 800b5fc:	f7f5 faa4 	bl	8000b48 <__aeabi_dcmpgt>
 800b600:	2800      	cmp	r0, #0
 800b602:	f040 8288 	bne.w	800bb16 <_dtoa_r+0x92e>
 800b606:	462a      	mov	r2, r5
 800b608:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b60c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b610:	f7f5 fa7c 	bl	8000b0c <__aeabi_dcmplt>
 800b614:	2800      	cmp	r0, #0
 800b616:	f040 827c 	bne.w	800bb12 <_dtoa_r+0x92a>
 800b61a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b61e:	e9cd 2300 	strd	r2, r3, [sp]
 800b622:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b624:	2b00      	cmp	r3, #0
 800b626:	f2c0 8150 	blt.w	800b8ca <_dtoa_r+0x6e2>
 800b62a:	f1ba 0f0e 	cmp.w	sl, #14
 800b62e:	f300 814c 	bgt.w	800b8ca <_dtoa_r+0x6e2>
 800b632:	4b6a      	ldr	r3, [pc, #424]	; (800b7dc <_dtoa_r+0x5f4>)
 800b634:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b638:	ed93 7b00 	vldr	d7, [r3]
 800b63c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b63e:	2b00      	cmp	r3, #0
 800b640:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b644:	f280 80d8 	bge.w	800b7f8 <_dtoa_r+0x610>
 800b648:	f1b9 0f00 	cmp.w	r9, #0
 800b64c:	f300 80d4 	bgt.w	800b7f8 <_dtoa_r+0x610>
 800b650:	f040 825e 	bne.w	800bb10 <_dtoa_r+0x928>
 800b654:	2200      	movs	r2, #0
 800b656:	4b66      	ldr	r3, [pc, #408]	; (800b7f0 <_dtoa_r+0x608>)
 800b658:	ec51 0b17 	vmov	r0, r1, d7
 800b65c:	f7f4 ffe4 	bl	8000628 <__aeabi_dmul>
 800b660:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b664:	f7f5 fa66 	bl	8000b34 <__aeabi_dcmpge>
 800b668:	464f      	mov	r7, r9
 800b66a:	464e      	mov	r6, r9
 800b66c:	2800      	cmp	r0, #0
 800b66e:	f040 8234 	bne.w	800bada <_dtoa_r+0x8f2>
 800b672:	2331      	movs	r3, #49	; 0x31
 800b674:	f10b 0501 	add.w	r5, fp, #1
 800b678:	f88b 3000 	strb.w	r3, [fp]
 800b67c:	f10a 0a01 	add.w	sl, sl, #1
 800b680:	e22f      	b.n	800bae2 <_dtoa_r+0x8fa>
 800b682:	07f2      	lsls	r2, r6, #31
 800b684:	d505      	bpl.n	800b692 <_dtoa_r+0x4aa>
 800b686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b68a:	f7f4 ffcd 	bl	8000628 <__aeabi_dmul>
 800b68e:	3501      	adds	r5, #1
 800b690:	2301      	movs	r3, #1
 800b692:	1076      	asrs	r6, r6, #1
 800b694:	3708      	adds	r7, #8
 800b696:	e772      	b.n	800b57e <_dtoa_r+0x396>
 800b698:	2502      	movs	r5, #2
 800b69a:	e774      	b.n	800b586 <_dtoa_r+0x39e>
 800b69c:	f8cd a020 	str.w	sl, [sp, #32]
 800b6a0:	464f      	mov	r7, r9
 800b6a2:	e791      	b.n	800b5c8 <_dtoa_r+0x3e0>
 800b6a4:	4b4d      	ldr	r3, [pc, #308]	; (800b7dc <_dtoa_r+0x5f4>)
 800b6a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b6aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d047      	beq.n	800b744 <_dtoa_r+0x55c>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	494e      	ldr	r1, [pc, #312]	; (800b7f4 <_dtoa_r+0x60c>)
 800b6bc:	f7f5 f8de 	bl	800087c <__aeabi_ddiv>
 800b6c0:	462a      	mov	r2, r5
 800b6c2:	4633      	mov	r3, r6
 800b6c4:	f7f4 fdf8 	bl	80002b8 <__aeabi_dsub>
 800b6c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b6cc:	465d      	mov	r5, fp
 800b6ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6d2:	f7f5 fa59 	bl	8000b88 <__aeabi_d2iz>
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	f7f4 ff3c 	bl	8000554 <__aeabi_i2d>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	460b      	mov	r3, r1
 800b6e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6e4:	f7f4 fde8 	bl	80002b8 <__aeabi_dsub>
 800b6e8:	3630      	adds	r6, #48	; 0x30
 800b6ea:	f805 6b01 	strb.w	r6, [r5], #1
 800b6ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b6f2:	e9cd 0100 	strd	r0, r1, [sp]
 800b6f6:	f7f5 fa09 	bl	8000b0c <__aeabi_dcmplt>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d163      	bne.n	800b7c6 <_dtoa_r+0x5de>
 800b6fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b702:	2000      	movs	r0, #0
 800b704:	4937      	ldr	r1, [pc, #220]	; (800b7e4 <_dtoa_r+0x5fc>)
 800b706:	f7f4 fdd7 	bl	80002b8 <__aeabi_dsub>
 800b70a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b70e:	f7f5 f9fd 	bl	8000b0c <__aeabi_dcmplt>
 800b712:	2800      	cmp	r0, #0
 800b714:	f040 80b7 	bne.w	800b886 <_dtoa_r+0x69e>
 800b718:	eba5 030b 	sub.w	r3, r5, fp
 800b71c:	429f      	cmp	r7, r3
 800b71e:	f77f af7c 	ble.w	800b61a <_dtoa_r+0x432>
 800b722:	2200      	movs	r2, #0
 800b724:	4b30      	ldr	r3, [pc, #192]	; (800b7e8 <_dtoa_r+0x600>)
 800b726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b72a:	f7f4 ff7d 	bl	8000628 <__aeabi_dmul>
 800b72e:	2200      	movs	r2, #0
 800b730:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b734:	4b2c      	ldr	r3, [pc, #176]	; (800b7e8 <_dtoa_r+0x600>)
 800b736:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b73a:	f7f4 ff75 	bl	8000628 <__aeabi_dmul>
 800b73e:	e9cd 0100 	strd	r0, r1, [sp]
 800b742:	e7c4      	b.n	800b6ce <_dtoa_r+0x4e6>
 800b744:	462a      	mov	r2, r5
 800b746:	4633      	mov	r3, r6
 800b748:	f7f4 ff6e 	bl	8000628 <__aeabi_dmul>
 800b74c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b750:	eb0b 0507 	add.w	r5, fp, r7
 800b754:	465e      	mov	r6, fp
 800b756:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b75a:	f7f5 fa15 	bl	8000b88 <__aeabi_d2iz>
 800b75e:	4607      	mov	r7, r0
 800b760:	f7f4 fef8 	bl	8000554 <__aeabi_i2d>
 800b764:	3730      	adds	r7, #48	; 0x30
 800b766:	4602      	mov	r2, r0
 800b768:	460b      	mov	r3, r1
 800b76a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b76e:	f7f4 fda3 	bl	80002b8 <__aeabi_dsub>
 800b772:	f806 7b01 	strb.w	r7, [r6], #1
 800b776:	42ae      	cmp	r6, r5
 800b778:	e9cd 0100 	strd	r0, r1, [sp]
 800b77c:	f04f 0200 	mov.w	r2, #0
 800b780:	d126      	bne.n	800b7d0 <_dtoa_r+0x5e8>
 800b782:	4b1c      	ldr	r3, [pc, #112]	; (800b7f4 <_dtoa_r+0x60c>)
 800b784:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b788:	f7f4 fd98 	bl	80002bc <__adddf3>
 800b78c:	4602      	mov	r2, r0
 800b78e:	460b      	mov	r3, r1
 800b790:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b794:	f7f5 f9d8 	bl	8000b48 <__aeabi_dcmpgt>
 800b798:	2800      	cmp	r0, #0
 800b79a:	d174      	bne.n	800b886 <_dtoa_r+0x69e>
 800b79c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	4914      	ldr	r1, [pc, #80]	; (800b7f4 <_dtoa_r+0x60c>)
 800b7a4:	f7f4 fd88 	bl	80002b8 <__aeabi_dsub>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7b0:	f7f5 f9ac 	bl	8000b0c <__aeabi_dcmplt>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	f43f af30 	beq.w	800b61a <_dtoa_r+0x432>
 800b7ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b7be:	2b30      	cmp	r3, #48	; 0x30
 800b7c0:	f105 32ff 	add.w	r2, r5, #4294967295
 800b7c4:	d002      	beq.n	800b7cc <_dtoa_r+0x5e4>
 800b7c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b7ca:	e04a      	b.n	800b862 <_dtoa_r+0x67a>
 800b7cc:	4615      	mov	r5, r2
 800b7ce:	e7f4      	b.n	800b7ba <_dtoa_r+0x5d2>
 800b7d0:	4b05      	ldr	r3, [pc, #20]	; (800b7e8 <_dtoa_r+0x600>)
 800b7d2:	f7f4 ff29 	bl	8000628 <__aeabi_dmul>
 800b7d6:	e9cd 0100 	strd	r0, r1, [sp]
 800b7da:	e7bc      	b.n	800b756 <_dtoa_r+0x56e>
 800b7dc:	0800de00 	.word	0x0800de00
 800b7e0:	0800ddd8 	.word	0x0800ddd8
 800b7e4:	3ff00000 	.word	0x3ff00000
 800b7e8:	40240000 	.word	0x40240000
 800b7ec:	401c0000 	.word	0x401c0000
 800b7f0:	40140000 	.word	0x40140000
 800b7f4:	3fe00000 	.word	0x3fe00000
 800b7f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b7fc:	465d      	mov	r5, fp
 800b7fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b802:	4630      	mov	r0, r6
 800b804:	4639      	mov	r1, r7
 800b806:	f7f5 f839 	bl	800087c <__aeabi_ddiv>
 800b80a:	f7f5 f9bd 	bl	8000b88 <__aeabi_d2iz>
 800b80e:	4680      	mov	r8, r0
 800b810:	f7f4 fea0 	bl	8000554 <__aeabi_i2d>
 800b814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b818:	f7f4 ff06 	bl	8000628 <__aeabi_dmul>
 800b81c:	4602      	mov	r2, r0
 800b81e:	460b      	mov	r3, r1
 800b820:	4630      	mov	r0, r6
 800b822:	4639      	mov	r1, r7
 800b824:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b828:	f7f4 fd46 	bl	80002b8 <__aeabi_dsub>
 800b82c:	f805 6b01 	strb.w	r6, [r5], #1
 800b830:	eba5 060b 	sub.w	r6, r5, fp
 800b834:	45b1      	cmp	r9, r6
 800b836:	4602      	mov	r2, r0
 800b838:	460b      	mov	r3, r1
 800b83a:	d139      	bne.n	800b8b0 <_dtoa_r+0x6c8>
 800b83c:	f7f4 fd3e 	bl	80002bc <__adddf3>
 800b840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b844:	4606      	mov	r6, r0
 800b846:	460f      	mov	r7, r1
 800b848:	f7f5 f97e 	bl	8000b48 <__aeabi_dcmpgt>
 800b84c:	b9c8      	cbnz	r0, 800b882 <_dtoa_r+0x69a>
 800b84e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b852:	4630      	mov	r0, r6
 800b854:	4639      	mov	r1, r7
 800b856:	f7f5 f94f 	bl	8000af8 <__aeabi_dcmpeq>
 800b85a:	b110      	cbz	r0, 800b862 <_dtoa_r+0x67a>
 800b85c:	f018 0f01 	tst.w	r8, #1
 800b860:	d10f      	bne.n	800b882 <_dtoa_r+0x69a>
 800b862:	9904      	ldr	r1, [sp, #16]
 800b864:	4620      	mov	r0, r4
 800b866:	f000 ffdd 	bl	800c824 <_Bfree>
 800b86a:	2300      	movs	r3, #0
 800b86c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b86e:	702b      	strb	r3, [r5, #0]
 800b870:	f10a 0301 	add.w	r3, sl, #1
 800b874:	6013      	str	r3, [r2, #0]
 800b876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f000 8241 	beq.w	800bd00 <_dtoa_r+0xb18>
 800b87e:	601d      	str	r5, [r3, #0]
 800b880:	e23e      	b.n	800bd00 <_dtoa_r+0xb18>
 800b882:	f8cd a020 	str.w	sl, [sp, #32]
 800b886:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b88a:	2a39      	cmp	r2, #57	; 0x39
 800b88c:	f105 33ff 	add.w	r3, r5, #4294967295
 800b890:	d108      	bne.n	800b8a4 <_dtoa_r+0x6bc>
 800b892:	459b      	cmp	fp, r3
 800b894:	d10a      	bne.n	800b8ac <_dtoa_r+0x6c4>
 800b896:	9b08      	ldr	r3, [sp, #32]
 800b898:	3301      	adds	r3, #1
 800b89a:	9308      	str	r3, [sp, #32]
 800b89c:	2330      	movs	r3, #48	; 0x30
 800b89e:	f88b 3000 	strb.w	r3, [fp]
 800b8a2:	465b      	mov	r3, fp
 800b8a4:	781a      	ldrb	r2, [r3, #0]
 800b8a6:	3201      	adds	r2, #1
 800b8a8:	701a      	strb	r2, [r3, #0]
 800b8aa:	e78c      	b.n	800b7c6 <_dtoa_r+0x5de>
 800b8ac:	461d      	mov	r5, r3
 800b8ae:	e7ea      	b.n	800b886 <_dtoa_r+0x69e>
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	4b9b      	ldr	r3, [pc, #620]	; (800bb20 <_dtoa_r+0x938>)
 800b8b4:	f7f4 feb8 	bl	8000628 <__aeabi_dmul>
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	4606      	mov	r6, r0
 800b8be:	460f      	mov	r7, r1
 800b8c0:	f7f5 f91a 	bl	8000af8 <__aeabi_dcmpeq>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	d09a      	beq.n	800b7fe <_dtoa_r+0x616>
 800b8c8:	e7cb      	b.n	800b862 <_dtoa_r+0x67a>
 800b8ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8cc:	2a00      	cmp	r2, #0
 800b8ce:	f000 808b 	beq.w	800b9e8 <_dtoa_r+0x800>
 800b8d2:	9a06      	ldr	r2, [sp, #24]
 800b8d4:	2a01      	cmp	r2, #1
 800b8d6:	dc6e      	bgt.n	800b9b6 <_dtoa_r+0x7ce>
 800b8d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b8da:	2a00      	cmp	r2, #0
 800b8dc:	d067      	beq.n	800b9ae <_dtoa_r+0x7c6>
 800b8de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b8e2:	9f07      	ldr	r7, [sp, #28]
 800b8e4:	9d05      	ldr	r5, [sp, #20]
 800b8e6:	9a05      	ldr	r2, [sp, #20]
 800b8e8:	2101      	movs	r1, #1
 800b8ea:	441a      	add	r2, r3
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	9205      	str	r2, [sp, #20]
 800b8f0:	4498      	add	r8, r3
 800b8f2:	f001 f875 	bl	800c9e0 <__i2b>
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	2d00      	cmp	r5, #0
 800b8fa:	dd0c      	ble.n	800b916 <_dtoa_r+0x72e>
 800b8fc:	f1b8 0f00 	cmp.w	r8, #0
 800b900:	dd09      	ble.n	800b916 <_dtoa_r+0x72e>
 800b902:	4545      	cmp	r5, r8
 800b904:	9a05      	ldr	r2, [sp, #20]
 800b906:	462b      	mov	r3, r5
 800b908:	bfa8      	it	ge
 800b90a:	4643      	movge	r3, r8
 800b90c:	1ad2      	subs	r2, r2, r3
 800b90e:	9205      	str	r2, [sp, #20]
 800b910:	1aed      	subs	r5, r5, r3
 800b912:	eba8 0803 	sub.w	r8, r8, r3
 800b916:	9b07      	ldr	r3, [sp, #28]
 800b918:	b1eb      	cbz	r3, 800b956 <_dtoa_r+0x76e>
 800b91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d067      	beq.n	800b9f0 <_dtoa_r+0x808>
 800b920:	b18f      	cbz	r7, 800b946 <_dtoa_r+0x75e>
 800b922:	4631      	mov	r1, r6
 800b924:	463a      	mov	r2, r7
 800b926:	4620      	mov	r0, r4
 800b928:	f001 f8fa 	bl	800cb20 <__pow5mult>
 800b92c:	9a04      	ldr	r2, [sp, #16]
 800b92e:	4601      	mov	r1, r0
 800b930:	4606      	mov	r6, r0
 800b932:	4620      	mov	r0, r4
 800b934:	f001 f85d 	bl	800c9f2 <__multiply>
 800b938:	9904      	ldr	r1, [sp, #16]
 800b93a:	9008      	str	r0, [sp, #32]
 800b93c:	4620      	mov	r0, r4
 800b93e:	f000 ff71 	bl	800c824 <_Bfree>
 800b942:	9b08      	ldr	r3, [sp, #32]
 800b944:	9304      	str	r3, [sp, #16]
 800b946:	9b07      	ldr	r3, [sp, #28]
 800b948:	1bda      	subs	r2, r3, r7
 800b94a:	d004      	beq.n	800b956 <_dtoa_r+0x76e>
 800b94c:	9904      	ldr	r1, [sp, #16]
 800b94e:	4620      	mov	r0, r4
 800b950:	f001 f8e6 	bl	800cb20 <__pow5mult>
 800b954:	9004      	str	r0, [sp, #16]
 800b956:	2101      	movs	r1, #1
 800b958:	4620      	mov	r0, r4
 800b95a:	f001 f841 	bl	800c9e0 <__i2b>
 800b95e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b960:	4607      	mov	r7, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 81d0 	beq.w	800bd08 <_dtoa_r+0xb20>
 800b968:	461a      	mov	r2, r3
 800b96a:	4601      	mov	r1, r0
 800b96c:	4620      	mov	r0, r4
 800b96e:	f001 f8d7 	bl	800cb20 <__pow5mult>
 800b972:	9b06      	ldr	r3, [sp, #24]
 800b974:	2b01      	cmp	r3, #1
 800b976:	4607      	mov	r7, r0
 800b978:	dc40      	bgt.n	800b9fc <_dtoa_r+0x814>
 800b97a:	9b00      	ldr	r3, [sp, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d139      	bne.n	800b9f4 <_dtoa_r+0x80c>
 800b980:	9b01      	ldr	r3, [sp, #4]
 800b982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b986:	2b00      	cmp	r3, #0
 800b988:	d136      	bne.n	800b9f8 <_dtoa_r+0x810>
 800b98a:	9b01      	ldr	r3, [sp, #4]
 800b98c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b990:	0d1b      	lsrs	r3, r3, #20
 800b992:	051b      	lsls	r3, r3, #20
 800b994:	b12b      	cbz	r3, 800b9a2 <_dtoa_r+0x7ba>
 800b996:	9b05      	ldr	r3, [sp, #20]
 800b998:	3301      	adds	r3, #1
 800b99a:	9305      	str	r3, [sp, #20]
 800b99c:	f108 0801 	add.w	r8, r8, #1
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	9307      	str	r3, [sp, #28]
 800b9a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d12a      	bne.n	800ba00 <_dtoa_r+0x818>
 800b9aa:	2001      	movs	r0, #1
 800b9ac:	e030      	b.n	800ba10 <_dtoa_r+0x828>
 800b9ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b9b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b9b4:	e795      	b.n	800b8e2 <_dtoa_r+0x6fa>
 800b9b6:	9b07      	ldr	r3, [sp, #28]
 800b9b8:	f109 37ff 	add.w	r7, r9, #4294967295
 800b9bc:	42bb      	cmp	r3, r7
 800b9be:	bfbf      	itttt	lt
 800b9c0:	9b07      	ldrlt	r3, [sp, #28]
 800b9c2:	9707      	strlt	r7, [sp, #28]
 800b9c4:	1afa      	sublt	r2, r7, r3
 800b9c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b9c8:	bfbb      	ittet	lt
 800b9ca:	189b      	addlt	r3, r3, r2
 800b9cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b9ce:	1bdf      	subge	r7, r3, r7
 800b9d0:	2700      	movlt	r7, #0
 800b9d2:	f1b9 0f00 	cmp.w	r9, #0
 800b9d6:	bfb5      	itete	lt
 800b9d8:	9b05      	ldrlt	r3, [sp, #20]
 800b9da:	9d05      	ldrge	r5, [sp, #20]
 800b9dc:	eba3 0509 	sublt.w	r5, r3, r9
 800b9e0:	464b      	movge	r3, r9
 800b9e2:	bfb8      	it	lt
 800b9e4:	2300      	movlt	r3, #0
 800b9e6:	e77e      	b.n	800b8e6 <_dtoa_r+0x6fe>
 800b9e8:	9f07      	ldr	r7, [sp, #28]
 800b9ea:	9d05      	ldr	r5, [sp, #20]
 800b9ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b9ee:	e783      	b.n	800b8f8 <_dtoa_r+0x710>
 800b9f0:	9a07      	ldr	r2, [sp, #28]
 800b9f2:	e7ab      	b.n	800b94c <_dtoa_r+0x764>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	e7d4      	b.n	800b9a2 <_dtoa_r+0x7ba>
 800b9f8:	9b00      	ldr	r3, [sp, #0]
 800b9fa:	e7d2      	b.n	800b9a2 <_dtoa_r+0x7ba>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	9307      	str	r3, [sp, #28]
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ba06:	6918      	ldr	r0, [r3, #16]
 800ba08:	f000 ff9c 	bl	800c944 <__hi0bits>
 800ba0c:	f1c0 0020 	rsb	r0, r0, #32
 800ba10:	4440      	add	r0, r8
 800ba12:	f010 001f 	ands.w	r0, r0, #31
 800ba16:	d047      	beq.n	800baa8 <_dtoa_r+0x8c0>
 800ba18:	f1c0 0320 	rsb	r3, r0, #32
 800ba1c:	2b04      	cmp	r3, #4
 800ba1e:	dd3b      	ble.n	800ba98 <_dtoa_r+0x8b0>
 800ba20:	9b05      	ldr	r3, [sp, #20]
 800ba22:	f1c0 001c 	rsb	r0, r0, #28
 800ba26:	4403      	add	r3, r0
 800ba28:	9305      	str	r3, [sp, #20]
 800ba2a:	4405      	add	r5, r0
 800ba2c:	4480      	add	r8, r0
 800ba2e:	9b05      	ldr	r3, [sp, #20]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	dd05      	ble.n	800ba40 <_dtoa_r+0x858>
 800ba34:	461a      	mov	r2, r3
 800ba36:	9904      	ldr	r1, [sp, #16]
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f001 f8bf 	bl	800cbbc <__lshift>
 800ba3e:	9004      	str	r0, [sp, #16]
 800ba40:	f1b8 0f00 	cmp.w	r8, #0
 800ba44:	dd05      	ble.n	800ba52 <_dtoa_r+0x86a>
 800ba46:	4639      	mov	r1, r7
 800ba48:	4642      	mov	r2, r8
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f001 f8b6 	bl	800cbbc <__lshift>
 800ba50:	4607      	mov	r7, r0
 800ba52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba54:	b353      	cbz	r3, 800baac <_dtoa_r+0x8c4>
 800ba56:	4639      	mov	r1, r7
 800ba58:	9804      	ldr	r0, [sp, #16]
 800ba5a:	f001 f903 	bl	800cc64 <__mcmp>
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	da24      	bge.n	800baac <_dtoa_r+0x8c4>
 800ba62:	2300      	movs	r3, #0
 800ba64:	220a      	movs	r2, #10
 800ba66:	9904      	ldr	r1, [sp, #16]
 800ba68:	4620      	mov	r0, r4
 800ba6a:	f000 fef2 	bl	800c852 <__multadd>
 800ba6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba70:	9004      	str	r0, [sp, #16]
 800ba72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 814d 	beq.w	800bd16 <_dtoa_r+0xb2e>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	4631      	mov	r1, r6
 800ba80:	220a      	movs	r2, #10
 800ba82:	4620      	mov	r0, r4
 800ba84:	f000 fee5 	bl	800c852 <__multadd>
 800ba88:	9b02      	ldr	r3, [sp, #8]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	dc4f      	bgt.n	800bb30 <_dtoa_r+0x948>
 800ba90:	9b06      	ldr	r3, [sp, #24]
 800ba92:	2b02      	cmp	r3, #2
 800ba94:	dd4c      	ble.n	800bb30 <_dtoa_r+0x948>
 800ba96:	e011      	b.n	800babc <_dtoa_r+0x8d4>
 800ba98:	d0c9      	beq.n	800ba2e <_dtoa_r+0x846>
 800ba9a:	9a05      	ldr	r2, [sp, #20]
 800ba9c:	331c      	adds	r3, #28
 800ba9e:	441a      	add	r2, r3
 800baa0:	9205      	str	r2, [sp, #20]
 800baa2:	441d      	add	r5, r3
 800baa4:	4498      	add	r8, r3
 800baa6:	e7c2      	b.n	800ba2e <_dtoa_r+0x846>
 800baa8:	4603      	mov	r3, r0
 800baaa:	e7f6      	b.n	800ba9a <_dtoa_r+0x8b2>
 800baac:	f1b9 0f00 	cmp.w	r9, #0
 800bab0:	dc38      	bgt.n	800bb24 <_dtoa_r+0x93c>
 800bab2:	9b06      	ldr	r3, [sp, #24]
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	dd35      	ble.n	800bb24 <_dtoa_r+0x93c>
 800bab8:	f8cd 9008 	str.w	r9, [sp, #8]
 800babc:	9b02      	ldr	r3, [sp, #8]
 800babe:	b963      	cbnz	r3, 800bada <_dtoa_r+0x8f2>
 800bac0:	4639      	mov	r1, r7
 800bac2:	2205      	movs	r2, #5
 800bac4:	4620      	mov	r0, r4
 800bac6:	f000 fec4 	bl	800c852 <__multadd>
 800baca:	4601      	mov	r1, r0
 800bacc:	4607      	mov	r7, r0
 800bace:	9804      	ldr	r0, [sp, #16]
 800bad0:	f001 f8c8 	bl	800cc64 <__mcmp>
 800bad4:	2800      	cmp	r0, #0
 800bad6:	f73f adcc 	bgt.w	800b672 <_dtoa_r+0x48a>
 800bada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800badc:	465d      	mov	r5, fp
 800bade:	ea6f 0a03 	mvn.w	sl, r3
 800bae2:	f04f 0900 	mov.w	r9, #0
 800bae6:	4639      	mov	r1, r7
 800bae8:	4620      	mov	r0, r4
 800baea:	f000 fe9b 	bl	800c824 <_Bfree>
 800baee:	2e00      	cmp	r6, #0
 800baf0:	f43f aeb7 	beq.w	800b862 <_dtoa_r+0x67a>
 800baf4:	f1b9 0f00 	cmp.w	r9, #0
 800baf8:	d005      	beq.n	800bb06 <_dtoa_r+0x91e>
 800bafa:	45b1      	cmp	r9, r6
 800bafc:	d003      	beq.n	800bb06 <_dtoa_r+0x91e>
 800bafe:	4649      	mov	r1, r9
 800bb00:	4620      	mov	r0, r4
 800bb02:	f000 fe8f 	bl	800c824 <_Bfree>
 800bb06:	4631      	mov	r1, r6
 800bb08:	4620      	mov	r0, r4
 800bb0a:	f000 fe8b 	bl	800c824 <_Bfree>
 800bb0e:	e6a8      	b.n	800b862 <_dtoa_r+0x67a>
 800bb10:	2700      	movs	r7, #0
 800bb12:	463e      	mov	r6, r7
 800bb14:	e7e1      	b.n	800bada <_dtoa_r+0x8f2>
 800bb16:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bb1a:	463e      	mov	r6, r7
 800bb1c:	e5a9      	b.n	800b672 <_dtoa_r+0x48a>
 800bb1e:	bf00      	nop
 800bb20:	40240000 	.word	0x40240000
 800bb24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb26:	f8cd 9008 	str.w	r9, [sp, #8]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f000 80fa 	beq.w	800bd24 <_dtoa_r+0xb3c>
 800bb30:	2d00      	cmp	r5, #0
 800bb32:	dd05      	ble.n	800bb40 <_dtoa_r+0x958>
 800bb34:	4631      	mov	r1, r6
 800bb36:	462a      	mov	r2, r5
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f001 f83f 	bl	800cbbc <__lshift>
 800bb3e:	4606      	mov	r6, r0
 800bb40:	9b07      	ldr	r3, [sp, #28]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d04c      	beq.n	800bbe0 <_dtoa_r+0x9f8>
 800bb46:	6871      	ldr	r1, [r6, #4]
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f000 fe37 	bl	800c7bc <_Balloc>
 800bb4e:	6932      	ldr	r2, [r6, #16]
 800bb50:	3202      	adds	r2, #2
 800bb52:	4605      	mov	r5, r0
 800bb54:	0092      	lsls	r2, r2, #2
 800bb56:	f106 010c 	add.w	r1, r6, #12
 800bb5a:	300c      	adds	r0, #12
 800bb5c:	f7fd fbd0 	bl	8009300 <memcpy>
 800bb60:	2201      	movs	r2, #1
 800bb62:	4629      	mov	r1, r5
 800bb64:	4620      	mov	r0, r4
 800bb66:	f001 f829 	bl	800cbbc <__lshift>
 800bb6a:	9b00      	ldr	r3, [sp, #0]
 800bb6c:	f8cd b014 	str.w	fp, [sp, #20]
 800bb70:	f003 0301 	and.w	r3, r3, #1
 800bb74:	46b1      	mov	r9, r6
 800bb76:	9307      	str	r3, [sp, #28]
 800bb78:	4606      	mov	r6, r0
 800bb7a:	4639      	mov	r1, r7
 800bb7c:	9804      	ldr	r0, [sp, #16]
 800bb7e:	f7ff faa5 	bl	800b0cc <quorem>
 800bb82:	4649      	mov	r1, r9
 800bb84:	4605      	mov	r5, r0
 800bb86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bb8a:	9804      	ldr	r0, [sp, #16]
 800bb8c:	f001 f86a 	bl	800cc64 <__mcmp>
 800bb90:	4632      	mov	r2, r6
 800bb92:	9000      	str	r0, [sp, #0]
 800bb94:	4639      	mov	r1, r7
 800bb96:	4620      	mov	r0, r4
 800bb98:	f001 f87e 	bl	800cc98 <__mdiff>
 800bb9c:	68c3      	ldr	r3, [r0, #12]
 800bb9e:	4602      	mov	r2, r0
 800bba0:	bb03      	cbnz	r3, 800bbe4 <_dtoa_r+0x9fc>
 800bba2:	4601      	mov	r1, r0
 800bba4:	9008      	str	r0, [sp, #32]
 800bba6:	9804      	ldr	r0, [sp, #16]
 800bba8:	f001 f85c 	bl	800cc64 <__mcmp>
 800bbac:	9a08      	ldr	r2, [sp, #32]
 800bbae:	4603      	mov	r3, r0
 800bbb0:	4611      	mov	r1, r2
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	9308      	str	r3, [sp, #32]
 800bbb6:	f000 fe35 	bl	800c824 <_Bfree>
 800bbba:	9b08      	ldr	r3, [sp, #32]
 800bbbc:	b9a3      	cbnz	r3, 800bbe8 <_dtoa_r+0xa00>
 800bbbe:	9a06      	ldr	r2, [sp, #24]
 800bbc0:	b992      	cbnz	r2, 800bbe8 <_dtoa_r+0xa00>
 800bbc2:	9a07      	ldr	r2, [sp, #28]
 800bbc4:	b982      	cbnz	r2, 800bbe8 <_dtoa_r+0xa00>
 800bbc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bbca:	d029      	beq.n	800bc20 <_dtoa_r+0xa38>
 800bbcc:	9b00      	ldr	r3, [sp, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	dd01      	ble.n	800bbd6 <_dtoa_r+0x9ee>
 800bbd2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800bbd6:	9b05      	ldr	r3, [sp, #20]
 800bbd8:	1c5d      	adds	r5, r3, #1
 800bbda:	f883 8000 	strb.w	r8, [r3]
 800bbde:	e782      	b.n	800bae6 <_dtoa_r+0x8fe>
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	e7c2      	b.n	800bb6a <_dtoa_r+0x982>
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e7e3      	b.n	800bbb0 <_dtoa_r+0x9c8>
 800bbe8:	9a00      	ldr	r2, [sp, #0]
 800bbea:	2a00      	cmp	r2, #0
 800bbec:	db04      	blt.n	800bbf8 <_dtoa_r+0xa10>
 800bbee:	d125      	bne.n	800bc3c <_dtoa_r+0xa54>
 800bbf0:	9a06      	ldr	r2, [sp, #24]
 800bbf2:	bb1a      	cbnz	r2, 800bc3c <_dtoa_r+0xa54>
 800bbf4:	9a07      	ldr	r2, [sp, #28]
 800bbf6:	bb0a      	cbnz	r2, 800bc3c <_dtoa_r+0xa54>
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	ddec      	ble.n	800bbd6 <_dtoa_r+0x9ee>
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	9904      	ldr	r1, [sp, #16]
 800bc00:	4620      	mov	r0, r4
 800bc02:	f000 ffdb 	bl	800cbbc <__lshift>
 800bc06:	4639      	mov	r1, r7
 800bc08:	9004      	str	r0, [sp, #16]
 800bc0a:	f001 f82b 	bl	800cc64 <__mcmp>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	dc03      	bgt.n	800bc1a <_dtoa_r+0xa32>
 800bc12:	d1e0      	bne.n	800bbd6 <_dtoa_r+0x9ee>
 800bc14:	f018 0f01 	tst.w	r8, #1
 800bc18:	d0dd      	beq.n	800bbd6 <_dtoa_r+0x9ee>
 800bc1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bc1e:	d1d8      	bne.n	800bbd2 <_dtoa_r+0x9ea>
 800bc20:	9b05      	ldr	r3, [sp, #20]
 800bc22:	9a05      	ldr	r2, [sp, #20]
 800bc24:	1c5d      	adds	r5, r3, #1
 800bc26:	2339      	movs	r3, #57	; 0x39
 800bc28:	7013      	strb	r3, [r2, #0]
 800bc2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bc2e:	2b39      	cmp	r3, #57	; 0x39
 800bc30:	f105 32ff 	add.w	r2, r5, #4294967295
 800bc34:	d04f      	beq.n	800bcd6 <_dtoa_r+0xaee>
 800bc36:	3301      	adds	r3, #1
 800bc38:	7013      	strb	r3, [r2, #0]
 800bc3a:	e754      	b.n	800bae6 <_dtoa_r+0x8fe>
 800bc3c:	9a05      	ldr	r2, [sp, #20]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	f102 0501 	add.w	r5, r2, #1
 800bc44:	dd06      	ble.n	800bc54 <_dtoa_r+0xa6c>
 800bc46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bc4a:	d0e9      	beq.n	800bc20 <_dtoa_r+0xa38>
 800bc4c:	f108 0801 	add.w	r8, r8, #1
 800bc50:	9b05      	ldr	r3, [sp, #20]
 800bc52:	e7c2      	b.n	800bbda <_dtoa_r+0x9f2>
 800bc54:	9a02      	ldr	r2, [sp, #8]
 800bc56:	f805 8c01 	strb.w	r8, [r5, #-1]
 800bc5a:	eba5 030b 	sub.w	r3, r5, fp
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d021      	beq.n	800bca6 <_dtoa_r+0xabe>
 800bc62:	2300      	movs	r3, #0
 800bc64:	220a      	movs	r2, #10
 800bc66:	9904      	ldr	r1, [sp, #16]
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f000 fdf2 	bl	800c852 <__multadd>
 800bc6e:	45b1      	cmp	r9, r6
 800bc70:	9004      	str	r0, [sp, #16]
 800bc72:	f04f 0300 	mov.w	r3, #0
 800bc76:	f04f 020a 	mov.w	r2, #10
 800bc7a:	4649      	mov	r1, r9
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	d105      	bne.n	800bc8c <_dtoa_r+0xaa4>
 800bc80:	f000 fde7 	bl	800c852 <__multadd>
 800bc84:	4681      	mov	r9, r0
 800bc86:	4606      	mov	r6, r0
 800bc88:	9505      	str	r5, [sp, #20]
 800bc8a:	e776      	b.n	800bb7a <_dtoa_r+0x992>
 800bc8c:	f000 fde1 	bl	800c852 <__multadd>
 800bc90:	4631      	mov	r1, r6
 800bc92:	4681      	mov	r9, r0
 800bc94:	2300      	movs	r3, #0
 800bc96:	220a      	movs	r2, #10
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f000 fdda 	bl	800c852 <__multadd>
 800bc9e:	4606      	mov	r6, r0
 800bca0:	e7f2      	b.n	800bc88 <_dtoa_r+0xaa0>
 800bca2:	f04f 0900 	mov.w	r9, #0
 800bca6:	2201      	movs	r2, #1
 800bca8:	9904      	ldr	r1, [sp, #16]
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f000 ff86 	bl	800cbbc <__lshift>
 800bcb0:	4639      	mov	r1, r7
 800bcb2:	9004      	str	r0, [sp, #16]
 800bcb4:	f000 ffd6 	bl	800cc64 <__mcmp>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	dcb6      	bgt.n	800bc2a <_dtoa_r+0xa42>
 800bcbc:	d102      	bne.n	800bcc4 <_dtoa_r+0xadc>
 800bcbe:	f018 0f01 	tst.w	r8, #1
 800bcc2:	d1b2      	bne.n	800bc2a <_dtoa_r+0xa42>
 800bcc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bcc8:	2b30      	cmp	r3, #48	; 0x30
 800bcca:	f105 32ff 	add.w	r2, r5, #4294967295
 800bcce:	f47f af0a 	bne.w	800bae6 <_dtoa_r+0x8fe>
 800bcd2:	4615      	mov	r5, r2
 800bcd4:	e7f6      	b.n	800bcc4 <_dtoa_r+0xadc>
 800bcd6:	4593      	cmp	fp, r2
 800bcd8:	d105      	bne.n	800bce6 <_dtoa_r+0xafe>
 800bcda:	2331      	movs	r3, #49	; 0x31
 800bcdc:	f10a 0a01 	add.w	sl, sl, #1
 800bce0:	f88b 3000 	strb.w	r3, [fp]
 800bce4:	e6ff      	b.n	800bae6 <_dtoa_r+0x8fe>
 800bce6:	4615      	mov	r5, r2
 800bce8:	e79f      	b.n	800bc2a <_dtoa_r+0xa42>
 800bcea:	f8df b064 	ldr.w	fp, [pc, #100]	; 800bd50 <_dtoa_r+0xb68>
 800bcee:	e007      	b.n	800bd00 <_dtoa_r+0xb18>
 800bcf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcf2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800bd54 <_dtoa_r+0xb6c>
 800bcf6:	b11b      	cbz	r3, 800bd00 <_dtoa_r+0xb18>
 800bcf8:	f10b 0308 	add.w	r3, fp, #8
 800bcfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bcfe:	6013      	str	r3, [r2, #0]
 800bd00:	4658      	mov	r0, fp
 800bd02:	b017      	add	sp, #92	; 0x5c
 800bd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd08:	9b06      	ldr	r3, [sp, #24]
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	f77f ae35 	ble.w	800b97a <_dtoa_r+0x792>
 800bd10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd12:	9307      	str	r3, [sp, #28]
 800bd14:	e649      	b.n	800b9aa <_dtoa_r+0x7c2>
 800bd16:	9b02      	ldr	r3, [sp, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	dc03      	bgt.n	800bd24 <_dtoa_r+0xb3c>
 800bd1c:	9b06      	ldr	r3, [sp, #24]
 800bd1e:	2b02      	cmp	r3, #2
 800bd20:	f73f aecc 	bgt.w	800babc <_dtoa_r+0x8d4>
 800bd24:	465d      	mov	r5, fp
 800bd26:	4639      	mov	r1, r7
 800bd28:	9804      	ldr	r0, [sp, #16]
 800bd2a:	f7ff f9cf 	bl	800b0cc <quorem>
 800bd2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bd32:	f805 8b01 	strb.w	r8, [r5], #1
 800bd36:	9a02      	ldr	r2, [sp, #8]
 800bd38:	eba5 030b 	sub.w	r3, r5, fp
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	ddb0      	ble.n	800bca2 <_dtoa_r+0xaba>
 800bd40:	2300      	movs	r3, #0
 800bd42:	220a      	movs	r2, #10
 800bd44:	9904      	ldr	r1, [sp, #16]
 800bd46:	4620      	mov	r0, r4
 800bd48:	f000 fd83 	bl	800c852 <__multadd>
 800bd4c:	9004      	str	r0, [sp, #16]
 800bd4e:	e7ea      	b.n	800bd26 <_dtoa_r+0xb3e>
 800bd50:	0800dcd8 	.word	0x0800dcd8
 800bd54:	0800dd58 	.word	0x0800dd58

0800bd58 <__sflush_r>:
 800bd58:	898a      	ldrh	r2, [r1, #12]
 800bd5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd5e:	4605      	mov	r5, r0
 800bd60:	0710      	lsls	r0, r2, #28
 800bd62:	460c      	mov	r4, r1
 800bd64:	d458      	bmi.n	800be18 <__sflush_r+0xc0>
 800bd66:	684b      	ldr	r3, [r1, #4]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	dc05      	bgt.n	800bd78 <__sflush_r+0x20>
 800bd6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	dc02      	bgt.n	800bd78 <__sflush_r+0x20>
 800bd72:	2000      	movs	r0, #0
 800bd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd7a:	2e00      	cmp	r6, #0
 800bd7c:	d0f9      	beq.n	800bd72 <__sflush_r+0x1a>
 800bd7e:	2300      	movs	r3, #0
 800bd80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd84:	682f      	ldr	r7, [r5, #0]
 800bd86:	6a21      	ldr	r1, [r4, #32]
 800bd88:	602b      	str	r3, [r5, #0]
 800bd8a:	d032      	beq.n	800bdf2 <__sflush_r+0x9a>
 800bd8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd8e:	89a3      	ldrh	r3, [r4, #12]
 800bd90:	075a      	lsls	r2, r3, #29
 800bd92:	d505      	bpl.n	800bda0 <__sflush_r+0x48>
 800bd94:	6863      	ldr	r3, [r4, #4]
 800bd96:	1ac0      	subs	r0, r0, r3
 800bd98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd9a:	b10b      	cbz	r3, 800bda0 <__sflush_r+0x48>
 800bd9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd9e:	1ac0      	subs	r0, r0, r3
 800bda0:	2300      	movs	r3, #0
 800bda2:	4602      	mov	r2, r0
 800bda4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bda6:	6a21      	ldr	r1, [r4, #32]
 800bda8:	4628      	mov	r0, r5
 800bdaa:	47b0      	blx	r6
 800bdac:	1c43      	adds	r3, r0, #1
 800bdae:	89a3      	ldrh	r3, [r4, #12]
 800bdb0:	d106      	bne.n	800bdc0 <__sflush_r+0x68>
 800bdb2:	6829      	ldr	r1, [r5, #0]
 800bdb4:	291d      	cmp	r1, #29
 800bdb6:	d848      	bhi.n	800be4a <__sflush_r+0xf2>
 800bdb8:	4a29      	ldr	r2, [pc, #164]	; (800be60 <__sflush_r+0x108>)
 800bdba:	40ca      	lsrs	r2, r1
 800bdbc:	07d6      	lsls	r6, r2, #31
 800bdbe:	d544      	bpl.n	800be4a <__sflush_r+0xf2>
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	6062      	str	r2, [r4, #4]
 800bdc4:	04d9      	lsls	r1, r3, #19
 800bdc6:	6922      	ldr	r2, [r4, #16]
 800bdc8:	6022      	str	r2, [r4, #0]
 800bdca:	d504      	bpl.n	800bdd6 <__sflush_r+0x7e>
 800bdcc:	1c42      	adds	r2, r0, #1
 800bdce:	d101      	bne.n	800bdd4 <__sflush_r+0x7c>
 800bdd0:	682b      	ldr	r3, [r5, #0]
 800bdd2:	b903      	cbnz	r3, 800bdd6 <__sflush_r+0x7e>
 800bdd4:	6560      	str	r0, [r4, #84]	; 0x54
 800bdd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdd8:	602f      	str	r7, [r5, #0]
 800bdda:	2900      	cmp	r1, #0
 800bddc:	d0c9      	beq.n	800bd72 <__sflush_r+0x1a>
 800bdde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bde2:	4299      	cmp	r1, r3
 800bde4:	d002      	beq.n	800bdec <__sflush_r+0x94>
 800bde6:	4628      	mov	r0, r5
 800bde8:	f001 f8f6 	bl	800cfd8 <_free_r>
 800bdec:	2000      	movs	r0, #0
 800bdee:	6360      	str	r0, [r4, #52]	; 0x34
 800bdf0:	e7c0      	b.n	800bd74 <__sflush_r+0x1c>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	47b0      	blx	r6
 800bdf8:	1c41      	adds	r1, r0, #1
 800bdfa:	d1c8      	bne.n	800bd8e <__sflush_r+0x36>
 800bdfc:	682b      	ldr	r3, [r5, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d0c5      	beq.n	800bd8e <__sflush_r+0x36>
 800be02:	2b1d      	cmp	r3, #29
 800be04:	d001      	beq.n	800be0a <__sflush_r+0xb2>
 800be06:	2b16      	cmp	r3, #22
 800be08:	d101      	bne.n	800be0e <__sflush_r+0xb6>
 800be0a:	602f      	str	r7, [r5, #0]
 800be0c:	e7b1      	b.n	800bd72 <__sflush_r+0x1a>
 800be0e:	89a3      	ldrh	r3, [r4, #12]
 800be10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be14:	81a3      	strh	r3, [r4, #12]
 800be16:	e7ad      	b.n	800bd74 <__sflush_r+0x1c>
 800be18:	690f      	ldr	r7, [r1, #16]
 800be1a:	2f00      	cmp	r7, #0
 800be1c:	d0a9      	beq.n	800bd72 <__sflush_r+0x1a>
 800be1e:	0793      	lsls	r3, r2, #30
 800be20:	680e      	ldr	r6, [r1, #0]
 800be22:	bf08      	it	eq
 800be24:	694b      	ldreq	r3, [r1, #20]
 800be26:	600f      	str	r7, [r1, #0]
 800be28:	bf18      	it	ne
 800be2a:	2300      	movne	r3, #0
 800be2c:	eba6 0807 	sub.w	r8, r6, r7
 800be30:	608b      	str	r3, [r1, #8]
 800be32:	f1b8 0f00 	cmp.w	r8, #0
 800be36:	dd9c      	ble.n	800bd72 <__sflush_r+0x1a>
 800be38:	4643      	mov	r3, r8
 800be3a:	463a      	mov	r2, r7
 800be3c:	6a21      	ldr	r1, [r4, #32]
 800be3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be40:	4628      	mov	r0, r5
 800be42:	47b0      	blx	r6
 800be44:	2800      	cmp	r0, #0
 800be46:	dc06      	bgt.n	800be56 <__sflush_r+0xfe>
 800be48:	89a3      	ldrh	r3, [r4, #12]
 800be4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be4e:	81a3      	strh	r3, [r4, #12]
 800be50:	f04f 30ff 	mov.w	r0, #4294967295
 800be54:	e78e      	b.n	800bd74 <__sflush_r+0x1c>
 800be56:	4407      	add	r7, r0
 800be58:	eba8 0800 	sub.w	r8, r8, r0
 800be5c:	e7e9      	b.n	800be32 <__sflush_r+0xda>
 800be5e:	bf00      	nop
 800be60:	20400001 	.word	0x20400001

0800be64 <_fflush_r>:
 800be64:	b538      	push	{r3, r4, r5, lr}
 800be66:	690b      	ldr	r3, [r1, #16]
 800be68:	4605      	mov	r5, r0
 800be6a:	460c      	mov	r4, r1
 800be6c:	b1db      	cbz	r3, 800bea6 <_fflush_r+0x42>
 800be6e:	b118      	cbz	r0, 800be78 <_fflush_r+0x14>
 800be70:	6983      	ldr	r3, [r0, #24]
 800be72:	b90b      	cbnz	r3, 800be78 <_fflush_r+0x14>
 800be74:	f000 f860 	bl	800bf38 <__sinit>
 800be78:	4b0c      	ldr	r3, [pc, #48]	; (800beac <_fflush_r+0x48>)
 800be7a:	429c      	cmp	r4, r3
 800be7c:	d109      	bne.n	800be92 <_fflush_r+0x2e>
 800be7e:	686c      	ldr	r4, [r5, #4]
 800be80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be84:	b17b      	cbz	r3, 800bea6 <_fflush_r+0x42>
 800be86:	4621      	mov	r1, r4
 800be88:	4628      	mov	r0, r5
 800be8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be8e:	f7ff bf63 	b.w	800bd58 <__sflush_r>
 800be92:	4b07      	ldr	r3, [pc, #28]	; (800beb0 <_fflush_r+0x4c>)
 800be94:	429c      	cmp	r4, r3
 800be96:	d101      	bne.n	800be9c <_fflush_r+0x38>
 800be98:	68ac      	ldr	r4, [r5, #8]
 800be9a:	e7f1      	b.n	800be80 <_fflush_r+0x1c>
 800be9c:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <_fflush_r+0x50>)
 800be9e:	429c      	cmp	r4, r3
 800bea0:	bf08      	it	eq
 800bea2:	68ec      	ldreq	r4, [r5, #12]
 800bea4:	e7ec      	b.n	800be80 <_fflush_r+0x1c>
 800bea6:	2000      	movs	r0, #0
 800bea8:	bd38      	pop	{r3, r4, r5, pc}
 800beaa:	bf00      	nop
 800beac:	0800dd88 	.word	0x0800dd88
 800beb0:	0800dda8 	.word	0x0800dda8
 800beb4:	0800dd68 	.word	0x0800dd68

0800beb8 <std>:
 800beb8:	2300      	movs	r3, #0
 800beba:	b510      	push	{r4, lr}
 800bebc:	4604      	mov	r4, r0
 800bebe:	e9c0 3300 	strd	r3, r3, [r0]
 800bec2:	6083      	str	r3, [r0, #8]
 800bec4:	8181      	strh	r1, [r0, #12]
 800bec6:	6643      	str	r3, [r0, #100]	; 0x64
 800bec8:	81c2      	strh	r2, [r0, #14]
 800beca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bece:	6183      	str	r3, [r0, #24]
 800bed0:	4619      	mov	r1, r3
 800bed2:	2208      	movs	r2, #8
 800bed4:	305c      	adds	r0, #92	; 0x5c
 800bed6:	f7fd fa1e 	bl	8009316 <memset>
 800beda:	4b05      	ldr	r3, [pc, #20]	; (800bef0 <std+0x38>)
 800bedc:	6263      	str	r3, [r4, #36]	; 0x24
 800bede:	4b05      	ldr	r3, [pc, #20]	; (800bef4 <std+0x3c>)
 800bee0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bee2:	4b05      	ldr	r3, [pc, #20]	; (800bef8 <std+0x40>)
 800bee4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bee6:	4b05      	ldr	r3, [pc, #20]	; (800befc <std+0x44>)
 800bee8:	6224      	str	r4, [r4, #32]
 800beea:	6323      	str	r3, [r4, #48]	; 0x30
 800beec:	bd10      	pop	{r4, pc}
 800beee:	bf00      	nop
 800bef0:	0800d66d 	.word	0x0800d66d
 800bef4:	0800d68f 	.word	0x0800d68f
 800bef8:	0800d6c7 	.word	0x0800d6c7
 800befc:	0800d6eb 	.word	0x0800d6eb

0800bf00 <_cleanup_r>:
 800bf00:	4901      	ldr	r1, [pc, #4]	; (800bf08 <_cleanup_r+0x8>)
 800bf02:	f000 b885 	b.w	800c010 <_fwalk_reent>
 800bf06:	bf00      	nop
 800bf08:	0800be65 	.word	0x0800be65

0800bf0c <__sfmoreglue>:
 800bf0c:	b570      	push	{r4, r5, r6, lr}
 800bf0e:	1e4a      	subs	r2, r1, #1
 800bf10:	2568      	movs	r5, #104	; 0x68
 800bf12:	4355      	muls	r5, r2
 800bf14:	460e      	mov	r6, r1
 800bf16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf1a:	f001 f8ab 	bl	800d074 <_malloc_r>
 800bf1e:	4604      	mov	r4, r0
 800bf20:	b140      	cbz	r0, 800bf34 <__sfmoreglue+0x28>
 800bf22:	2100      	movs	r1, #0
 800bf24:	e9c0 1600 	strd	r1, r6, [r0]
 800bf28:	300c      	adds	r0, #12
 800bf2a:	60a0      	str	r0, [r4, #8]
 800bf2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf30:	f7fd f9f1 	bl	8009316 <memset>
 800bf34:	4620      	mov	r0, r4
 800bf36:	bd70      	pop	{r4, r5, r6, pc}

0800bf38 <__sinit>:
 800bf38:	6983      	ldr	r3, [r0, #24]
 800bf3a:	b510      	push	{r4, lr}
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	bb33      	cbnz	r3, 800bf8e <__sinit+0x56>
 800bf40:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bf44:	6503      	str	r3, [r0, #80]	; 0x50
 800bf46:	4b12      	ldr	r3, [pc, #72]	; (800bf90 <__sinit+0x58>)
 800bf48:	4a12      	ldr	r2, [pc, #72]	; (800bf94 <__sinit+0x5c>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	6282      	str	r2, [r0, #40]	; 0x28
 800bf4e:	4298      	cmp	r0, r3
 800bf50:	bf04      	itt	eq
 800bf52:	2301      	moveq	r3, #1
 800bf54:	6183      	streq	r3, [r0, #24]
 800bf56:	f000 f81f 	bl	800bf98 <__sfp>
 800bf5a:	6060      	str	r0, [r4, #4]
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	f000 f81b 	bl	800bf98 <__sfp>
 800bf62:	60a0      	str	r0, [r4, #8]
 800bf64:	4620      	mov	r0, r4
 800bf66:	f000 f817 	bl	800bf98 <__sfp>
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	60e0      	str	r0, [r4, #12]
 800bf6e:	2104      	movs	r1, #4
 800bf70:	6860      	ldr	r0, [r4, #4]
 800bf72:	f7ff ffa1 	bl	800beb8 <std>
 800bf76:	2201      	movs	r2, #1
 800bf78:	2109      	movs	r1, #9
 800bf7a:	68a0      	ldr	r0, [r4, #8]
 800bf7c:	f7ff ff9c 	bl	800beb8 <std>
 800bf80:	2202      	movs	r2, #2
 800bf82:	2112      	movs	r1, #18
 800bf84:	68e0      	ldr	r0, [r4, #12]
 800bf86:	f7ff ff97 	bl	800beb8 <std>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	61a3      	str	r3, [r4, #24]
 800bf8e:	bd10      	pop	{r4, pc}
 800bf90:	0800dcc4 	.word	0x0800dcc4
 800bf94:	0800bf01 	.word	0x0800bf01

0800bf98 <__sfp>:
 800bf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9a:	4b1b      	ldr	r3, [pc, #108]	; (800c008 <__sfp+0x70>)
 800bf9c:	681e      	ldr	r6, [r3, #0]
 800bf9e:	69b3      	ldr	r3, [r6, #24]
 800bfa0:	4607      	mov	r7, r0
 800bfa2:	b913      	cbnz	r3, 800bfaa <__sfp+0x12>
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	f7ff ffc7 	bl	800bf38 <__sinit>
 800bfaa:	3648      	adds	r6, #72	; 0x48
 800bfac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	d503      	bpl.n	800bfbc <__sfp+0x24>
 800bfb4:	6833      	ldr	r3, [r6, #0]
 800bfb6:	b133      	cbz	r3, 800bfc6 <__sfp+0x2e>
 800bfb8:	6836      	ldr	r6, [r6, #0]
 800bfba:	e7f7      	b.n	800bfac <__sfp+0x14>
 800bfbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bfc0:	b16d      	cbz	r5, 800bfde <__sfp+0x46>
 800bfc2:	3468      	adds	r4, #104	; 0x68
 800bfc4:	e7f4      	b.n	800bfb0 <__sfp+0x18>
 800bfc6:	2104      	movs	r1, #4
 800bfc8:	4638      	mov	r0, r7
 800bfca:	f7ff ff9f 	bl	800bf0c <__sfmoreglue>
 800bfce:	6030      	str	r0, [r6, #0]
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	d1f1      	bne.n	800bfb8 <__sfp+0x20>
 800bfd4:	230c      	movs	r3, #12
 800bfd6:	603b      	str	r3, [r7, #0]
 800bfd8:	4604      	mov	r4, r0
 800bfda:	4620      	mov	r0, r4
 800bfdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfde:	4b0b      	ldr	r3, [pc, #44]	; (800c00c <__sfp+0x74>)
 800bfe0:	6665      	str	r5, [r4, #100]	; 0x64
 800bfe2:	e9c4 5500 	strd	r5, r5, [r4]
 800bfe6:	60a5      	str	r5, [r4, #8]
 800bfe8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bfec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800bff0:	2208      	movs	r2, #8
 800bff2:	4629      	mov	r1, r5
 800bff4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bff8:	f7fd f98d 	bl	8009316 <memset>
 800bffc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c000:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c004:	e7e9      	b.n	800bfda <__sfp+0x42>
 800c006:	bf00      	nop
 800c008:	0800dcc4 	.word	0x0800dcc4
 800c00c:	ffff0001 	.word	0xffff0001

0800c010 <_fwalk_reent>:
 800c010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c014:	4680      	mov	r8, r0
 800c016:	4689      	mov	r9, r1
 800c018:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c01c:	2600      	movs	r6, #0
 800c01e:	b914      	cbnz	r4, 800c026 <_fwalk_reent+0x16>
 800c020:	4630      	mov	r0, r6
 800c022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c026:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c02a:	3f01      	subs	r7, #1
 800c02c:	d501      	bpl.n	800c032 <_fwalk_reent+0x22>
 800c02e:	6824      	ldr	r4, [r4, #0]
 800c030:	e7f5      	b.n	800c01e <_fwalk_reent+0xe>
 800c032:	89ab      	ldrh	r3, [r5, #12]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d907      	bls.n	800c048 <_fwalk_reent+0x38>
 800c038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c03c:	3301      	adds	r3, #1
 800c03e:	d003      	beq.n	800c048 <_fwalk_reent+0x38>
 800c040:	4629      	mov	r1, r5
 800c042:	4640      	mov	r0, r8
 800c044:	47c8      	blx	r9
 800c046:	4306      	orrs	r6, r0
 800c048:	3568      	adds	r5, #104	; 0x68
 800c04a:	e7ee      	b.n	800c02a <_fwalk_reent+0x1a>

0800c04c <rshift>:
 800c04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c04e:	6906      	ldr	r6, [r0, #16]
 800c050:	114b      	asrs	r3, r1, #5
 800c052:	429e      	cmp	r6, r3
 800c054:	f100 0414 	add.w	r4, r0, #20
 800c058:	dd30      	ble.n	800c0bc <rshift+0x70>
 800c05a:	f011 011f 	ands.w	r1, r1, #31
 800c05e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c062:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c066:	d108      	bne.n	800c07a <rshift+0x2e>
 800c068:	4621      	mov	r1, r4
 800c06a:	42b2      	cmp	r2, r6
 800c06c:	460b      	mov	r3, r1
 800c06e:	d211      	bcs.n	800c094 <rshift+0x48>
 800c070:	f852 3b04 	ldr.w	r3, [r2], #4
 800c074:	f841 3b04 	str.w	r3, [r1], #4
 800c078:	e7f7      	b.n	800c06a <rshift+0x1e>
 800c07a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c07e:	f1c1 0c20 	rsb	ip, r1, #32
 800c082:	40cd      	lsrs	r5, r1
 800c084:	3204      	adds	r2, #4
 800c086:	4623      	mov	r3, r4
 800c088:	42b2      	cmp	r2, r6
 800c08a:	4617      	mov	r7, r2
 800c08c:	d30c      	bcc.n	800c0a8 <rshift+0x5c>
 800c08e:	601d      	str	r5, [r3, #0]
 800c090:	b105      	cbz	r5, 800c094 <rshift+0x48>
 800c092:	3304      	adds	r3, #4
 800c094:	1b1a      	subs	r2, r3, r4
 800c096:	42a3      	cmp	r3, r4
 800c098:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c09c:	bf08      	it	eq
 800c09e:	2300      	moveq	r3, #0
 800c0a0:	6102      	str	r2, [r0, #16]
 800c0a2:	bf08      	it	eq
 800c0a4:	6143      	streq	r3, [r0, #20]
 800c0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0a8:	683f      	ldr	r7, [r7, #0]
 800c0aa:	fa07 f70c 	lsl.w	r7, r7, ip
 800c0ae:	433d      	orrs	r5, r7
 800c0b0:	f843 5b04 	str.w	r5, [r3], #4
 800c0b4:	f852 5b04 	ldr.w	r5, [r2], #4
 800c0b8:	40cd      	lsrs	r5, r1
 800c0ba:	e7e5      	b.n	800c088 <rshift+0x3c>
 800c0bc:	4623      	mov	r3, r4
 800c0be:	e7e9      	b.n	800c094 <rshift+0x48>

0800c0c0 <__hexdig_fun>:
 800c0c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c0c4:	2b09      	cmp	r3, #9
 800c0c6:	d802      	bhi.n	800c0ce <__hexdig_fun+0xe>
 800c0c8:	3820      	subs	r0, #32
 800c0ca:	b2c0      	uxtb	r0, r0
 800c0cc:	4770      	bx	lr
 800c0ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c0d2:	2b05      	cmp	r3, #5
 800c0d4:	d801      	bhi.n	800c0da <__hexdig_fun+0x1a>
 800c0d6:	3847      	subs	r0, #71	; 0x47
 800c0d8:	e7f7      	b.n	800c0ca <__hexdig_fun+0xa>
 800c0da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c0de:	2b05      	cmp	r3, #5
 800c0e0:	d801      	bhi.n	800c0e6 <__hexdig_fun+0x26>
 800c0e2:	3827      	subs	r0, #39	; 0x27
 800c0e4:	e7f1      	b.n	800c0ca <__hexdig_fun+0xa>
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	4770      	bx	lr

0800c0ea <__gethex>:
 800c0ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ee:	b08b      	sub	sp, #44	; 0x2c
 800c0f0:	468a      	mov	sl, r1
 800c0f2:	9002      	str	r0, [sp, #8]
 800c0f4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c0f6:	9306      	str	r3, [sp, #24]
 800c0f8:	4690      	mov	r8, r2
 800c0fa:	f000 fad0 	bl	800c69e <__localeconv_l>
 800c0fe:	6803      	ldr	r3, [r0, #0]
 800c100:	9303      	str	r3, [sp, #12]
 800c102:	4618      	mov	r0, r3
 800c104:	f7f4 f87c 	bl	8000200 <strlen>
 800c108:	9b03      	ldr	r3, [sp, #12]
 800c10a:	9001      	str	r0, [sp, #4]
 800c10c:	4403      	add	r3, r0
 800c10e:	f04f 0b00 	mov.w	fp, #0
 800c112:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c116:	9307      	str	r3, [sp, #28]
 800c118:	f8da 3000 	ldr.w	r3, [sl]
 800c11c:	3302      	adds	r3, #2
 800c11e:	461f      	mov	r7, r3
 800c120:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c124:	2830      	cmp	r0, #48	; 0x30
 800c126:	d06c      	beq.n	800c202 <__gethex+0x118>
 800c128:	f7ff ffca 	bl	800c0c0 <__hexdig_fun>
 800c12c:	4604      	mov	r4, r0
 800c12e:	2800      	cmp	r0, #0
 800c130:	d16a      	bne.n	800c208 <__gethex+0x11e>
 800c132:	9a01      	ldr	r2, [sp, #4]
 800c134:	9903      	ldr	r1, [sp, #12]
 800c136:	4638      	mov	r0, r7
 800c138:	f001 fadb 	bl	800d6f2 <strncmp>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	d166      	bne.n	800c20e <__gethex+0x124>
 800c140:	9b01      	ldr	r3, [sp, #4]
 800c142:	5cf8      	ldrb	r0, [r7, r3]
 800c144:	18fe      	adds	r6, r7, r3
 800c146:	f7ff ffbb 	bl	800c0c0 <__hexdig_fun>
 800c14a:	2800      	cmp	r0, #0
 800c14c:	d062      	beq.n	800c214 <__gethex+0x12a>
 800c14e:	4633      	mov	r3, r6
 800c150:	7818      	ldrb	r0, [r3, #0]
 800c152:	2830      	cmp	r0, #48	; 0x30
 800c154:	461f      	mov	r7, r3
 800c156:	f103 0301 	add.w	r3, r3, #1
 800c15a:	d0f9      	beq.n	800c150 <__gethex+0x66>
 800c15c:	f7ff ffb0 	bl	800c0c0 <__hexdig_fun>
 800c160:	fab0 f580 	clz	r5, r0
 800c164:	096d      	lsrs	r5, r5, #5
 800c166:	4634      	mov	r4, r6
 800c168:	f04f 0b01 	mov.w	fp, #1
 800c16c:	463a      	mov	r2, r7
 800c16e:	4616      	mov	r6, r2
 800c170:	3201      	adds	r2, #1
 800c172:	7830      	ldrb	r0, [r6, #0]
 800c174:	f7ff ffa4 	bl	800c0c0 <__hexdig_fun>
 800c178:	2800      	cmp	r0, #0
 800c17a:	d1f8      	bne.n	800c16e <__gethex+0x84>
 800c17c:	9a01      	ldr	r2, [sp, #4]
 800c17e:	9903      	ldr	r1, [sp, #12]
 800c180:	4630      	mov	r0, r6
 800c182:	f001 fab6 	bl	800d6f2 <strncmp>
 800c186:	b950      	cbnz	r0, 800c19e <__gethex+0xb4>
 800c188:	b954      	cbnz	r4, 800c1a0 <__gethex+0xb6>
 800c18a:	9b01      	ldr	r3, [sp, #4]
 800c18c:	18f4      	adds	r4, r6, r3
 800c18e:	4622      	mov	r2, r4
 800c190:	4616      	mov	r6, r2
 800c192:	3201      	adds	r2, #1
 800c194:	7830      	ldrb	r0, [r6, #0]
 800c196:	f7ff ff93 	bl	800c0c0 <__hexdig_fun>
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d1f8      	bne.n	800c190 <__gethex+0xa6>
 800c19e:	b10c      	cbz	r4, 800c1a4 <__gethex+0xba>
 800c1a0:	1ba4      	subs	r4, r4, r6
 800c1a2:	00a4      	lsls	r4, r4, #2
 800c1a4:	7833      	ldrb	r3, [r6, #0]
 800c1a6:	2b50      	cmp	r3, #80	; 0x50
 800c1a8:	d001      	beq.n	800c1ae <__gethex+0xc4>
 800c1aa:	2b70      	cmp	r3, #112	; 0x70
 800c1ac:	d140      	bne.n	800c230 <__gethex+0x146>
 800c1ae:	7873      	ldrb	r3, [r6, #1]
 800c1b0:	2b2b      	cmp	r3, #43	; 0x2b
 800c1b2:	d031      	beq.n	800c218 <__gethex+0x12e>
 800c1b4:	2b2d      	cmp	r3, #45	; 0x2d
 800c1b6:	d033      	beq.n	800c220 <__gethex+0x136>
 800c1b8:	1c71      	adds	r1, r6, #1
 800c1ba:	f04f 0900 	mov.w	r9, #0
 800c1be:	7808      	ldrb	r0, [r1, #0]
 800c1c0:	f7ff ff7e 	bl	800c0c0 <__hexdig_fun>
 800c1c4:	1e43      	subs	r3, r0, #1
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	2b18      	cmp	r3, #24
 800c1ca:	d831      	bhi.n	800c230 <__gethex+0x146>
 800c1cc:	f1a0 0210 	sub.w	r2, r0, #16
 800c1d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c1d4:	f7ff ff74 	bl	800c0c0 <__hexdig_fun>
 800c1d8:	1e43      	subs	r3, r0, #1
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	2b18      	cmp	r3, #24
 800c1de:	d922      	bls.n	800c226 <__gethex+0x13c>
 800c1e0:	f1b9 0f00 	cmp.w	r9, #0
 800c1e4:	d000      	beq.n	800c1e8 <__gethex+0xfe>
 800c1e6:	4252      	negs	r2, r2
 800c1e8:	4414      	add	r4, r2
 800c1ea:	f8ca 1000 	str.w	r1, [sl]
 800c1ee:	b30d      	cbz	r5, 800c234 <__gethex+0x14a>
 800c1f0:	f1bb 0f00 	cmp.w	fp, #0
 800c1f4:	bf0c      	ite	eq
 800c1f6:	2706      	moveq	r7, #6
 800c1f8:	2700      	movne	r7, #0
 800c1fa:	4638      	mov	r0, r7
 800c1fc:	b00b      	add	sp, #44	; 0x2c
 800c1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c202:	f10b 0b01 	add.w	fp, fp, #1
 800c206:	e78a      	b.n	800c11e <__gethex+0x34>
 800c208:	2500      	movs	r5, #0
 800c20a:	462c      	mov	r4, r5
 800c20c:	e7ae      	b.n	800c16c <__gethex+0x82>
 800c20e:	463e      	mov	r6, r7
 800c210:	2501      	movs	r5, #1
 800c212:	e7c7      	b.n	800c1a4 <__gethex+0xba>
 800c214:	4604      	mov	r4, r0
 800c216:	e7fb      	b.n	800c210 <__gethex+0x126>
 800c218:	f04f 0900 	mov.w	r9, #0
 800c21c:	1cb1      	adds	r1, r6, #2
 800c21e:	e7ce      	b.n	800c1be <__gethex+0xd4>
 800c220:	f04f 0901 	mov.w	r9, #1
 800c224:	e7fa      	b.n	800c21c <__gethex+0x132>
 800c226:	230a      	movs	r3, #10
 800c228:	fb03 0202 	mla	r2, r3, r2, r0
 800c22c:	3a10      	subs	r2, #16
 800c22e:	e7cf      	b.n	800c1d0 <__gethex+0xe6>
 800c230:	4631      	mov	r1, r6
 800c232:	e7da      	b.n	800c1ea <__gethex+0x100>
 800c234:	1bf3      	subs	r3, r6, r7
 800c236:	3b01      	subs	r3, #1
 800c238:	4629      	mov	r1, r5
 800c23a:	2b07      	cmp	r3, #7
 800c23c:	dc49      	bgt.n	800c2d2 <__gethex+0x1e8>
 800c23e:	9802      	ldr	r0, [sp, #8]
 800c240:	f000 fabc 	bl	800c7bc <_Balloc>
 800c244:	9b01      	ldr	r3, [sp, #4]
 800c246:	f100 0914 	add.w	r9, r0, #20
 800c24a:	f04f 0b00 	mov.w	fp, #0
 800c24e:	f1c3 0301 	rsb	r3, r3, #1
 800c252:	4605      	mov	r5, r0
 800c254:	f8cd 9010 	str.w	r9, [sp, #16]
 800c258:	46da      	mov	sl, fp
 800c25a:	9308      	str	r3, [sp, #32]
 800c25c:	42b7      	cmp	r7, r6
 800c25e:	d33b      	bcc.n	800c2d8 <__gethex+0x1ee>
 800c260:	9804      	ldr	r0, [sp, #16]
 800c262:	f840 ab04 	str.w	sl, [r0], #4
 800c266:	eba0 0009 	sub.w	r0, r0, r9
 800c26a:	1080      	asrs	r0, r0, #2
 800c26c:	6128      	str	r0, [r5, #16]
 800c26e:	0147      	lsls	r7, r0, #5
 800c270:	4650      	mov	r0, sl
 800c272:	f000 fb67 	bl	800c944 <__hi0bits>
 800c276:	f8d8 6000 	ldr.w	r6, [r8]
 800c27a:	1a3f      	subs	r7, r7, r0
 800c27c:	42b7      	cmp	r7, r6
 800c27e:	dd64      	ble.n	800c34a <__gethex+0x260>
 800c280:	1bbf      	subs	r7, r7, r6
 800c282:	4639      	mov	r1, r7
 800c284:	4628      	mov	r0, r5
 800c286:	f000 fe77 	bl	800cf78 <__any_on>
 800c28a:	4682      	mov	sl, r0
 800c28c:	b178      	cbz	r0, 800c2ae <__gethex+0x1c4>
 800c28e:	1e7b      	subs	r3, r7, #1
 800c290:	1159      	asrs	r1, r3, #5
 800c292:	f003 021f 	and.w	r2, r3, #31
 800c296:	f04f 0a01 	mov.w	sl, #1
 800c29a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c29e:	fa0a f202 	lsl.w	r2, sl, r2
 800c2a2:	420a      	tst	r2, r1
 800c2a4:	d003      	beq.n	800c2ae <__gethex+0x1c4>
 800c2a6:	4553      	cmp	r3, sl
 800c2a8:	dc46      	bgt.n	800c338 <__gethex+0x24e>
 800c2aa:	f04f 0a02 	mov.w	sl, #2
 800c2ae:	4639      	mov	r1, r7
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	f7ff fecb 	bl	800c04c <rshift>
 800c2b6:	443c      	add	r4, r7
 800c2b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c2bc:	42a3      	cmp	r3, r4
 800c2be:	da52      	bge.n	800c366 <__gethex+0x27c>
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	9802      	ldr	r0, [sp, #8]
 800c2c4:	f000 faae 	bl	800c824 <_Bfree>
 800c2c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	6013      	str	r3, [r2, #0]
 800c2ce:	27a3      	movs	r7, #163	; 0xa3
 800c2d0:	e793      	b.n	800c1fa <__gethex+0x110>
 800c2d2:	3101      	adds	r1, #1
 800c2d4:	105b      	asrs	r3, r3, #1
 800c2d6:	e7b0      	b.n	800c23a <__gethex+0x150>
 800c2d8:	1e73      	subs	r3, r6, #1
 800c2da:	9305      	str	r3, [sp, #20]
 800c2dc:	9a07      	ldr	r2, [sp, #28]
 800c2de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d018      	beq.n	800c318 <__gethex+0x22e>
 800c2e6:	f1bb 0f20 	cmp.w	fp, #32
 800c2ea:	d107      	bne.n	800c2fc <__gethex+0x212>
 800c2ec:	9b04      	ldr	r3, [sp, #16]
 800c2ee:	f8c3 a000 	str.w	sl, [r3]
 800c2f2:	3304      	adds	r3, #4
 800c2f4:	f04f 0a00 	mov.w	sl, #0
 800c2f8:	9304      	str	r3, [sp, #16]
 800c2fa:	46d3      	mov	fp, sl
 800c2fc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c300:	f7ff fede 	bl	800c0c0 <__hexdig_fun>
 800c304:	f000 000f 	and.w	r0, r0, #15
 800c308:	fa00 f00b 	lsl.w	r0, r0, fp
 800c30c:	ea4a 0a00 	orr.w	sl, sl, r0
 800c310:	f10b 0b04 	add.w	fp, fp, #4
 800c314:	9b05      	ldr	r3, [sp, #20]
 800c316:	e00d      	b.n	800c334 <__gethex+0x24a>
 800c318:	9b05      	ldr	r3, [sp, #20]
 800c31a:	9a08      	ldr	r2, [sp, #32]
 800c31c:	4413      	add	r3, r2
 800c31e:	42bb      	cmp	r3, r7
 800c320:	d3e1      	bcc.n	800c2e6 <__gethex+0x1fc>
 800c322:	4618      	mov	r0, r3
 800c324:	9a01      	ldr	r2, [sp, #4]
 800c326:	9903      	ldr	r1, [sp, #12]
 800c328:	9309      	str	r3, [sp, #36]	; 0x24
 800c32a:	f001 f9e2 	bl	800d6f2 <strncmp>
 800c32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c330:	2800      	cmp	r0, #0
 800c332:	d1d8      	bne.n	800c2e6 <__gethex+0x1fc>
 800c334:	461e      	mov	r6, r3
 800c336:	e791      	b.n	800c25c <__gethex+0x172>
 800c338:	1eb9      	subs	r1, r7, #2
 800c33a:	4628      	mov	r0, r5
 800c33c:	f000 fe1c 	bl	800cf78 <__any_on>
 800c340:	2800      	cmp	r0, #0
 800c342:	d0b2      	beq.n	800c2aa <__gethex+0x1c0>
 800c344:	f04f 0a03 	mov.w	sl, #3
 800c348:	e7b1      	b.n	800c2ae <__gethex+0x1c4>
 800c34a:	da09      	bge.n	800c360 <__gethex+0x276>
 800c34c:	1bf7      	subs	r7, r6, r7
 800c34e:	4629      	mov	r1, r5
 800c350:	463a      	mov	r2, r7
 800c352:	9802      	ldr	r0, [sp, #8]
 800c354:	f000 fc32 	bl	800cbbc <__lshift>
 800c358:	1be4      	subs	r4, r4, r7
 800c35a:	4605      	mov	r5, r0
 800c35c:	f100 0914 	add.w	r9, r0, #20
 800c360:	f04f 0a00 	mov.w	sl, #0
 800c364:	e7a8      	b.n	800c2b8 <__gethex+0x1ce>
 800c366:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c36a:	42a0      	cmp	r0, r4
 800c36c:	dd6a      	ble.n	800c444 <__gethex+0x35a>
 800c36e:	1b04      	subs	r4, r0, r4
 800c370:	42a6      	cmp	r6, r4
 800c372:	dc2e      	bgt.n	800c3d2 <__gethex+0x2e8>
 800c374:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c378:	2b02      	cmp	r3, #2
 800c37a:	d022      	beq.n	800c3c2 <__gethex+0x2d8>
 800c37c:	2b03      	cmp	r3, #3
 800c37e:	d024      	beq.n	800c3ca <__gethex+0x2e0>
 800c380:	2b01      	cmp	r3, #1
 800c382:	d115      	bne.n	800c3b0 <__gethex+0x2c6>
 800c384:	42a6      	cmp	r6, r4
 800c386:	d113      	bne.n	800c3b0 <__gethex+0x2c6>
 800c388:	2e01      	cmp	r6, #1
 800c38a:	dc0b      	bgt.n	800c3a4 <__gethex+0x2ba>
 800c38c:	9a06      	ldr	r2, [sp, #24]
 800c38e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c392:	6013      	str	r3, [r2, #0]
 800c394:	2301      	movs	r3, #1
 800c396:	612b      	str	r3, [r5, #16]
 800c398:	f8c9 3000 	str.w	r3, [r9]
 800c39c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c39e:	2762      	movs	r7, #98	; 0x62
 800c3a0:	601d      	str	r5, [r3, #0]
 800c3a2:	e72a      	b.n	800c1fa <__gethex+0x110>
 800c3a4:	1e71      	subs	r1, r6, #1
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	f000 fde6 	bl	800cf78 <__any_on>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	d1ed      	bne.n	800c38c <__gethex+0x2a2>
 800c3b0:	4629      	mov	r1, r5
 800c3b2:	9802      	ldr	r0, [sp, #8]
 800c3b4:	f000 fa36 	bl	800c824 <_Bfree>
 800c3b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	6013      	str	r3, [r2, #0]
 800c3be:	2750      	movs	r7, #80	; 0x50
 800c3c0:	e71b      	b.n	800c1fa <__gethex+0x110>
 800c3c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d0e1      	beq.n	800c38c <__gethex+0x2a2>
 800c3c8:	e7f2      	b.n	800c3b0 <__gethex+0x2c6>
 800c3ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1dd      	bne.n	800c38c <__gethex+0x2a2>
 800c3d0:	e7ee      	b.n	800c3b0 <__gethex+0x2c6>
 800c3d2:	1e67      	subs	r7, r4, #1
 800c3d4:	f1ba 0f00 	cmp.w	sl, #0
 800c3d8:	d131      	bne.n	800c43e <__gethex+0x354>
 800c3da:	b127      	cbz	r7, 800c3e6 <__gethex+0x2fc>
 800c3dc:	4639      	mov	r1, r7
 800c3de:	4628      	mov	r0, r5
 800c3e0:	f000 fdca 	bl	800cf78 <__any_on>
 800c3e4:	4682      	mov	sl, r0
 800c3e6:	117a      	asrs	r2, r7, #5
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	f007 071f 	and.w	r7, r7, #31
 800c3ee:	fa03 f707 	lsl.w	r7, r3, r7
 800c3f2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	421f      	tst	r7, r3
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	bf18      	it	ne
 800c3fe:	f04a 0a02 	orrne.w	sl, sl, #2
 800c402:	1b36      	subs	r6, r6, r4
 800c404:	f7ff fe22 	bl	800c04c <rshift>
 800c408:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c40c:	2702      	movs	r7, #2
 800c40e:	f1ba 0f00 	cmp.w	sl, #0
 800c412:	d048      	beq.n	800c4a6 <__gethex+0x3bc>
 800c414:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c418:	2b02      	cmp	r3, #2
 800c41a:	d015      	beq.n	800c448 <__gethex+0x35e>
 800c41c:	2b03      	cmp	r3, #3
 800c41e:	d017      	beq.n	800c450 <__gethex+0x366>
 800c420:	2b01      	cmp	r3, #1
 800c422:	d109      	bne.n	800c438 <__gethex+0x34e>
 800c424:	f01a 0f02 	tst.w	sl, #2
 800c428:	d006      	beq.n	800c438 <__gethex+0x34e>
 800c42a:	f8d9 3000 	ldr.w	r3, [r9]
 800c42e:	ea4a 0a03 	orr.w	sl, sl, r3
 800c432:	f01a 0f01 	tst.w	sl, #1
 800c436:	d10e      	bne.n	800c456 <__gethex+0x36c>
 800c438:	f047 0710 	orr.w	r7, r7, #16
 800c43c:	e033      	b.n	800c4a6 <__gethex+0x3bc>
 800c43e:	f04f 0a01 	mov.w	sl, #1
 800c442:	e7d0      	b.n	800c3e6 <__gethex+0x2fc>
 800c444:	2701      	movs	r7, #1
 800c446:	e7e2      	b.n	800c40e <__gethex+0x324>
 800c448:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c44a:	f1c3 0301 	rsb	r3, r3, #1
 800c44e:	9315      	str	r3, [sp, #84]	; 0x54
 800c450:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c452:	2b00      	cmp	r3, #0
 800c454:	d0f0      	beq.n	800c438 <__gethex+0x34e>
 800c456:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c45a:	f105 0314 	add.w	r3, r5, #20
 800c45e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c462:	eb03 010a 	add.w	r1, r3, sl
 800c466:	f04f 0c00 	mov.w	ip, #0
 800c46a:	4618      	mov	r0, r3
 800c46c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c470:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c474:	d01c      	beq.n	800c4b0 <__gethex+0x3c6>
 800c476:	3201      	adds	r2, #1
 800c478:	6002      	str	r2, [r0, #0]
 800c47a:	2f02      	cmp	r7, #2
 800c47c:	f105 0314 	add.w	r3, r5, #20
 800c480:	d138      	bne.n	800c4f4 <__gethex+0x40a>
 800c482:	f8d8 2000 	ldr.w	r2, [r8]
 800c486:	3a01      	subs	r2, #1
 800c488:	42b2      	cmp	r2, r6
 800c48a:	d10a      	bne.n	800c4a2 <__gethex+0x3b8>
 800c48c:	1171      	asrs	r1, r6, #5
 800c48e:	2201      	movs	r2, #1
 800c490:	f006 061f 	and.w	r6, r6, #31
 800c494:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c498:	fa02 f606 	lsl.w	r6, r2, r6
 800c49c:	421e      	tst	r6, r3
 800c49e:	bf18      	it	ne
 800c4a0:	4617      	movne	r7, r2
 800c4a2:	f047 0720 	orr.w	r7, r7, #32
 800c4a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4a8:	601d      	str	r5, [r3, #0]
 800c4aa:	9b06      	ldr	r3, [sp, #24]
 800c4ac:	601c      	str	r4, [r3, #0]
 800c4ae:	e6a4      	b.n	800c1fa <__gethex+0x110>
 800c4b0:	4299      	cmp	r1, r3
 800c4b2:	f843 cc04 	str.w	ip, [r3, #-4]
 800c4b6:	d8d8      	bhi.n	800c46a <__gethex+0x380>
 800c4b8:	68ab      	ldr	r3, [r5, #8]
 800c4ba:	4599      	cmp	r9, r3
 800c4bc:	db12      	blt.n	800c4e4 <__gethex+0x3fa>
 800c4be:	6869      	ldr	r1, [r5, #4]
 800c4c0:	9802      	ldr	r0, [sp, #8]
 800c4c2:	3101      	adds	r1, #1
 800c4c4:	f000 f97a 	bl	800c7bc <_Balloc>
 800c4c8:	692a      	ldr	r2, [r5, #16]
 800c4ca:	3202      	adds	r2, #2
 800c4cc:	f105 010c 	add.w	r1, r5, #12
 800c4d0:	4683      	mov	fp, r0
 800c4d2:	0092      	lsls	r2, r2, #2
 800c4d4:	300c      	adds	r0, #12
 800c4d6:	f7fc ff13 	bl	8009300 <memcpy>
 800c4da:	4629      	mov	r1, r5
 800c4dc:	9802      	ldr	r0, [sp, #8]
 800c4de:	f000 f9a1 	bl	800c824 <_Bfree>
 800c4e2:	465d      	mov	r5, fp
 800c4e4:	692b      	ldr	r3, [r5, #16]
 800c4e6:	1c5a      	adds	r2, r3, #1
 800c4e8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c4ec:	612a      	str	r2, [r5, #16]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	615a      	str	r2, [r3, #20]
 800c4f2:	e7c2      	b.n	800c47a <__gethex+0x390>
 800c4f4:	692a      	ldr	r2, [r5, #16]
 800c4f6:	454a      	cmp	r2, r9
 800c4f8:	dd0b      	ble.n	800c512 <__gethex+0x428>
 800c4fa:	2101      	movs	r1, #1
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	f7ff fda5 	bl	800c04c <rshift>
 800c502:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c506:	3401      	adds	r4, #1
 800c508:	42a3      	cmp	r3, r4
 800c50a:	f6ff aed9 	blt.w	800c2c0 <__gethex+0x1d6>
 800c50e:	2701      	movs	r7, #1
 800c510:	e7c7      	b.n	800c4a2 <__gethex+0x3b8>
 800c512:	f016 061f 	ands.w	r6, r6, #31
 800c516:	d0fa      	beq.n	800c50e <__gethex+0x424>
 800c518:	449a      	add	sl, r3
 800c51a:	f1c6 0620 	rsb	r6, r6, #32
 800c51e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c522:	f000 fa0f 	bl	800c944 <__hi0bits>
 800c526:	42b0      	cmp	r0, r6
 800c528:	dbe7      	blt.n	800c4fa <__gethex+0x410>
 800c52a:	e7f0      	b.n	800c50e <__gethex+0x424>

0800c52c <L_shift>:
 800c52c:	f1c2 0208 	rsb	r2, r2, #8
 800c530:	0092      	lsls	r2, r2, #2
 800c532:	b570      	push	{r4, r5, r6, lr}
 800c534:	f1c2 0620 	rsb	r6, r2, #32
 800c538:	6843      	ldr	r3, [r0, #4]
 800c53a:	6804      	ldr	r4, [r0, #0]
 800c53c:	fa03 f506 	lsl.w	r5, r3, r6
 800c540:	432c      	orrs	r4, r5
 800c542:	40d3      	lsrs	r3, r2
 800c544:	6004      	str	r4, [r0, #0]
 800c546:	f840 3f04 	str.w	r3, [r0, #4]!
 800c54a:	4288      	cmp	r0, r1
 800c54c:	d3f4      	bcc.n	800c538 <L_shift+0xc>
 800c54e:	bd70      	pop	{r4, r5, r6, pc}

0800c550 <__match>:
 800c550:	b530      	push	{r4, r5, lr}
 800c552:	6803      	ldr	r3, [r0, #0]
 800c554:	3301      	adds	r3, #1
 800c556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c55a:	b914      	cbnz	r4, 800c562 <__match+0x12>
 800c55c:	6003      	str	r3, [r0, #0]
 800c55e:	2001      	movs	r0, #1
 800c560:	bd30      	pop	{r4, r5, pc}
 800c562:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c566:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c56a:	2d19      	cmp	r5, #25
 800c56c:	bf98      	it	ls
 800c56e:	3220      	addls	r2, #32
 800c570:	42a2      	cmp	r2, r4
 800c572:	d0f0      	beq.n	800c556 <__match+0x6>
 800c574:	2000      	movs	r0, #0
 800c576:	e7f3      	b.n	800c560 <__match+0x10>

0800c578 <__hexnan>:
 800c578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57c:	680b      	ldr	r3, [r1, #0]
 800c57e:	6801      	ldr	r1, [r0, #0]
 800c580:	115f      	asrs	r7, r3, #5
 800c582:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c586:	f013 031f 	ands.w	r3, r3, #31
 800c58a:	b087      	sub	sp, #28
 800c58c:	bf18      	it	ne
 800c58e:	3704      	addne	r7, #4
 800c590:	2500      	movs	r5, #0
 800c592:	1f3e      	subs	r6, r7, #4
 800c594:	4682      	mov	sl, r0
 800c596:	4690      	mov	r8, r2
 800c598:	9301      	str	r3, [sp, #4]
 800c59a:	f847 5c04 	str.w	r5, [r7, #-4]
 800c59e:	46b1      	mov	r9, r6
 800c5a0:	4634      	mov	r4, r6
 800c5a2:	9502      	str	r5, [sp, #8]
 800c5a4:	46ab      	mov	fp, r5
 800c5a6:	784a      	ldrb	r2, [r1, #1]
 800c5a8:	1c4b      	adds	r3, r1, #1
 800c5aa:	9303      	str	r3, [sp, #12]
 800c5ac:	b342      	cbz	r2, 800c600 <__hexnan+0x88>
 800c5ae:	4610      	mov	r0, r2
 800c5b0:	9105      	str	r1, [sp, #20]
 800c5b2:	9204      	str	r2, [sp, #16]
 800c5b4:	f7ff fd84 	bl	800c0c0 <__hexdig_fun>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d143      	bne.n	800c644 <__hexnan+0xcc>
 800c5bc:	9a04      	ldr	r2, [sp, #16]
 800c5be:	9905      	ldr	r1, [sp, #20]
 800c5c0:	2a20      	cmp	r2, #32
 800c5c2:	d818      	bhi.n	800c5f6 <__hexnan+0x7e>
 800c5c4:	9b02      	ldr	r3, [sp, #8]
 800c5c6:	459b      	cmp	fp, r3
 800c5c8:	dd13      	ble.n	800c5f2 <__hexnan+0x7a>
 800c5ca:	454c      	cmp	r4, r9
 800c5cc:	d206      	bcs.n	800c5dc <__hexnan+0x64>
 800c5ce:	2d07      	cmp	r5, #7
 800c5d0:	dc04      	bgt.n	800c5dc <__hexnan+0x64>
 800c5d2:	462a      	mov	r2, r5
 800c5d4:	4649      	mov	r1, r9
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f7ff ffa8 	bl	800c52c <L_shift>
 800c5dc:	4544      	cmp	r4, r8
 800c5de:	d944      	bls.n	800c66a <__hexnan+0xf2>
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	f1a4 0904 	sub.w	r9, r4, #4
 800c5e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c5ea:	f8cd b008 	str.w	fp, [sp, #8]
 800c5ee:	464c      	mov	r4, r9
 800c5f0:	461d      	mov	r5, r3
 800c5f2:	9903      	ldr	r1, [sp, #12]
 800c5f4:	e7d7      	b.n	800c5a6 <__hexnan+0x2e>
 800c5f6:	2a29      	cmp	r2, #41	; 0x29
 800c5f8:	d14a      	bne.n	800c690 <__hexnan+0x118>
 800c5fa:	3102      	adds	r1, #2
 800c5fc:	f8ca 1000 	str.w	r1, [sl]
 800c600:	f1bb 0f00 	cmp.w	fp, #0
 800c604:	d044      	beq.n	800c690 <__hexnan+0x118>
 800c606:	454c      	cmp	r4, r9
 800c608:	d206      	bcs.n	800c618 <__hexnan+0xa0>
 800c60a:	2d07      	cmp	r5, #7
 800c60c:	dc04      	bgt.n	800c618 <__hexnan+0xa0>
 800c60e:	462a      	mov	r2, r5
 800c610:	4649      	mov	r1, r9
 800c612:	4620      	mov	r0, r4
 800c614:	f7ff ff8a 	bl	800c52c <L_shift>
 800c618:	4544      	cmp	r4, r8
 800c61a:	d928      	bls.n	800c66e <__hexnan+0xf6>
 800c61c:	4643      	mov	r3, r8
 800c61e:	f854 2b04 	ldr.w	r2, [r4], #4
 800c622:	f843 2b04 	str.w	r2, [r3], #4
 800c626:	42a6      	cmp	r6, r4
 800c628:	d2f9      	bcs.n	800c61e <__hexnan+0xa6>
 800c62a:	2200      	movs	r2, #0
 800c62c:	f843 2b04 	str.w	r2, [r3], #4
 800c630:	429e      	cmp	r6, r3
 800c632:	d2fb      	bcs.n	800c62c <__hexnan+0xb4>
 800c634:	6833      	ldr	r3, [r6, #0]
 800c636:	b91b      	cbnz	r3, 800c640 <__hexnan+0xc8>
 800c638:	4546      	cmp	r6, r8
 800c63a:	d127      	bne.n	800c68c <__hexnan+0x114>
 800c63c:	2301      	movs	r3, #1
 800c63e:	6033      	str	r3, [r6, #0]
 800c640:	2005      	movs	r0, #5
 800c642:	e026      	b.n	800c692 <__hexnan+0x11a>
 800c644:	3501      	adds	r5, #1
 800c646:	2d08      	cmp	r5, #8
 800c648:	f10b 0b01 	add.w	fp, fp, #1
 800c64c:	dd06      	ble.n	800c65c <__hexnan+0xe4>
 800c64e:	4544      	cmp	r4, r8
 800c650:	d9cf      	bls.n	800c5f2 <__hexnan+0x7a>
 800c652:	2300      	movs	r3, #0
 800c654:	f844 3c04 	str.w	r3, [r4, #-4]
 800c658:	2501      	movs	r5, #1
 800c65a:	3c04      	subs	r4, #4
 800c65c:	6822      	ldr	r2, [r4, #0]
 800c65e:	f000 000f 	and.w	r0, r0, #15
 800c662:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c666:	6020      	str	r0, [r4, #0]
 800c668:	e7c3      	b.n	800c5f2 <__hexnan+0x7a>
 800c66a:	2508      	movs	r5, #8
 800c66c:	e7c1      	b.n	800c5f2 <__hexnan+0x7a>
 800c66e:	9b01      	ldr	r3, [sp, #4]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d0df      	beq.n	800c634 <__hexnan+0xbc>
 800c674:	f04f 32ff 	mov.w	r2, #4294967295
 800c678:	f1c3 0320 	rsb	r3, r3, #32
 800c67c:	fa22 f303 	lsr.w	r3, r2, r3
 800c680:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c684:	401a      	ands	r2, r3
 800c686:	f847 2c04 	str.w	r2, [r7, #-4]
 800c68a:	e7d3      	b.n	800c634 <__hexnan+0xbc>
 800c68c:	3e04      	subs	r6, #4
 800c68e:	e7d1      	b.n	800c634 <__hexnan+0xbc>
 800c690:	2004      	movs	r0, #4
 800c692:	b007      	add	sp, #28
 800c694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c698 <__locale_ctype_ptr_l>:
 800c698:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c69c:	4770      	bx	lr

0800c69e <__localeconv_l>:
 800c69e:	30f0      	adds	r0, #240	; 0xf0
 800c6a0:	4770      	bx	lr
	...

0800c6a4 <_localeconv_r>:
 800c6a4:	4b04      	ldr	r3, [pc, #16]	; (800c6b8 <_localeconv_r+0x14>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	6a18      	ldr	r0, [r3, #32]
 800c6aa:	4b04      	ldr	r3, [pc, #16]	; (800c6bc <_localeconv_r+0x18>)
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	bf08      	it	eq
 800c6b0:	4618      	moveq	r0, r3
 800c6b2:	30f0      	adds	r0, #240	; 0xf0
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop
 800c6b8:	2000000c 	.word	0x2000000c
 800c6bc:	20000070 	.word	0x20000070

0800c6c0 <__swhatbuf_r>:
 800c6c0:	b570      	push	{r4, r5, r6, lr}
 800c6c2:	460e      	mov	r6, r1
 800c6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6c8:	2900      	cmp	r1, #0
 800c6ca:	b096      	sub	sp, #88	; 0x58
 800c6cc:	4614      	mov	r4, r2
 800c6ce:	461d      	mov	r5, r3
 800c6d0:	da07      	bge.n	800c6e2 <__swhatbuf_r+0x22>
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	602b      	str	r3, [r5, #0]
 800c6d6:	89b3      	ldrh	r3, [r6, #12]
 800c6d8:	061a      	lsls	r2, r3, #24
 800c6da:	d410      	bmi.n	800c6fe <__swhatbuf_r+0x3e>
 800c6dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6e0:	e00e      	b.n	800c700 <__swhatbuf_r+0x40>
 800c6e2:	466a      	mov	r2, sp
 800c6e4:	f001 f846 	bl	800d774 <_fstat_r>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	dbf2      	blt.n	800c6d2 <__swhatbuf_r+0x12>
 800c6ec:	9a01      	ldr	r2, [sp, #4]
 800c6ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c6f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c6f6:	425a      	negs	r2, r3
 800c6f8:	415a      	adcs	r2, r3
 800c6fa:	602a      	str	r2, [r5, #0]
 800c6fc:	e7ee      	b.n	800c6dc <__swhatbuf_r+0x1c>
 800c6fe:	2340      	movs	r3, #64	; 0x40
 800c700:	2000      	movs	r0, #0
 800c702:	6023      	str	r3, [r4, #0]
 800c704:	b016      	add	sp, #88	; 0x58
 800c706:	bd70      	pop	{r4, r5, r6, pc}

0800c708 <__smakebuf_r>:
 800c708:	898b      	ldrh	r3, [r1, #12]
 800c70a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c70c:	079d      	lsls	r5, r3, #30
 800c70e:	4606      	mov	r6, r0
 800c710:	460c      	mov	r4, r1
 800c712:	d507      	bpl.n	800c724 <__smakebuf_r+0x1c>
 800c714:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c718:	6023      	str	r3, [r4, #0]
 800c71a:	6123      	str	r3, [r4, #16]
 800c71c:	2301      	movs	r3, #1
 800c71e:	6163      	str	r3, [r4, #20]
 800c720:	b002      	add	sp, #8
 800c722:	bd70      	pop	{r4, r5, r6, pc}
 800c724:	ab01      	add	r3, sp, #4
 800c726:	466a      	mov	r2, sp
 800c728:	f7ff ffca 	bl	800c6c0 <__swhatbuf_r>
 800c72c:	9900      	ldr	r1, [sp, #0]
 800c72e:	4605      	mov	r5, r0
 800c730:	4630      	mov	r0, r6
 800c732:	f000 fc9f 	bl	800d074 <_malloc_r>
 800c736:	b948      	cbnz	r0, 800c74c <__smakebuf_r+0x44>
 800c738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c73c:	059a      	lsls	r2, r3, #22
 800c73e:	d4ef      	bmi.n	800c720 <__smakebuf_r+0x18>
 800c740:	f023 0303 	bic.w	r3, r3, #3
 800c744:	f043 0302 	orr.w	r3, r3, #2
 800c748:	81a3      	strh	r3, [r4, #12]
 800c74a:	e7e3      	b.n	800c714 <__smakebuf_r+0xc>
 800c74c:	4b0d      	ldr	r3, [pc, #52]	; (800c784 <__smakebuf_r+0x7c>)
 800c74e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c750:	89a3      	ldrh	r3, [r4, #12]
 800c752:	6020      	str	r0, [r4, #0]
 800c754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c758:	81a3      	strh	r3, [r4, #12]
 800c75a:	9b00      	ldr	r3, [sp, #0]
 800c75c:	6163      	str	r3, [r4, #20]
 800c75e:	9b01      	ldr	r3, [sp, #4]
 800c760:	6120      	str	r0, [r4, #16]
 800c762:	b15b      	cbz	r3, 800c77c <__smakebuf_r+0x74>
 800c764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c768:	4630      	mov	r0, r6
 800c76a:	f001 f815 	bl	800d798 <_isatty_r>
 800c76e:	b128      	cbz	r0, 800c77c <__smakebuf_r+0x74>
 800c770:	89a3      	ldrh	r3, [r4, #12]
 800c772:	f023 0303 	bic.w	r3, r3, #3
 800c776:	f043 0301 	orr.w	r3, r3, #1
 800c77a:	81a3      	strh	r3, [r4, #12]
 800c77c:	89a3      	ldrh	r3, [r4, #12]
 800c77e:	431d      	orrs	r5, r3
 800c780:	81a5      	strh	r5, [r4, #12]
 800c782:	e7cd      	b.n	800c720 <__smakebuf_r+0x18>
 800c784:	0800bf01 	.word	0x0800bf01

0800c788 <malloc>:
 800c788:	4b02      	ldr	r3, [pc, #8]	; (800c794 <malloc+0xc>)
 800c78a:	4601      	mov	r1, r0
 800c78c:	6818      	ldr	r0, [r3, #0]
 800c78e:	f000 bc71 	b.w	800d074 <_malloc_r>
 800c792:	bf00      	nop
 800c794:	2000000c 	.word	0x2000000c

0800c798 <__ascii_mbtowc>:
 800c798:	b082      	sub	sp, #8
 800c79a:	b901      	cbnz	r1, 800c79e <__ascii_mbtowc+0x6>
 800c79c:	a901      	add	r1, sp, #4
 800c79e:	b142      	cbz	r2, 800c7b2 <__ascii_mbtowc+0x1a>
 800c7a0:	b14b      	cbz	r3, 800c7b6 <__ascii_mbtowc+0x1e>
 800c7a2:	7813      	ldrb	r3, [r2, #0]
 800c7a4:	600b      	str	r3, [r1, #0]
 800c7a6:	7812      	ldrb	r2, [r2, #0]
 800c7a8:	1c10      	adds	r0, r2, #0
 800c7aa:	bf18      	it	ne
 800c7ac:	2001      	movne	r0, #1
 800c7ae:	b002      	add	sp, #8
 800c7b0:	4770      	bx	lr
 800c7b2:	4610      	mov	r0, r2
 800c7b4:	e7fb      	b.n	800c7ae <__ascii_mbtowc+0x16>
 800c7b6:	f06f 0001 	mvn.w	r0, #1
 800c7ba:	e7f8      	b.n	800c7ae <__ascii_mbtowc+0x16>

0800c7bc <_Balloc>:
 800c7bc:	b570      	push	{r4, r5, r6, lr}
 800c7be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c7c0:	4604      	mov	r4, r0
 800c7c2:	460e      	mov	r6, r1
 800c7c4:	b93d      	cbnz	r5, 800c7d6 <_Balloc+0x1a>
 800c7c6:	2010      	movs	r0, #16
 800c7c8:	f7ff ffde 	bl	800c788 <malloc>
 800c7cc:	6260      	str	r0, [r4, #36]	; 0x24
 800c7ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c7d2:	6005      	str	r5, [r0, #0]
 800c7d4:	60c5      	str	r5, [r0, #12]
 800c7d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c7d8:	68eb      	ldr	r3, [r5, #12]
 800c7da:	b183      	cbz	r3, 800c7fe <_Balloc+0x42>
 800c7dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c7e4:	b9b8      	cbnz	r0, 800c816 <_Balloc+0x5a>
 800c7e6:	2101      	movs	r1, #1
 800c7e8:	fa01 f506 	lsl.w	r5, r1, r6
 800c7ec:	1d6a      	adds	r2, r5, #5
 800c7ee:	0092      	lsls	r2, r2, #2
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f000 fbe2 	bl	800cfba <_calloc_r>
 800c7f6:	b160      	cbz	r0, 800c812 <_Balloc+0x56>
 800c7f8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c7fc:	e00e      	b.n	800c81c <_Balloc+0x60>
 800c7fe:	2221      	movs	r2, #33	; 0x21
 800c800:	2104      	movs	r1, #4
 800c802:	4620      	mov	r0, r4
 800c804:	f000 fbd9 	bl	800cfba <_calloc_r>
 800c808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c80a:	60e8      	str	r0, [r5, #12]
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1e4      	bne.n	800c7dc <_Balloc+0x20>
 800c812:	2000      	movs	r0, #0
 800c814:	bd70      	pop	{r4, r5, r6, pc}
 800c816:	6802      	ldr	r2, [r0, #0]
 800c818:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c81c:	2300      	movs	r3, #0
 800c81e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c822:	e7f7      	b.n	800c814 <_Balloc+0x58>

0800c824 <_Bfree>:
 800c824:	b570      	push	{r4, r5, r6, lr}
 800c826:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c828:	4606      	mov	r6, r0
 800c82a:	460d      	mov	r5, r1
 800c82c:	b93c      	cbnz	r4, 800c83e <_Bfree+0x1a>
 800c82e:	2010      	movs	r0, #16
 800c830:	f7ff ffaa 	bl	800c788 <malloc>
 800c834:	6270      	str	r0, [r6, #36]	; 0x24
 800c836:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c83a:	6004      	str	r4, [r0, #0]
 800c83c:	60c4      	str	r4, [r0, #12]
 800c83e:	b13d      	cbz	r5, 800c850 <_Bfree+0x2c>
 800c840:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c842:	686a      	ldr	r2, [r5, #4]
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c84a:	6029      	str	r1, [r5, #0]
 800c84c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c850:	bd70      	pop	{r4, r5, r6, pc}

0800c852 <__multadd>:
 800c852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c856:	690d      	ldr	r5, [r1, #16]
 800c858:	461f      	mov	r7, r3
 800c85a:	4606      	mov	r6, r0
 800c85c:	460c      	mov	r4, r1
 800c85e:	f101 0c14 	add.w	ip, r1, #20
 800c862:	2300      	movs	r3, #0
 800c864:	f8dc 0000 	ldr.w	r0, [ip]
 800c868:	b281      	uxth	r1, r0
 800c86a:	fb02 7101 	mla	r1, r2, r1, r7
 800c86e:	0c0f      	lsrs	r7, r1, #16
 800c870:	0c00      	lsrs	r0, r0, #16
 800c872:	fb02 7000 	mla	r0, r2, r0, r7
 800c876:	b289      	uxth	r1, r1
 800c878:	3301      	adds	r3, #1
 800c87a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c87e:	429d      	cmp	r5, r3
 800c880:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c884:	f84c 1b04 	str.w	r1, [ip], #4
 800c888:	dcec      	bgt.n	800c864 <__multadd+0x12>
 800c88a:	b1d7      	cbz	r7, 800c8c2 <__multadd+0x70>
 800c88c:	68a3      	ldr	r3, [r4, #8]
 800c88e:	42ab      	cmp	r3, r5
 800c890:	dc12      	bgt.n	800c8b8 <__multadd+0x66>
 800c892:	6861      	ldr	r1, [r4, #4]
 800c894:	4630      	mov	r0, r6
 800c896:	3101      	adds	r1, #1
 800c898:	f7ff ff90 	bl	800c7bc <_Balloc>
 800c89c:	6922      	ldr	r2, [r4, #16]
 800c89e:	3202      	adds	r2, #2
 800c8a0:	f104 010c 	add.w	r1, r4, #12
 800c8a4:	4680      	mov	r8, r0
 800c8a6:	0092      	lsls	r2, r2, #2
 800c8a8:	300c      	adds	r0, #12
 800c8aa:	f7fc fd29 	bl	8009300 <memcpy>
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	4630      	mov	r0, r6
 800c8b2:	f7ff ffb7 	bl	800c824 <_Bfree>
 800c8b6:	4644      	mov	r4, r8
 800c8b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c8bc:	3501      	adds	r5, #1
 800c8be:	615f      	str	r7, [r3, #20]
 800c8c0:	6125      	str	r5, [r4, #16]
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c8c8 <__s2b>:
 800c8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8cc:	460c      	mov	r4, r1
 800c8ce:	4615      	mov	r5, r2
 800c8d0:	461f      	mov	r7, r3
 800c8d2:	2209      	movs	r2, #9
 800c8d4:	3308      	adds	r3, #8
 800c8d6:	4606      	mov	r6, r0
 800c8d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8dc:	2100      	movs	r1, #0
 800c8de:	2201      	movs	r2, #1
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	db20      	blt.n	800c926 <__s2b+0x5e>
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	f7ff ff69 	bl	800c7bc <_Balloc>
 800c8ea:	9b08      	ldr	r3, [sp, #32]
 800c8ec:	6143      	str	r3, [r0, #20]
 800c8ee:	2d09      	cmp	r5, #9
 800c8f0:	f04f 0301 	mov.w	r3, #1
 800c8f4:	6103      	str	r3, [r0, #16]
 800c8f6:	dd19      	ble.n	800c92c <__s2b+0x64>
 800c8f8:	f104 0809 	add.w	r8, r4, #9
 800c8fc:	46c1      	mov	r9, r8
 800c8fe:	442c      	add	r4, r5
 800c900:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c904:	4601      	mov	r1, r0
 800c906:	3b30      	subs	r3, #48	; 0x30
 800c908:	220a      	movs	r2, #10
 800c90a:	4630      	mov	r0, r6
 800c90c:	f7ff ffa1 	bl	800c852 <__multadd>
 800c910:	45a1      	cmp	r9, r4
 800c912:	d1f5      	bne.n	800c900 <__s2b+0x38>
 800c914:	eb08 0405 	add.w	r4, r8, r5
 800c918:	3c08      	subs	r4, #8
 800c91a:	1b2d      	subs	r5, r5, r4
 800c91c:	1963      	adds	r3, r4, r5
 800c91e:	42bb      	cmp	r3, r7
 800c920:	db07      	blt.n	800c932 <__s2b+0x6a>
 800c922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c926:	0052      	lsls	r2, r2, #1
 800c928:	3101      	adds	r1, #1
 800c92a:	e7d9      	b.n	800c8e0 <__s2b+0x18>
 800c92c:	340a      	adds	r4, #10
 800c92e:	2509      	movs	r5, #9
 800c930:	e7f3      	b.n	800c91a <__s2b+0x52>
 800c932:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c936:	4601      	mov	r1, r0
 800c938:	3b30      	subs	r3, #48	; 0x30
 800c93a:	220a      	movs	r2, #10
 800c93c:	4630      	mov	r0, r6
 800c93e:	f7ff ff88 	bl	800c852 <__multadd>
 800c942:	e7eb      	b.n	800c91c <__s2b+0x54>

0800c944 <__hi0bits>:
 800c944:	0c02      	lsrs	r2, r0, #16
 800c946:	0412      	lsls	r2, r2, #16
 800c948:	4603      	mov	r3, r0
 800c94a:	b9b2      	cbnz	r2, 800c97a <__hi0bits+0x36>
 800c94c:	0403      	lsls	r3, r0, #16
 800c94e:	2010      	movs	r0, #16
 800c950:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c954:	bf04      	itt	eq
 800c956:	021b      	lsleq	r3, r3, #8
 800c958:	3008      	addeq	r0, #8
 800c95a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c95e:	bf04      	itt	eq
 800c960:	011b      	lsleq	r3, r3, #4
 800c962:	3004      	addeq	r0, #4
 800c964:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c968:	bf04      	itt	eq
 800c96a:	009b      	lsleq	r3, r3, #2
 800c96c:	3002      	addeq	r0, #2
 800c96e:	2b00      	cmp	r3, #0
 800c970:	db06      	blt.n	800c980 <__hi0bits+0x3c>
 800c972:	005b      	lsls	r3, r3, #1
 800c974:	d503      	bpl.n	800c97e <__hi0bits+0x3a>
 800c976:	3001      	adds	r0, #1
 800c978:	4770      	bx	lr
 800c97a:	2000      	movs	r0, #0
 800c97c:	e7e8      	b.n	800c950 <__hi0bits+0xc>
 800c97e:	2020      	movs	r0, #32
 800c980:	4770      	bx	lr

0800c982 <__lo0bits>:
 800c982:	6803      	ldr	r3, [r0, #0]
 800c984:	f013 0207 	ands.w	r2, r3, #7
 800c988:	4601      	mov	r1, r0
 800c98a:	d00b      	beq.n	800c9a4 <__lo0bits+0x22>
 800c98c:	07da      	lsls	r2, r3, #31
 800c98e:	d423      	bmi.n	800c9d8 <__lo0bits+0x56>
 800c990:	0798      	lsls	r0, r3, #30
 800c992:	bf49      	itett	mi
 800c994:	085b      	lsrmi	r3, r3, #1
 800c996:	089b      	lsrpl	r3, r3, #2
 800c998:	2001      	movmi	r0, #1
 800c99a:	600b      	strmi	r3, [r1, #0]
 800c99c:	bf5c      	itt	pl
 800c99e:	600b      	strpl	r3, [r1, #0]
 800c9a0:	2002      	movpl	r0, #2
 800c9a2:	4770      	bx	lr
 800c9a4:	b298      	uxth	r0, r3
 800c9a6:	b9a8      	cbnz	r0, 800c9d4 <__lo0bits+0x52>
 800c9a8:	0c1b      	lsrs	r3, r3, #16
 800c9aa:	2010      	movs	r0, #16
 800c9ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c9b0:	bf04      	itt	eq
 800c9b2:	0a1b      	lsreq	r3, r3, #8
 800c9b4:	3008      	addeq	r0, #8
 800c9b6:	071a      	lsls	r2, r3, #28
 800c9b8:	bf04      	itt	eq
 800c9ba:	091b      	lsreq	r3, r3, #4
 800c9bc:	3004      	addeq	r0, #4
 800c9be:	079a      	lsls	r2, r3, #30
 800c9c0:	bf04      	itt	eq
 800c9c2:	089b      	lsreq	r3, r3, #2
 800c9c4:	3002      	addeq	r0, #2
 800c9c6:	07da      	lsls	r2, r3, #31
 800c9c8:	d402      	bmi.n	800c9d0 <__lo0bits+0x4e>
 800c9ca:	085b      	lsrs	r3, r3, #1
 800c9cc:	d006      	beq.n	800c9dc <__lo0bits+0x5a>
 800c9ce:	3001      	adds	r0, #1
 800c9d0:	600b      	str	r3, [r1, #0]
 800c9d2:	4770      	bx	lr
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	e7e9      	b.n	800c9ac <__lo0bits+0x2a>
 800c9d8:	2000      	movs	r0, #0
 800c9da:	4770      	bx	lr
 800c9dc:	2020      	movs	r0, #32
 800c9de:	4770      	bx	lr

0800c9e0 <__i2b>:
 800c9e0:	b510      	push	{r4, lr}
 800c9e2:	460c      	mov	r4, r1
 800c9e4:	2101      	movs	r1, #1
 800c9e6:	f7ff fee9 	bl	800c7bc <_Balloc>
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	6144      	str	r4, [r0, #20]
 800c9ee:	6102      	str	r2, [r0, #16]
 800c9f0:	bd10      	pop	{r4, pc}

0800c9f2 <__multiply>:
 800c9f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f6:	4614      	mov	r4, r2
 800c9f8:	690a      	ldr	r2, [r1, #16]
 800c9fa:	6923      	ldr	r3, [r4, #16]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	bfb8      	it	lt
 800ca00:	460b      	movlt	r3, r1
 800ca02:	4688      	mov	r8, r1
 800ca04:	bfbc      	itt	lt
 800ca06:	46a0      	movlt	r8, r4
 800ca08:	461c      	movlt	r4, r3
 800ca0a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca0e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ca12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca16:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca1a:	eb07 0609 	add.w	r6, r7, r9
 800ca1e:	42b3      	cmp	r3, r6
 800ca20:	bfb8      	it	lt
 800ca22:	3101      	addlt	r1, #1
 800ca24:	f7ff feca 	bl	800c7bc <_Balloc>
 800ca28:	f100 0514 	add.w	r5, r0, #20
 800ca2c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ca30:	462b      	mov	r3, r5
 800ca32:	2200      	movs	r2, #0
 800ca34:	4573      	cmp	r3, lr
 800ca36:	d316      	bcc.n	800ca66 <__multiply+0x74>
 800ca38:	f104 0214 	add.w	r2, r4, #20
 800ca3c:	f108 0114 	add.w	r1, r8, #20
 800ca40:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ca44:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ca48:	9300      	str	r3, [sp, #0]
 800ca4a:	9b00      	ldr	r3, [sp, #0]
 800ca4c:	9201      	str	r2, [sp, #4]
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d80c      	bhi.n	800ca6c <__multiply+0x7a>
 800ca52:	2e00      	cmp	r6, #0
 800ca54:	dd03      	ble.n	800ca5e <__multiply+0x6c>
 800ca56:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d05d      	beq.n	800cb1a <__multiply+0x128>
 800ca5e:	6106      	str	r6, [r0, #16]
 800ca60:	b003      	add	sp, #12
 800ca62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca66:	f843 2b04 	str.w	r2, [r3], #4
 800ca6a:	e7e3      	b.n	800ca34 <__multiply+0x42>
 800ca6c:	f8b2 b000 	ldrh.w	fp, [r2]
 800ca70:	f1bb 0f00 	cmp.w	fp, #0
 800ca74:	d023      	beq.n	800cabe <__multiply+0xcc>
 800ca76:	4689      	mov	r9, r1
 800ca78:	46ac      	mov	ip, r5
 800ca7a:	f04f 0800 	mov.w	r8, #0
 800ca7e:	f859 4b04 	ldr.w	r4, [r9], #4
 800ca82:	f8dc a000 	ldr.w	sl, [ip]
 800ca86:	b2a3      	uxth	r3, r4
 800ca88:	fa1f fa8a 	uxth.w	sl, sl
 800ca8c:	fb0b a303 	mla	r3, fp, r3, sl
 800ca90:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ca94:	f8dc 4000 	ldr.w	r4, [ip]
 800ca98:	4443      	add	r3, r8
 800ca9a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ca9e:	fb0b 840a 	mla	r4, fp, sl, r8
 800caa2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800caa6:	46e2      	mov	sl, ip
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800caae:	454f      	cmp	r7, r9
 800cab0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cab4:	f84a 3b04 	str.w	r3, [sl], #4
 800cab8:	d82b      	bhi.n	800cb12 <__multiply+0x120>
 800caba:	f8cc 8004 	str.w	r8, [ip, #4]
 800cabe:	9b01      	ldr	r3, [sp, #4]
 800cac0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cac4:	3204      	adds	r2, #4
 800cac6:	f1ba 0f00 	cmp.w	sl, #0
 800caca:	d020      	beq.n	800cb0e <__multiply+0x11c>
 800cacc:	682b      	ldr	r3, [r5, #0]
 800cace:	4689      	mov	r9, r1
 800cad0:	46a8      	mov	r8, r5
 800cad2:	f04f 0b00 	mov.w	fp, #0
 800cad6:	f8b9 c000 	ldrh.w	ip, [r9]
 800cada:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cade:	fb0a 440c 	mla	r4, sl, ip, r4
 800cae2:	445c      	add	r4, fp
 800cae4:	46c4      	mov	ip, r8
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800caec:	f84c 3b04 	str.w	r3, [ip], #4
 800caf0:	f859 3b04 	ldr.w	r3, [r9], #4
 800caf4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800caf8:	0c1b      	lsrs	r3, r3, #16
 800cafa:	fb0a b303 	mla	r3, sl, r3, fp
 800cafe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cb02:	454f      	cmp	r7, r9
 800cb04:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cb08:	d805      	bhi.n	800cb16 <__multiply+0x124>
 800cb0a:	f8c8 3004 	str.w	r3, [r8, #4]
 800cb0e:	3504      	adds	r5, #4
 800cb10:	e79b      	b.n	800ca4a <__multiply+0x58>
 800cb12:	46d4      	mov	ip, sl
 800cb14:	e7b3      	b.n	800ca7e <__multiply+0x8c>
 800cb16:	46e0      	mov	r8, ip
 800cb18:	e7dd      	b.n	800cad6 <__multiply+0xe4>
 800cb1a:	3e01      	subs	r6, #1
 800cb1c:	e799      	b.n	800ca52 <__multiply+0x60>
	...

0800cb20 <__pow5mult>:
 800cb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb24:	4615      	mov	r5, r2
 800cb26:	f012 0203 	ands.w	r2, r2, #3
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	460f      	mov	r7, r1
 800cb2e:	d007      	beq.n	800cb40 <__pow5mult+0x20>
 800cb30:	3a01      	subs	r2, #1
 800cb32:	4c21      	ldr	r4, [pc, #132]	; (800cbb8 <__pow5mult+0x98>)
 800cb34:	2300      	movs	r3, #0
 800cb36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb3a:	f7ff fe8a 	bl	800c852 <__multadd>
 800cb3e:	4607      	mov	r7, r0
 800cb40:	10ad      	asrs	r5, r5, #2
 800cb42:	d035      	beq.n	800cbb0 <__pow5mult+0x90>
 800cb44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cb46:	b93c      	cbnz	r4, 800cb58 <__pow5mult+0x38>
 800cb48:	2010      	movs	r0, #16
 800cb4a:	f7ff fe1d 	bl	800c788 <malloc>
 800cb4e:	6270      	str	r0, [r6, #36]	; 0x24
 800cb50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb54:	6004      	str	r4, [r0, #0]
 800cb56:	60c4      	str	r4, [r0, #12]
 800cb58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cb5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb60:	b94c      	cbnz	r4, 800cb76 <__pow5mult+0x56>
 800cb62:	f240 2171 	movw	r1, #625	; 0x271
 800cb66:	4630      	mov	r0, r6
 800cb68:	f7ff ff3a 	bl	800c9e0 <__i2b>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb72:	4604      	mov	r4, r0
 800cb74:	6003      	str	r3, [r0, #0]
 800cb76:	f04f 0800 	mov.w	r8, #0
 800cb7a:	07eb      	lsls	r3, r5, #31
 800cb7c:	d50a      	bpl.n	800cb94 <__pow5mult+0x74>
 800cb7e:	4639      	mov	r1, r7
 800cb80:	4622      	mov	r2, r4
 800cb82:	4630      	mov	r0, r6
 800cb84:	f7ff ff35 	bl	800c9f2 <__multiply>
 800cb88:	4639      	mov	r1, r7
 800cb8a:	4681      	mov	r9, r0
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	f7ff fe49 	bl	800c824 <_Bfree>
 800cb92:	464f      	mov	r7, r9
 800cb94:	106d      	asrs	r5, r5, #1
 800cb96:	d00b      	beq.n	800cbb0 <__pow5mult+0x90>
 800cb98:	6820      	ldr	r0, [r4, #0]
 800cb9a:	b938      	cbnz	r0, 800cbac <__pow5mult+0x8c>
 800cb9c:	4622      	mov	r2, r4
 800cb9e:	4621      	mov	r1, r4
 800cba0:	4630      	mov	r0, r6
 800cba2:	f7ff ff26 	bl	800c9f2 <__multiply>
 800cba6:	6020      	str	r0, [r4, #0]
 800cba8:	f8c0 8000 	str.w	r8, [r0]
 800cbac:	4604      	mov	r4, r0
 800cbae:	e7e4      	b.n	800cb7a <__pow5mult+0x5a>
 800cbb0:	4638      	mov	r0, r7
 800cbb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbb6:	bf00      	nop
 800cbb8:	0800dec8 	.word	0x0800dec8

0800cbbc <__lshift>:
 800cbbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbc0:	460c      	mov	r4, r1
 800cbc2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cbc6:	6923      	ldr	r3, [r4, #16]
 800cbc8:	6849      	ldr	r1, [r1, #4]
 800cbca:	eb0a 0903 	add.w	r9, sl, r3
 800cbce:	68a3      	ldr	r3, [r4, #8]
 800cbd0:	4607      	mov	r7, r0
 800cbd2:	4616      	mov	r6, r2
 800cbd4:	f109 0501 	add.w	r5, r9, #1
 800cbd8:	42ab      	cmp	r3, r5
 800cbda:	db32      	blt.n	800cc42 <__lshift+0x86>
 800cbdc:	4638      	mov	r0, r7
 800cbde:	f7ff fded 	bl	800c7bc <_Balloc>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	4680      	mov	r8, r0
 800cbe6:	f100 0114 	add.w	r1, r0, #20
 800cbea:	461a      	mov	r2, r3
 800cbec:	4553      	cmp	r3, sl
 800cbee:	db2b      	blt.n	800cc48 <__lshift+0x8c>
 800cbf0:	6920      	ldr	r0, [r4, #16]
 800cbf2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbf6:	f104 0314 	add.w	r3, r4, #20
 800cbfa:	f016 021f 	ands.w	r2, r6, #31
 800cbfe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc02:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc06:	d025      	beq.n	800cc54 <__lshift+0x98>
 800cc08:	f1c2 0e20 	rsb	lr, r2, #32
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	681e      	ldr	r6, [r3, #0]
 800cc10:	468a      	mov	sl, r1
 800cc12:	4096      	lsls	r6, r2
 800cc14:	4330      	orrs	r0, r6
 800cc16:	f84a 0b04 	str.w	r0, [sl], #4
 800cc1a:	f853 0b04 	ldr.w	r0, [r3], #4
 800cc1e:	459c      	cmp	ip, r3
 800cc20:	fa20 f00e 	lsr.w	r0, r0, lr
 800cc24:	d814      	bhi.n	800cc50 <__lshift+0x94>
 800cc26:	6048      	str	r0, [r1, #4]
 800cc28:	b108      	cbz	r0, 800cc2e <__lshift+0x72>
 800cc2a:	f109 0502 	add.w	r5, r9, #2
 800cc2e:	3d01      	subs	r5, #1
 800cc30:	4638      	mov	r0, r7
 800cc32:	f8c8 5010 	str.w	r5, [r8, #16]
 800cc36:	4621      	mov	r1, r4
 800cc38:	f7ff fdf4 	bl	800c824 <_Bfree>
 800cc3c:	4640      	mov	r0, r8
 800cc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc42:	3101      	adds	r1, #1
 800cc44:	005b      	lsls	r3, r3, #1
 800cc46:	e7c7      	b.n	800cbd8 <__lshift+0x1c>
 800cc48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	e7cd      	b.n	800cbec <__lshift+0x30>
 800cc50:	4651      	mov	r1, sl
 800cc52:	e7dc      	b.n	800cc0e <__lshift+0x52>
 800cc54:	3904      	subs	r1, #4
 800cc56:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc5a:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc5e:	459c      	cmp	ip, r3
 800cc60:	d8f9      	bhi.n	800cc56 <__lshift+0x9a>
 800cc62:	e7e4      	b.n	800cc2e <__lshift+0x72>

0800cc64 <__mcmp>:
 800cc64:	6903      	ldr	r3, [r0, #16]
 800cc66:	690a      	ldr	r2, [r1, #16]
 800cc68:	1a9b      	subs	r3, r3, r2
 800cc6a:	b530      	push	{r4, r5, lr}
 800cc6c:	d10c      	bne.n	800cc88 <__mcmp+0x24>
 800cc6e:	0092      	lsls	r2, r2, #2
 800cc70:	3014      	adds	r0, #20
 800cc72:	3114      	adds	r1, #20
 800cc74:	1884      	adds	r4, r0, r2
 800cc76:	4411      	add	r1, r2
 800cc78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cc7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cc80:	4295      	cmp	r5, r2
 800cc82:	d003      	beq.n	800cc8c <__mcmp+0x28>
 800cc84:	d305      	bcc.n	800cc92 <__mcmp+0x2e>
 800cc86:	2301      	movs	r3, #1
 800cc88:	4618      	mov	r0, r3
 800cc8a:	bd30      	pop	{r4, r5, pc}
 800cc8c:	42a0      	cmp	r0, r4
 800cc8e:	d3f3      	bcc.n	800cc78 <__mcmp+0x14>
 800cc90:	e7fa      	b.n	800cc88 <__mcmp+0x24>
 800cc92:	f04f 33ff 	mov.w	r3, #4294967295
 800cc96:	e7f7      	b.n	800cc88 <__mcmp+0x24>

0800cc98 <__mdiff>:
 800cc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc9c:	460d      	mov	r5, r1
 800cc9e:	4607      	mov	r7, r0
 800cca0:	4611      	mov	r1, r2
 800cca2:	4628      	mov	r0, r5
 800cca4:	4614      	mov	r4, r2
 800cca6:	f7ff ffdd 	bl	800cc64 <__mcmp>
 800ccaa:	1e06      	subs	r6, r0, #0
 800ccac:	d108      	bne.n	800ccc0 <__mdiff+0x28>
 800ccae:	4631      	mov	r1, r6
 800ccb0:	4638      	mov	r0, r7
 800ccb2:	f7ff fd83 	bl	800c7bc <_Balloc>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ccbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccc0:	bfa4      	itt	ge
 800ccc2:	4623      	movge	r3, r4
 800ccc4:	462c      	movge	r4, r5
 800ccc6:	4638      	mov	r0, r7
 800ccc8:	6861      	ldr	r1, [r4, #4]
 800ccca:	bfa6      	itte	ge
 800cccc:	461d      	movge	r5, r3
 800ccce:	2600      	movge	r6, #0
 800ccd0:	2601      	movlt	r6, #1
 800ccd2:	f7ff fd73 	bl	800c7bc <_Balloc>
 800ccd6:	692b      	ldr	r3, [r5, #16]
 800ccd8:	60c6      	str	r6, [r0, #12]
 800ccda:	6926      	ldr	r6, [r4, #16]
 800ccdc:	f105 0914 	add.w	r9, r5, #20
 800cce0:	f104 0214 	add.w	r2, r4, #20
 800cce4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cce8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ccec:	f100 0514 	add.w	r5, r0, #20
 800ccf0:	f04f 0e00 	mov.w	lr, #0
 800ccf4:	f852 ab04 	ldr.w	sl, [r2], #4
 800ccf8:	f859 4b04 	ldr.w	r4, [r9], #4
 800ccfc:	fa1e f18a 	uxtah	r1, lr, sl
 800cd00:	b2a3      	uxth	r3, r4
 800cd02:	1ac9      	subs	r1, r1, r3
 800cd04:	0c23      	lsrs	r3, r4, #16
 800cd06:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800cd0a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cd0e:	b289      	uxth	r1, r1
 800cd10:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cd14:	45c8      	cmp	r8, r9
 800cd16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cd1a:	4694      	mov	ip, r2
 800cd1c:	f845 3b04 	str.w	r3, [r5], #4
 800cd20:	d8e8      	bhi.n	800ccf4 <__mdiff+0x5c>
 800cd22:	45bc      	cmp	ip, r7
 800cd24:	d304      	bcc.n	800cd30 <__mdiff+0x98>
 800cd26:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cd2a:	b183      	cbz	r3, 800cd4e <__mdiff+0xb6>
 800cd2c:	6106      	str	r6, [r0, #16]
 800cd2e:	e7c5      	b.n	800ccbc <__mdiff+0x24>
 800cd30:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cd34:	fa1e f381 	uxtah	r3, lr, r1
 800cd38:	141a      	asrs	r2, r3, #16
 800cd3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd44:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cd48:	f845 3b04 	str.w	r3, [r5], #4
 800cd4c:	e7e9      	b.n	800cd22 <__mdiff+0x8a>
 800cd4e:	3e01      	subs	r6, #1
 800cd50:	e7e9      	b.n	800cd26 <__mdiff+0x8e>
	...

0800cd54 <__ulp>:
 800cd54:	4b12      	ldr	r3, [pc, #72]	; (800cda0 <__ulp+0x4c>)
 800cd56:	ee10 2a90 	vmov	r2, s1
 800cd5a:	401a      	ands	r2, r3
 800cd5c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	dd04      	ble.n	800cd6e <__ulp+0x1a>
 800cd64:	2000      	movs	r0, #0
 800cd66:	4619      	mov	r1, r3
 800cd68:	ec41 0b10 	vmov	d0, r0, r1
 800cd6c:	4770      	bx	lr
 800cd6e:	425b      	negs	r3, r3
 800cd70:	151b      	asrs	r3, r3, #20
 800cd72:	2b13      	cmp	r3, #19
 800cd74:	f04f 0000 	mov.w	r0, #0
 800cd78:	f04f 0100 	mov.w	r1, #0
 800cd7c:	dc04      	bgt.n	800cd88 <__ulp+0x34>
 800cd7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800cd82:	fa42 f103 	asr.w	r1, r2, r3
 800cd86:	e7ef      	b.n	800cd68 <__ulp+0x14>
 800cd88:	3b14      	subs	r3, #20
 800cd8a:	2b1e      	cmp	r3, #30
 800cd8c:	f04f 0201 	mov.w	r2, #1
 800cd90:	bfda      	itte	le
 800cd92:	f1c3 031f 	rsble	r3, r3, #31
 800cd96:	fa02 f303 	lslle.w	r3, r2, r3
 800cd9a:	4613      	movgt	r3, r2
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	e7e3      	b.n	800cd68 <__ulp+0x14>
 800cda0:	7ff00000 	.word	0x7ff00000

0800cda4 <__b2d>:
 800cda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cda6:	6905      	ldr	r5, [r0, #16]
 800cda8:	f100 0714 	add.w	r7, r0, #20
 800cdac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cdb0:	1f2e      	subs	r6, r5, #4
 800cdb2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	f7ff fdc4 	bl	800c944 <__hi0bits>
 800cdbc:	f1c0 0320 	rsb	r3, r0, #32
 800cdc0:	280a      	cmp	r0, #10
 800cdc2:	600b      	str	r3, [r1, #0]
 800cdc4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800ce3c <__b2d+0x98>
 800cdc8:	dc14      	bgt.n	800cdf4 <__b2d+0x50>
 800cdca:	f1c0 0e0b 	rsb	lr, r0, #11
 800cdce:	fa24 f10e 	lsr.w	r1, r4, lr
 800cdd2:	42b7      	cmp	r7, r6
 800cdd4:	ea41 030c 	orr.w	r3, r1, ip
 800cdd8:	bf34      	ite	cc
 800cdda:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cdde:	2100      	movcs	r1, #0
 800cde0:	3015      	adds	r0, #21
 800cde2:	fa04 f000 	lsl.w	r0, r4, r0
 800cde6:	fa21 f10e 	lsr.w	r1, r1, lr
 800cdea:	ea40 0201 	orr.w	r2, r0, r1
 800cdee:	ec43 2b10 	vmov	d0, r2, r3
 800cdf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdf4:	42b7      	cmp	r7, r6
 800cdf6:	bf3a      	itte	cc
 800cdf8:	f1a5 0608 	subcc.w	r6, r5, #8
 800cdfc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ce00:	2100      	movcs	r1, #0
 800ce02:	380b      	subs	r0, #11
 800ce04:	d015      	beq.n	800ce32 <__b2d+0x8e>
 800ce06:	4084      	lsls	r4, r0
 800ce08:	f1c0 0520 	rsb	r5, r0, #32
 800ce0c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800ce10:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800ce14:	42be      	cmp	r6, r7
 800ce16:	fa21 fc05 	lsr.w	ip, r1, r5
 800ce1a:	ea44 030c 	orr.w	r3, r4, ip
 800ce1e:	bf8c      	ite	hi
 800ce20:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ce24:	2400      	movls	r4, #0
 800ce26:	fa01 f000 	lsl.w	r0, r1, r0
 800ce2a:	40ec      	lsrs	r4, r5
 800ce2c:	ea40 0204 	orr.w	r2, r0, r4
 800ce30:	e7dd      	b.n	800cdee <__b2d+0x4a>
 800ce32:	ea44 030c 	orr.w	r3, r4, ip
 800ce36:	460a      	mov	r2, r1
 800ce38:	e7d9      	b.n	800cdee <__b2d+0x4a>
 800ce3a:	bf00      	nop
 800ce3c:	3ff00000 	.word	0x3ff00000

0800ce40 <__d2b>:
 800ce40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce44:	460e      	mov	r6, r1
 800ce46:	2101      	movs	r1, #1
 800ce48:	ec59 8b10 	vmov	r8, r9, d0
 800ce4c:	4615      	mov	r5, r2
 800ce4e:	f7ff fcb5 	bl	800c7bc <_Balloc>
 800ce52:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ce56:	4607      	mov	r7, r0
 800ce58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce5c:	bb34      	cbnz	r4, 800ceac <__d2b+0x6c>
 800ce5e:	9301      	str	r3, [sp, #4]
 800ce60:	f1b8 0300 	subs.w	r3, r8, #0
 800ce64:	d027      	beq.n	800ceb6 <__d2b+0x76>
 800ce66:	a802      	add	r0, sp, #8
 800ce68:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ce6c:	f7ff fd89 	bl	800c982 <__lo0bits>
 800ce70:	9900      	ldr	r1, [sp, #0]
 800ce72:	b1f0      	cbz	r0, 800ceb2 <__d2b+0x72>
 800ce74:	9a01      	ldr	r2, [sp, #4]
 800ce76:	f1c0 0320 	rsb	r3, r0, #32
 800ce7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce7e:	430b      	orrs	r3, r1
 800ce80:	40c2      	lsrs	r2, r0
 800ce82:	617b      	str	r3, [r7, #20]
 800ce84:	9201      	str	r2, [sp, #4]
 800ce86:	9b01      	ldr	r3, [sp, #4]
 800ce88:	61bb      	str	r3, [r7, #24]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	bf14      	ite	ne
 800ce8e:	2102      	movne	r1, #2
 800ce90:	2101      	moveq	r1, #1
 800ce92:	6139      	str	r1, [r7, #16]
 800ce94:	b1c4      	cbz	r4, 800cec8 <__d2b+0x88>
 800ce96:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ce9a:	4404      	add	r4, r0
 800ce9c:	6034      	str	r4, [r6, #0]
 800ce9e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cea2:	6028      	str	r0, [r5, #0]
 800cea4:	4638      	mov	r0, r7
 800cea6:	b003      	add	sp, #12
 800cea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ceac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ceb0:	e7d5      	b.n	800ce5e <__d2b+0x1e>
 800ceb2:	6179      	str	r1, [r7, #20]
 800ceb4:	e7e7      	b.n	800ce86 <__d2b+0x46>
 800ceb6:	a801      	add	r0, sp, #4
 800ceb8:	f7ff fd63 	bl	800c982 <__lo0bits>
 800cebc:	9b01      	ldr	r3, [sp, #4]
 800cebe:	617b      	str	r3, [r7, #20]
 800cec0:	2101      	movs	r1, #1
 800cec2:	6139      	str	r1, [r7, #16]
 800cec4:	3020      	adds	r0, #32
 800cec6:	e7e5      	b.n	800ce94 <__d2b+0x54>
 800cec8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800cecc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ced0:	6030      	str	r0, [r6, #0]
 800ced2:	6918      	ldr	r0, [r3, #16]
 800ced4:	f7ff fd36 	bl	800c944 <__hi0bits>
 800ced8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cedc:	e7e1      	b.n	800cea2 <__d2b+0x62>

0800cede <__ratio>:
 800cede:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee2:	4688      	mov	r8, r1
 800cee4:	4669      	mov	r1, sp
 800cee6:	4681      	mov	r9, r0
 800cee8:	f7ff ff5c 	bl	800cda4 <__b2d>
 800ceec:	a901      	add	r1, sp, #4
 800ceee:	4640      	mov	r0, r8
 800cef0:	ec57 6b10 	vmov	r6, r7, d0
 800cef4:	f7ff ff56 	bl	800cda4 <__b2d>
 800cef8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cefc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cf00:	eba3 0c02 	sub.w	ip, r3, r2
 800cf04:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cf08:	1a9b      	subs	r3, r3, r2
 800cf0a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cf0e:	ec5b ab10 	vmov	sl, fp, d0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	bfce      	itee	gt
 800cf16:	463a      	movgt	r2, r7
 800cf18:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cf1c:	465a      	movle	r2, fp
 800cf1e:	4659      	mov	r1, fp
 800cf20:	463d      	mov	r5, r7
 800cf22:	bfd4      	ite	le
 800cf24:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800cf28:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800cf2c:	4630      	mov	r0, r6
 800cf2e:	ee10 2a10 	vmov	r2, s0
 800cf32:	460b      	mov	r3, r1
 800cf34:	4629      	mov	r1, r5
 800cf36:	f7f3 fca1 	bl	800087c <__aeabi_ddiv>
 800cf3a:	ec41 0b10 	vmov	d0, r0, r1
 800cf3e:	b003      	add	sp, #12
 800cf40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf44 <__copybits>:
 800cf44:	3901      	subs	r1, #1
 800cf46:	b510      	push	{r4, lr}
 800cf48:	1149      	asrs	r1, r1, #5
 800cf4a:	6914      	ldr	r4, [r2, #16]
 800cf4c:	3101      	adds	r1, #1
 800cf4e:	f102 0314 	add.w	r3, r2, #20
 800cf52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cf56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cf5a:	42a3      	cmp	r3, r4
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	d303      	bcc.n	800cf68 <__copybits+0x24>
 800cf60:	2300      	movs	r3, #0
 800cf62:	428a      	cmp	r2, r1
 800cf64:	d305      	bcc.n	800cf72 <__copybits+0x2e>
 800cf66:	bd10      	pop	{r4, pc}
 800cf68:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf6c:	f840 2b04 	str.w	r2, [r0], #4
 800cf70:	e7f3      	b.n	800cf5a <__copybits+0x16>
 800cf72:	f842 3b04 	str.w	r3, [r2], #4
 800cf76:	e7f4      	b.n	800cf62 <__copybits+0x1e>

0800cf78 <__any_on>:
 800cf78:	f100 0214 	add.w	r2, r0, #20
 800cf7c:	6900      	ldr	r0, [r0, #16]
 800cf7e:	114b      	asrs	r3, r1, #5
 800cf80:	4298      	cmp	r0, r3
 800cf82:	b510      	push	{r4, lr}
 800cf84:	db11      	blt.n	800cfaa <__any_on+0x32>
 800cf86:	dd0a      	ble.n	800cf9e <__any_on+0x26>
 800cf88:	f011 011f 	ands.w	r1, r1, #31
 800cf8c:	d007      	beq.n	800cf9e <__any_on+0x26>
 800cf8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cf92:	fa24 f001 	lsr.w	r0, r4, r1
 800cf96:	fa00 f101 	lsl.w	r1, r0, r1
 800cf9a:	428c      	cmp	r4, r1
 800cf9c:	d10b      	bne.n	800cfb6 <__any_on+0x3e>
 800cf9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d803      	bhi.n	800cfae <__any_on+0x36>
 800cfa6:	2000      	movs	r0, #0
 800cfa8:	bd10      	pop	{r4, pc}
 800cfaa:	4603      	mov	r3, r0
 800cfac:	e7f7      	b.n	800cf9e <__any_on+0x26>
 800cfae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cfb2:	2900      	cmp	r1, #0
 800cfb4:	d0f5      	beq.n	800cfa2 <__any_on+0x2a>
 800cfb6:	2001      	movs	r0, #1
 800cfb8:	e7f6      	b.n	800cfa8 <__any_on+0x30>

0800cfba <_calloc_r>:
 800cfba:	b538      	push	{r3, r4, r5, lr}
 800cfbc:	fb02 f401 	mul.w	r4, r2, r1
 800cfc0:	4621      	mov	r1, r4
 800cfc2:	f000 f857 	bl	800d074 <_malloc_r>
 800cfc6:	4605      	mov	r5, r0
 800cfc8:	b118      	cbz	r0, 800cfd2 <_calloc_r+0x18>
 800cfca:	4622      	mov	r2, r4
 800cfcc:	2100      	movs	r1, #0
 800cfce:	f7fc f9a2 	bl	8009316 <memset>
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800cfd8 <_free_r>:
 800cfd8:	b538      	push	{r3, r4, r5, lr}
 800cfda:	4605      	mov	r5, r0
 800cfdc:	2900      	cmp	r1, #0
 800cfde:	d045      	beq.n	800d06c <_free_r+0x94>
 800cfe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfe4:	1f0c      	subs	r4, r1, #4
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	bfb8      	it	lt
 800cfea:	18e4      	addlt	r4, r4, r3
 800cfec:	f000 fc0f 	bl	800d80e <__malloc_lock>
 800cff0:	4a1f      	ldr	r2, [pc, #124]	; (800d070 <_free_r+0x98>)
 800cff2:	6813      	ldr	r3, [r2, #0]
 800cff4:	4610      	mov	r0, r2
 800cff6:	b933      	cbnz	r3, 800d006 <_free_r+0x2e>
 800cff8:	6063      	str	r3, [r4, #4]
 800cffa:	6014      	str	r4, [r2, #0]
 800cffc:	4628      	mov	r0, r5
 800cffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d002:	f000 bc05 	b.w	800d810 <__malloc_unlock>
 800d006:	42a3      	cmp	r3, r4
 800d008:	d90c      	bls.n	800d024 <_free_r+0x4c>
 800d00a:	6821      	ldr	r1, [r4, #0]
 800d00c:	1862      	adds	r2, r4, r1
 800d00e:	4293      	cmp	r3, r2
 800d010:	bf04      	itt	eq
 800d012:	681a      	ldreq	r2, [r3, #0]
 800d014:	685b      	ldreq	r3, [r3, #4]
 800d016:	6063      	str	r3, [r4, #4]
 800d018:	bf04      	itt	eq
 800d01a:	1852      	addeq	r2, r2, r1
 800d01c:	6022      	streq	r2, [r4, #0]
 800d01e:	6004      	str	r4, [r0, #0]
 800d020:	e7ec      	b.n	800cffc <_free_r+0x24>
 800d022:	4613      	mov	r3, r2
 800d024:	685a      	ldr	r2, [r3, #4]
 800d026:	b10a      	cbz	r2, 800d02c <_free_r+0x54>
 800d028:	42a2      	cmp	r2, r4
 800d02a:	d9fa      	bls.n	800d022 <_free_r+0x4a>
 800d02c:	6819      	ldr	r1, [r3, #0]
 800d02e:	1858      	adds	r0, r3, r1
 800d030:	42a0      	cmp	r0, r4
 800d032:	d10b      	bne.n	800d04c <_free_r+0x74>
 800d034:	6820      	ldr	r0, [r4, #0]
 800d036:	4401      	add	r1, r0
 800d038:	1858      	adds	r0, r3, r1
 800d03a:	4282      	cmp	r2, r0
 800d03c:	6019      	str	r1, [r3, #0]
 800d03e:	d1dd      	bne.n	800cffc <_free_r+0x24>
 800d040:	6810      	ldr	r0, [r2, #0]
 800d042:	6852      	ldr	r2, [r2, #4]
 800d044:	605a      	str	r2, [r3, #4]
 800d046:	4401      	add	r1, r0
 800d048:	6019      	str	r1, [r3, #0]
 800d04a:	e7d7      	b.n	800cffc <_free_r+0x24>
 800d04c:	d902      	bls.n	800d054 <_free_r+0x7c>
 800d04e:	230c      	movs	r3, #12
 800d050:	602b      	str	r3, [r5, #0]
 800d052:	e7d3      	b.n	800cffc <_free_r+0x24>
 800d054:	6820      	ldr	r0, [r4, #0]
 800d056:	1821      	adds	r1, r4, r0
 800d058:	428a      	cmp	r2, r1
 800d05a:	bf04      	itt	eq
 800d05c:	6811      	ldreq	r1, [r2, #0]
 800d05e:	6852      	ldreq	r2, [r2, #4]
 800d060:	6062      	str	r2, [r4, #4]
 800d062:	bf04      	itt	eq
 800d064:	1809      	addeq	r1, r1, r0
 800d066:	6021      	streq	r1, [r4, #0]
 800d068:	605c      	str	r4, [r3, #4]
 800d06a:	e7c7      	b.n	800cffc <_free_r+0x24>
 800d06c:	bd38      	pop	{r3, r4, r5, pc}
 800d06e:	bf00      	nop
 800d070:	20000224 	.word	0x20000224

0800d074 <_malloc_r>:
 800d074:	b570      	push	{r4, r5, r6, lr}
 800d076:	1ccd      	adds	r5, r1, #3
 800d078:	f025 0503 	bic.w	r5, r5, #3
 800d07c:	3508      	adds	r5, #8
 800d07e:	2d0c      	cmp	r5, #12
 800d080:	bf38      	it	cc
 800d082:	250c      	movcc	r5, #12
 800d084:	2d00      	cmp	r5, #0
 800d086:	4606      	mov	r6, r0
 800d088:	db01      	blt.n	800d08e <_malloc_r+0x1a>
 800d08a:	42a9      	cmp	r1, r5
 800d08c:	d903      	bls.n	800d096 <_malloc_r+0x22>
 800d08e:	230c      	movs	r3, #12
 800d090:	6033      	str	r3, [r6, #0]
 800d092:	2000      	movs	r0, #0
 800d094:	bd70      	pop	{r4, r5, r6, pc}
 800d096:	f000 fbba 	bl	800d80e <__malloc_lock>
 800d09a:	4a21      	ldr	r2, [pc, #132]	; (800d120 <_malloc_r+0xac>)
 800d09c:	6814      	ldr	r4, [r2, #0]
 800d09e:	4621      	mov	r1, r4
 800d0a0:	b991      	cbnz	r1, 800d0c8 <_malloc_r+0x54>
 800d0a2:	4c20      	ldr	r4, [pc, #128]	; (800d124 <_malloc_r+0xb0>)
 800d0a4:	6823      	ldr	r3, [r4, #0]
 800d0a6:	b91b      	cbnz	r3, 800d0b0 <_malloc_r+0x3c>
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	f000 facf 	bl	800d64c <_sbrk_r>
 800d0ae:	6020      	str	r0, [r4, #0]
 800d0b0:	4629      	mov	r1, r5
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	f000 faca 	bl	800d64c <_sbrk_r>
 800d0b8:	1c43      	adds	r3, r0, #1
 800d0ba:	d124      	bne.n	800d106 <_malloc_r+0x92>
 800d0bc:	230c      	movs	r3, #12
 800d0be:	6033      	str	r3, [r6, #0]
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	f000 fba5 	bl	800d810 <__malloc_unlock>
 800d0c6:	e7e4      	b.n	800d092 <_malloc_r+0x1e>
 800d0c8:	680b      	ldr	r3, [r1, #0]
 800d0ca:	1b5b      	subs	r3, r3, r5
 800d0cc:	d418      	bmi.n	800d100 <_malloc_r+0x8c>
 800d0ce:	2b0b      	cmp	r3, #11
 800d0d0:	d90f      	bls.n	800d0f2 <_malloc_r+0x7e>
 800d0d2:	600b      	str	r3, [r1, #0]
 800d0d4:	50cd      	str	r5, [r1, r3]
 800d0d6:	18cc      	adds	r4, r1, r3
 800d0d8:	4630      	mov	r0, r6
 800d0da:	f000 fb99 	bl	800d810 <__malloc_unlock>
 800d0de:	f104 000b 	add.w	r0, r4, #11
 800d0e2:	1d23      	adds	r3, r4, #4
 800d0e4:	f020 0007 	bic.w	r0, r0, #7
 800d0e8:	1ac3      	subs	r3, r0, r3
 800d0ea:	d0d3      	beq.n	800d094 <_malloc_r+0x20>
 800d0ec:	425a      	negs	r2, r3
 800d0ee:	50e2      	str	r2, [r4, r3]
 800d0f0:	e7d0      	b.n	800d094 <_malloc_r+0x20>
 800d0f2:	428c      	cmp	r4, r1
 800d0f4:	684b      	ldr	r3, [r1, #4]
 800d0f6:	bf16      	itet	ne
 800d0f8:	6063      	strne	r3, [r4, #4]
 800d0fa:	6013      	streq	r3, [r2, #0]
 800d0fc:	460c      	movne	r4, r1
 800d0fe:	e7eb      	b.n	800d0d8 <_malloc_r+0x64>
 800d100:	460c      	mov	r4, r1
 800d102:	6849      	ldr	r1, [r1, #4]
 800d104:	e7cc      	b.n	800d0a0 <_malloc_r+0x2c>
 800d106:	1cc4      	adds	r4, r0, #3
 800d108:	f024 0403 	bic.w	r4, r4, #3
 800d10c:	42a0      	cmp	r0, r4
 800d10e:	d005      	beq.n	800d11c <_malloc_r+0xa8>
 800d110:	1a21      	subs	r1, r4, r0
 800d112:	4630      	mov	r0, r6
 800d114:	f000 fa9a 	bl	800d64c <_sbrk_r>
 800d118:	3001      	adds	r0, #1
 800d11a:	d0cf      	beq.n	800d0bc <_malloc_r+0x48>
 800d11c:	6025      	str	r5, [r4, #0]
 800d11e:	e7db      	b.n	800d0d8 <_malloc_r+0x64>
 800d120:	20000224 	.word	0x20000224
 800d124:	20000228 	.word	0x20000228

0800d128 <__ssputs_r>:
 800d128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d12c:	688e      	ldr	r6, [r1, #8]
 800d12e:	429e      	cmp	r6, r3
 800d130:	4682      	mov	sl, r0
 800d132:	460c      	mov	r4, r1
 800d134:	4690      	mov	r8, r2
 800d136:	4699      	mov	r9, r3
 800d138:	d837      	bhi.n	800d1aa <__ssputs_r+0x82>
 800d13a:	898a      	ldrh	r2, [r1, #12]
 800d13c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d140:	d031      	beq.n	800d1a6 <__ssputs_r+0x7e>
 800d142:	6825      	ldr	r5, [r4, #0]
 800d144:	6909      	ldr	r1, [r1, #16]
 800d146:	1a6f      	subs	r7, r5, r1
 800d148:	6965      	ldr	r5, [r4, #20]
 800d14a:	2302      	movs	r3, #2
 800d14c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d150:	fb95 f5f3 	sdiv	r5, r5, r3
 800d154:	f109 0301 	add.w	r3, r9, #1
 800d158:	443b      	add	r3, r7
 800d15a:	429d      	cmp	r5, r3
 800d15c:	bf38      	it	cc
 800d15e:	461d      	movcc	r5, r3
 800d160:	0553      	lsls	r3, r2, #21
 800d162:	d530      	bpl.n	800d1c6 <__ssputs_r+0x9e>
 800d164:	4629      	mov	r1, r5
 800d166:	f7ff ff85 	bl	800d074 <_malloc_r>
 800d16a:	4606      	mov	r6, r0
 800d16c:	b950      	cbnz	r0, 800d184 <__ssputs_r+0x5c>
 800d16e:	230c      	movs	r3, #12
 800d170:	f8ca 3000 	str.w	r3, [sl]
 800d174:	89a3      	ldrh	r3, [r4, #12]
 800d176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d17a:	81a3      	strh	r3, [r4, #12]
 800d17c:	f04f 30ff 	mov.w	r0, #4294967295
 800d180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d184:	463a      	mov	r2, r7
 800d186:	6921      	ldr	r1, [r4, #16]
 800d188:	f7fc f8ba 	bl	8009300 <memcpy>
 800d18c:	89a3      	ldrh	r3, [r4, #12]
 800d18e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d196:	81a3      	strh	r3, [r4, #12]
 800d198:	6126      	str	r6, [r4, #16]
 800d19a:	6165      	str	r5, [r4, #20]
 800d19c:	443e      	add	r6, r7
 800d19e:	1bed      	subs	r5, r5, r7
 800d1a0:	6026      	str	r6, [r4, #0]
 800d1a2:	60a5      	str	r5, [r4, #8]
 800d1a4:	464e      	mov	r6, r9
 800d1a6:	454e      	cmp	r6, r9
 800d1a8:	d900      	bls.n	800d1ac <__ssputs_r+0x84>
 800d1aa:	464e      	mov	r6, r9
 800d1ac:	4632      	mov	r2, r6
 800d1ae:	4641      	mov	r1, r8
 800d1b0:	6820      	ldr	r0, [r4, #0]
 800d1b2:	f000 fb13 	bl	800d7dc <memmove>
 800d1b6:	68a3      	ldr	r3, [r4, #8]
 800d1b8:	1b9b      	subs	r3, r3, r6
 800d1ba:	60a3      	str	r3, [r4, #8]
 800d1bc:	6823      	ldr	r3, [r4, #0]
 800d1be:	441e      	add	r6, r3
 800d1c0:	6026      	str	r6, [r4, #0]
 800d1c2:	2000      	movs	r0, #0
 800d1c4:	e7dc      	b.n	800d180 <__ssputs_r+0x58>
 800d1c6:	462a      	mov	r2, r5
 800d1c8:	f000 fb23 	bl	800d812 <_realloc_r>
 800d1cc:	4606      	mov	r6, r0
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	d1e2      	bne.n	800d198 <__ssputs_r+0x70>
 800d1d2:	6921      	ldr	r1, [r4, #16]
 800d1d4:	4650      	mov	r0, sl
 800d1d6:	f7ff feff 	bl	800cfd8 <_free_r>
 800d1da:	e7c8      	b.n	800d16e <__ssputs_r+0x46>

0800d1dc <_svfiprintf_r>:
 800d1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e0:	461d      	mov	r5, r3
 800d1e2:	898b      	ldrh	r3, [r1, #12]
 800d1e4:	061f      	lsls	r7, r3, #24
 800d1e6:	b09d      	sub	sp, #116	; 0x74
 800d1e8:	4680      	mov	r8, r0
 800d1ea:	460c      	mov	r4, r1
 800d1ec:	4616      	mov	r6, r2
 800d1ee:	d50f      	bpl.n	800d210 <_svfiprintf_r+0x34>
 800d1f0:	690b      	ldr	r3, [r1, #16]
 800d1f2:	b96b      	cbnz	r3, 800d210 <_svfiprintf_r+0x34>
 800d1f4:	2140      	movs	r1, #64	; 0x40
 800d1f6:	f7ff ff3d 	bl	800d074 <_malloc_r>
 800d1fa:	6020      	str	r0, [r4, #0]
 800d1fc:	6120      	str	r0, [r4, #16]
 800d1fe:	b928      	cbnz	r0, 800d20c <_svfiprintf_r+0x30>
 800d200:	230c      	movs	r3, #12
 800d202:	f8c8 3000 	str.w	r3, [r8]
 800d206:	f04f 30ff 	mov.w	r0, #4294967295
 800d20a:	e0c8      	b.n	800d39e <_svfiprintf_r+0x1c2>
 800d20c:	2340      	movs	r3, #64	; 0x40
 800d20e:	6163      	str	r3, [r4, #20]
 800d210:	2300      	movs	r3, #0
 800d212:	9309      	str	r3, [sp, #36]	; 0x24
 800d214:	2320      	movs	r3, #32
 800d216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d21a:	2330      	movs	r3, #48	; 0x30
 800d21c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d220:	9503      	str	r5, [sp, #12]
 800d222:	f04f 0b01 	mov.w	fp, #1
 800d226:	4637      	mov	r7, r6
 800d228:	463d      	mov	r5, r7
 800d22a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d22e:	b10b      	cbz	r3, 800d234 <_svfiprintf_r+0x58>
 800d230:	2b25      	cmp	r3, #37	; 0x25
 800d232:	d13e      	bne.n	800d2b2 <_svfiprintf_r+0xd6>
 800d234:	ebb7 0a06 	subs.w	sl, r7, r6
 800d238:	d00b      	beq.n	800d252 <_svfiprintf_r+0x76>
 800d23a:	4653      	mov	r3, sl
 800d23c:	4632      	mov	r2, r6
 800d23e:	4621      	mov	r1, r4
 800d240:	4640      	mov	r0, r8
 800d242:	f7ff ff71 	bl	800d128 <__ssputs_r>
 800d246:	3001      	adds	r0, #1
 800d248:	f000 80a4 	beq.w	800d394 <_svfiprintf_r+0x1b8>
 800d24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d24e:	4453      	add	r3, sl
 800d250:	9309      	str	r3, [sp, #36]	; 0x24
 800d252:	783b      	ldrb	r3, [r7, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	f000 809d 	beq.w	800d394 <_svfiprintf_r+0x1b8>
 800d25a:	2300      	movs	r3, #0
 800d25c:	f04f 32ff 	mov.w	r2, #4294967295
 800d260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d264:	9304      	str	r3, [sp, #16]
 800d266:	9307      	str	r3, [sp, #28]
 800d268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d26c:	931a      	str	r3, [sp, #104]	; 0x68
 800d26e:	462f      	mov	r7, r5
 800d270:	2205      	movs	r2, #5
 800d272:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d276:	4850      	ldr	r0, [pc, #320]	; (800d3b8 <_svfiprintf_r+0x1dc>)
 800d278:	f7f2 ffca 	bl	8000210 <memchr>
 800d27c:	9b04      	ldr	r3, [sp, #16]
 800d27e:	b9d0      	cbnz	r0, 800d2b6 <_svfiprintf_r+0xda>
 800d280:	06d9      	lsls	r1, r3, #27
 800d282:	bf44      	itt	mi
 800d284:	2220      	movmi	r2, #32
 800d286:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d28a:	071a      	lsls	r2, r3, #28
 800d28c:	bf44      	itt	mi
 800d28e:	222b      	movmi	r2, #43	; 0x2b
 800d290:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d294:	782a      	ldrb	r2, [r5, #0]
 800d296:	2a2a      	cmp	r2, #42	; 0x2a
 800d298:	d015      	beq.n	800d2c6 <_svfiprintf_r+0xea>
 800d29a:	9a07      	ldr	r2, [sp, #28]
 800d29c:	462f      	mov	r7, r5
 800d29e:	2000      	movs	r0, #0
 800d2a0:	250a      	movs	r5, #10
 800d2a2:	4639      	mov	r1, r7
 800d2a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2a8:	3b30      	subs	r3, #48	; 0x30
 800d2aa:	2b09      	cmp	r3, #9
 800d2ac:	d94d      	bls.n	800d34a <_svfiprintf_r+0x16e>
 800d2ae:	b1b8      	cbz	r0, 800d2e0 <_svfiprintf_r+0x104>
 800d2b0:	e00f      	b.n	800d2d2 <_svfiprintf_r+0xf6>
 800d2b2:	462f      	mov	r7, r5
 800d2b4:	e7b8      	b.n	800d228 <_svfiprintf_r+0x4c>
 800d2b6:	4a40      	ldr	r2, [pc, #256]	; (800d3b8 <_svfiprintf_r+0x1dc>)
 800d2b8:	1a80      	subs	r0, r0, r2
 800d2ba:	fa0b f000 	lsl.w	r0, fp, r0
 800d2be:	4318      	orrs	r0, r3
 800d2c0:	9004      	str	r0, [sp, #16]
 800d2c2:	463d      	mov	r5, r7
 800d2c4:	e7d3      	b.n	800d26e <_svfiprintf_r+0x92>
 800d2c6:	9a03      	ldr	r2, [sp, #12]
 800d2c8:	1d11      	adds	r1, r2, #4
 800d2ca:	6812      	ldr	r2, [r2, #0]
 800d2cc:	9103      	str	r1, [sp, #12]
 800d2ce:	2a00      	cmp	r2, #0
 800d2d0:	db01      	blt.n	800d2d6 <_svfiprintf_r+0xfa>
 800d2d2:	9207      	str	r2, [sp, #28]
 800d2d4:	e004      	b.n	800d2e0 <_svfiprintf_r+0x104>
 800d2d6:	4252      	negs	r2, r2
 800d2d8:	f043 0302 	orr.w	r3, r3, #2
 800d2dc:	9207      	str	r2, [sp, #28]
 800d2de:	9304      	str	r3, [sp, #16]
 800d2e0:	783b      	ldrb	r3, [r7, #0]
 800d2e2:	2b2e      	cmp	r3, #46	; 0x2e
 800d2e4:	d10c      	bne.n	800d300 <_svfiprintf_r+0x124>
 800d2e6:	787b      	ldrb	r3, [r7, #1]
 800d2e8:	2b2a      	cmp	r3, #42	; 0x2a
 800d2ea:	d133      	bne.n	800d354 <_svfiprintf_r+0x178>
 800d2ec:	9b03      	ldr	r3, [sp, #12]
 800d2ee:	1d1a      	adds	r2, r3, #4
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	9203      	str	r2, [sp, #12]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	bfb8      	it	lt
 800d2f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2fc:	3702      	adds	r7, #2
 800d2fe:	9305      	str	r3, [sp, #20]
 800d300:	4d2e      	ldr	r5, [pc, #184]	; (800d3bc <_svfiprintf_r+0x1e0>)
 800d302:	7839      	ldrb	r1, [r7, #0]
 800d304:	2203      	movs	r2, #3
 800d306:	4628      	mov	r0, r5
 800d308:	f7f2 ff82 	bl	8000210 <memchr>
 800d30c:	b138      	cbz	r0, 800d31e <_svfiprintf_r+0x142>
 800d30e:	2340      	movs	r3, #64	; 0x40
 800d310:	1b40      	subs	r0, r0, r5
 800d312:	fa03 f000 	lsl.w	r0, r3, r0
 800d316:	9b04      	ldr	r3, [sp, #16]
 800d318:	4303      	orrs	r3, r0
 800d31a:	3701      	adds	r7, #1
 800d31c:	9304      	str	r3, [sp, #16]
 800d31e:	7839      	ldrb	r1, [r7, #0]
 800d320:	4827      	ldr	r0, [pc, #156]	; (800d3c0 <_svfiprintf_r+0x1e4>)
 800d322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d326:	2206      	movs	r2, #6
 800d328:	1c7e      	adds	r6, r7, #1
 800d32a:	f7f2 ff71 	bl	8000210 <memchr>
 800d32e:	2800      	cmp	r0, #0
 800d330:	d038      	beq.n	800d3a4 <_svfiprintf_r+0x1c8>
 800d332:	4b24      	ldr	r3, [pc, #144]	; (800d3c4 <_svfiprintf_r+0x1e8>)
 800d334:	bb13      	cbnz	r3, 800d37c <_svfiprintf_r+0x1a0>
 800d336:	9b03      	ldr	r3, [sp, #12]
 800d338:	3307      	adds	r3, #7
 800d33a:	f023 0307 	bic.w	r3, r3, #7
 800d33e:	3308      	adds	r3, #8
 800d340:	9303      	str	r3, [sp, #12]
 800d342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d344:	444b      	add	r3, r9
 800d346:	9309      	str	r3, [sp, #36]	; 0x24
 800d348:	e76d      	b.n	800d226 <_svfiprintf_r+0x4a>
 800d34a:	fb05 3202 	mla	r2, r5, r2, r3
 800d34e:	2001      	movs	r0, #1
 800d350:	460f      	mov	r7, r1
 800d352:	e7a6      	b.n	800d2a2 <_svfiprintf_r+0xc6>
 800d354:	2300      	movs	r3, #0
 800d356:	3701      	adds	r7, #1
 800d358:	9305      	str	r3, [sp, #20]
 800d35a:	4619      	mov	r1, r3
 800d35c:	250a      	movs	r5, #10
 800d35e:	4638      	mov	r0, r7
 800d360:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d364:	3a30      	subs	r2, #48	; 0x30
 800d366:	2a09      	cmp	r2, #9
 800d368:	d903      	bls.n	800d372 <_svfiprintf_r+0x196>
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d0c8      	beq.n	800d300 <_svfiprintf_r+0x124>
 800d36e:	9105      	str	r1, [sp, #20]
 800d370:	e7c6      	b.n	800d300 <_svfiprintf_r+0x124>
 800d372:	fb05 2101 	mla	r1, r5, r1, r2
 800d376:	2301      	movs	r3, #1
 800d378:	4607      	mov	r7, r0
 800d37a:	e7f0      	b.n	800d35e <_svfiprintf_r+0x182>
 800d37c:	ab03      	add	r3, sp, #12
 800d37e:	9300      	str	r3, [sp, #0]
 800d380:	4622      	mov	r2, r4
 800d382:	4b11      	ldr	r3, [pc, #68]	; (800d3c8 <_svfiprintf_r+0x1ec>)
 800d384:	a904      	add	r1, sp, #16
 800d386:	4640      	mov	r0, r8
 800d388:	f7fc f862 	bl	8009450 <_printf_float>
 800d38c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d390:	4681      	mov	r9, r0
 800d392:	d1d6      	bne.n	800d342 <_svfiprintf_r+0x166>
 800d394:	89a3      	ldrh	r3, [r4, #12]
 800d396:	065b      	lsls	r3, r3, #25
 800d398:	f53f af35 	bmi.w	800d206 <_svfiprintf_r+0x2a>
 800d39c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d39e:	b01d      	add	sp, #116	; 0x74
 800d3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a4:	ab03      	add	r3, sp, #12
 800d3a6:	9300      	str	r3, [sp, #0]
 800d3a8:	4622      	mov	r2, r4
 800d3aa:	4b07      	ldr	r3, [pc, #28]	; (800d3c8 <_svfiprintf_r+0x1ec>)
 800d3ac:	a904      	add	r1, sp, #16
 800d3ae:	4640      	mov	r0, r8
 800d3b0:	f7fc fb04 	bl	80099bc <_printf_i>
 800d3b4:	e7ea      	b.n	800d38c <_svfiprintf_r+0x1b0>
 800d3b6:	bf00      	nop
 800d3b8:	0800ded4 	.word	0x0800ded4
 800d3bc:	0800deda 	.word	0x0800deda
 800d3c0:	0800dede 	.word	0x0800dede
 800d3c4:	08009451 	.word	0x08009451
 800d3c8:	0800d129 	.word	0x0800d129

0800d3cc <__sfputc_r>:
 800d3cc:	6893      	ldr	r3, [r2, #8]
 800d3ce:	3b01      	subs	r3, #1
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	b410      	push	{r4}
 800d3d4:	6093      	str	r3, [r2, #8]
 800d3d6:	da08      	bge.n	800d3ea <__sfputc_r+0x1e>
 800d3d8:	6994      	ldr	r4, [r2, #24]
 800d3da:	42a3      	cmp	r3, r4
 800d3dc:	db01      	blt.n	800d3e2 <__sfputc_r+0x16>
 800d3de:	290a      	cmp	r1, #10
 800d3e0:	d103      	bne.n	800d3ea <__sfputc_r+0x1e>
 800d3e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3e6:	f7fd bdb1 	b.w	800af4c <__swbuf_r>
 800d3ea:	6813      	ldr	r3, [r2, #0]
 800d3ec:	1c58      	adds	r0, r3, #1
 800d3ee:	6010      	str	r0, [r2, #0]
 800d3f0:	7019      	strb	r1, [r3, #0]
 800d3f2:	4608      	mov	r0, r1
 800d3f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3f8:	4770      	bx	lr

0800d3fa <__sfputs_r>:
 800d3fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3fc:	4606      	mov	r6, r0
 800d3fe:	460f      	mov	r7, r1
 800d400:	4614      	mov	r4, r2
 800d402:	18d5      	adds	r5, r2, r3
 800d404:	42ac      	cmp	r4, r5
 800d406:	d101      	bne.n	800d40c <__sfputs_r+0x12>
 800d408:	2000      	movs	r0, #0
 800d40a:	e007      	b.n	800d41c <__sfputs_r+0x22>
 800d40c:	463a      	mov	r2, r7
 800d40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d412:	4630      	mov	r0, r6
 800d414:	f7ff ffda 	bl	800d3cc <__sfputc_r>
 800d418:	1c43      	adds	r3, r0, #1
 800d41a:	d1f3      	bne.n	800d404 <__sfputs_r+0xa>
 800d41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d420 <_vfiprintf_r>:
 800d420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d424:	460c      	mov	r4, r1
 800d426:	b09d      	sub	sp, #116	; 0x74
 800d428:	4617      	mov	r7, r2
 800d42a:	461d      	mov	r5, r3
 800d42c:	4606      	mov	r6, r0
 800d42e:	b118      	cbz	r0, 800d438 <_vfiprintf_r+0x18>
 800d430:	6983      	ldr	r3, [r0, #24]
 800d432:	b90b      	cbnz	r3, 800d438 <_vfiprintf_r+0x18>
 800d434:	f7fe fd80 	bl	800bf38 <__sinit>
 800d438:	4b7c      	ldr	r3, [pc, #496]	; (800d62c <_vfiprintf_r+0x20c>)
 800d43a:	429c      	cmp	r4, r3
 800d43c:	d158      	bne.n	800d4f0 <_vfiprintf_r+0xd0>
 800d43e:	6874      	ldr	r4, [r6, #4]
 800d440:	89a3      	ldrh	r3, [r4, #12]
 800d442:	0718      	lsls	r0, r3, #28
 800d444:	d55e      	bpl.n	800d504 <_vfiprintf_r+0xe4>
 800d446:	6923      	ldr	r3, [r4, #16]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d05b      	beq.n	800d504 <_vfiprintf_r+0xe4>
 800d44c:	2300      	movs	r3, #0
 800d44e:	9309      	str	r3, [sp, #36]	; 0x24
 800d450:	2320      	movs	r3, #32
 800d452:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d456:	2330      	movs	r3, #48	; 0x30
 800d458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d45c:	9503      	str	r5, [sp, #12]
 800d45e:	f04f 0b01 	mov.w	fp, #1
 800d462:	46b8      	mov	r8, r7
 800d464:	4645      	mov	r5, r8
 800d466:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d46a:	b10b      	cbz	r3, 800d470 <_vfiprintf_r+0x50>
 800d46c:	2b25      	cmp	r3, #37	; 0x25
 800d46e:	d154      	bne.n	800d51a <_vfiprintf_r+0xfa>
 800d470:	ebb8 0a07 	subs.w	sl, r8, r7
 800d474:	d00b      	beq.n	800d48e <_vfiprintf_r+0x6e>
 800d476:	4653      	mov	r3, sl
 800d478:	463a      	mov	r2, r7
 800d47a:	4621      	mov	r1, r4
 800d47c:	4630      	mov	r0, r6
 800d47e:	f7ff ffbc 	bl	800d3fa <__sfputs_r>
 800d482:	3001      	adds	r0, #1
 800d484:	f000 80c2 	beq.w	800d60c <_vfiprintf_r+0x1ec>
 800d488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d48a:	4453      	add	r3, sl
 800d48c:	9309      	str	r3, [sp, #36]	; 0x24
 800d48e:	f898 3000 	ldrb.w	r3, [r8]
 800d492:	2b00      	cmp	r3, #0
 800d494:	f000 80ba 	beq.w	800d60c <_vfiprintf_r+0x1ec>
 800d498:	2300      	movs	r3, #0
 800d49a:	f04f 32ff 	mov.w	r2, #4294967295
 800d49e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4a2:	9304      	str	r3, [sp, #16]
 800d4a4:	9307      	str	r3, [sp, #28]
 800d4a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4aa:	931a      	str	r3, [sp, #104]	; 0x68
 800d4ac:	46a8      	mov	r8, r5
 800d4ae:	2205      	movs	r2, #5
 800d4b0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d4b4:	485e      	ldr	r0, [pc, #376]	; (800d630 <_vfiprintf_r+0x210>)
 800d4b6:	f7f2 feab 	bl	8000210 <memchr>
 800d4ba:	9b04      	ldr	r3, [sp, #16]
 800d4bc:	bb78      	cbnz	r0, 800d51e <_vfiprintf_r+0xfe>
 800d4be:	06d9      	lsls	r1, r3, #27
 800d4c0:	bf44      	itt	mi
 800d4c2:	2220      	movmi	r2, #32
 800d4c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d4c8:	071a      	lsls	r2, r3, #28
 800d4ca:	bf44      	itt	mi
 800d4cc:	222b      	movmi	r2, #43	; 0x2b
 800d4ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d4d2:	782a      	ldrb	r2, [r5, #0]
 800d4d4:	2a2a      	cmp	r2, #42	; 0x2a
 800d4d6:	d02a      	beq.n	800d52e <_vfiprintf_r+0x10e>
 800d4d8:	9a07      	ldr	r2, [sp, #28]
 800d4da:	46a8      	mov	r8, r5
 800d4dc:	2000      	movs	r0, #0
 800d4de:	250a      	movs	r5, #10
 800d4e0:	4641      	mov	r1, r8
 800d4e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4e6:	3b30      	subs	r3, #48	; 0x30
 800d4e8:	2b09      	cmp	r3, #9
 800d4ea:	d969      	bls.n	800d5c0 <_vfiprintf_r+0x1a0>
 800d4ec:	b360      	cbz	r0, 800d548 <_vfiprintf_r+0x128>
 800d4ee:	e024      	b.n	800d53a <_vfiprintf_r+0x11a>
 800d4f0:	4b50      	ldr	r3, [pc, #320]	; (800d634 <_vfiprintf_r+0x214>)
 800d4f2:	429c      	cmp	r4, r3
 800d4f4:	d101      	bne.n	800d4fa <_vfiprintf_r+0xda>
 800d4f6:	68b4      	ldr	r4, [r6, #8]
 800d4f8:	e7a2      	b.n	800d440 <_vfiprintf_r+0x20>
 800d4fa:	4b4f      	ldr	r3, [pc, #316]	; (800d638 <_vfiprintf_r+0x218>)
 800d4fc:	429c      	cmp	r4, r3
 800d4fe:	bf08      	it	eq
 800d500:	68f4      	ldreq	r4, [r6, #12]
 800d502:	e79d      	b.n	800d440 <_vfiprintf_r+0x20>
 800d504:	4621      	mov	r1, r4
 800d506:	4630      	mov	r0, r6
 800d508:	f7fd fd72 	bl	800aff0 <__swsetup_r>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d09d      	beq.n	800d44c <_vfiprintf_r+0x2c>
 800d510:	f04f 30ff 	mov.w	r0, #4294967295
 800d514:	b01d      	add	sp, #116	; 0x74
 800d516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d51a:	46a8      	mov	r8, r5
 800d51c:	e7a2      	b.n	800d464 <_vfiprintf_r+0x44>
 800d51e:	4a44      	ldr	r2, [pc, #272]	; (800d630 <_vfiprintf_r+0x210>)
 800d520:	1a80      	subs	r0, r0, r2
 800d522:	fa0b f000 	lsl.w	r0, fp, r0
 800d526:	4318      	orrs	r0, r3
 800d528:	9004      	str	r0, [sp, #16]
 800d52a:	4645      	mov	r5, r8
 800d52c:	e7be      	b.n	800d4ac <_vfiprintf_r+0x8c>
 800d52e:	9a03      	ldr	r2, [sp, #12]
 800d530:	1d11      	adds	r1, r2, #4
 800d532:	6812      	ldr	r2, [r2, #0]
 800d534:	9103      	str	r1, [sp, #12]
 800d536:	2a00      	cmp	r2, #0
 800d538:	db01      	blt.n	800d53e <_vfiprintf_r+0x11e>
 800d53a:	9207      	str	r2, [sp, #28]
 800d53c:	e004      	b.n	800d548 <_vfiprintf_r+0x128>
 800d53e:	4252      	negs	r2, r2
 800d540:	f043 0302 	orr.w	r3, r3, #2
 800d544:	9207      	str	r2, [sp, #28]
 800d546:	9304      	str	r3, [sp, #16]
 800d548:	f898 3000 	ldrb.w	r3, [r8]
 800d54c:	2b2e      	cmp	r3, #46	; 0x2e
 800d54e:	d10e      	bne.n	800d56e <_vfiprintf_r+0x14e>
 800d550:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d554:	2b2a      	cmp	r3, #42	; 0x2a
 800d556:	d138      	bne.n	800d5ca <_vfiprintf_r+0x1aa>
 800d558:	9b03      	ldr	r3, [sp, #12]
 800d55a:	1d1a      	adds	r2, r3, #4
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	9203      	str	r2, [sp, #12]
 800d560:	2b00      	cmp	r3, #0
 800d562:	bfb8      	it	lt
 800d564:	f04f 33ff 	movlt.w	r3, #4294967295
 800d568:	f108 0802 	add.w	r8, r8, #2
 800d56c:	9305      	str	r3, [sp, #20]
 800d56e:	4d33      	ldr	r5, [pc, #204]	; (800d63c <_vfiprintf_r+0x21c>)
 800d570:	f898 1000 	ldrb.w	r1, [r8]
 800d574:	2203      	movs	r2, #3
 800d576:	4628      	mov	r0, r5
 800d578:	f7f2 fe4a 	bl	8000210 <memchr>
 800d57c:	b140      	cbz	r0, 800d590 <_vfiprintf_r+0x170>
 800d57e:	2340      	movs	r3, #64	; 0x40
 800d580:	1b40      	subs	r0, r0, r5
 800d582:	fa03 f000 	lsl.w	r0, r3, r0
 800d586:	9b04      	ldr	r3, [sp, #16]
 800d588:	4303      	orrs	r3, r0
 800d58a:	f108 0801 	add.w	r8, r8, #1
 800d58e:	9304      	str	r3, [sp, #16]
 800d590:	f898 1000 	ldrb.w	r1, [r8]
 800d594:	482a      	ldr	r0, [pc, #168]	; (800d640 <_vfiprintf_r+0x220>)
 800d596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d59a:	2206      	movs	r2, #6
 800d59c:	f108 0701 	add.w	r7, r8, #1
 800d5a0:	f7f2 fe36 	bl	8000210 <memchr>
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	d037      	beq.n	800d618 <_vfiprintf_r+0x1f8>
 800d5a8:	4b26      	ldr	r3, [pc, #152]	; (800d644 <_vfiprintf_r+0x224>)
 800d5aa:	bb1b      	cbnz	r3, 800d5f4 <_vfiprintf_r+0x1d4>
 800d5ac:	9b03      	ldr	r3, [sp, #12]
 800d5ae:	3307      	adds	r3, #7
 800d5b0:	f023 0307 	bic.w	r3, r3, #7
 800d5b4:	3308      	adds	r3, #8
 800d5b6:	9303      	str	r3, [sp, #12]
 800d5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5ba:	444b      	add	r3, r9
 800d5bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d5be:	e750      	b.n	800d462 <_vfiprintf_r+0x42>
 800d5c0:	fb05 3202 	mla	r2, r5, r2, r3
 800d5c4:	2001      	movs	r0, #1
 800d5c6:	4688      	mov	r8, r1
 800d5c8:	e78a      	b.n	800d4e0 <_vfiprintf_r+0xc0>
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	f108 0801 	add.w	r8, r8, #1
 800d5d0:	9305      	str	r3, [sp, #20]
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	250a      	movs	r5, #10
 800d5d6:	4640      	mov	r0, r8
 800d5d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5dc:	3a30      	subs	r2, #48	; 0x30
 800d5de:	2a09      	cmp	r2, #9
 800d5e0:	d903      	bls.n	800d5ea <_vfiprintf_r+0x1ca>
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d0c3      	beq.n	800d56e <_vfiprintf_r+0x14e>
 800d5e6:	9105      	str	r1, [sp, #20]
 800d5e8:	e7c1      	b.n	800d56e <_vfiprintf_r+0x14e>
 800d5ea:	fb05 2101 	mla	r1, r5, r1, r2
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	4680      	mov	r8, r0
 800d5f2:	e7f0      	b.n	800d5d6 <_vfiprintf_r+0x1b6>
 800d5f4:	ab03      	add	r3, sp, #12
 800d5f6:	9300      	str	r3, [sp, #0]
 800d5f8:	4622      	mov	r2, r4
 800d5fa:	4b13      	ldr	r3, [pc, #76]	; (800d648 <_vfiprintf_r+0x228>)
 800d5fc:	a904      	add	r1, sp, #16
 800d5fe:	4630      	mov	r0, r6
 800d600:	f7fb ff26 	bl	8009450 <_printf_float>
 800d604:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d608:	4681      	mov	r9, r0
 800d60a:	d1d5      	bne.n	800d5b8 <_vfiprintf_r+0x198>
 800d60c:	89a3      	ldrh	r3, [r4, #12]
 800d60e:	065b      	lsls	r3, r3, #25
 800d610:	f53f af7e 	bmi.w	800d510 <_vfiprintf_r+0xf0>
 800d614:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d616:	e77d      	b.n	800d514 <_vfiprintf_r+0xf4>
 800d618:	ab03      	add	r3, sp, #12
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	4622      	mov	r2, r4
 800d61e:	4b0a      	ldr	r3, [pc, #40]	; (800d648 <_vfiprintf_r+0x228>)
 800d620:	a904      	add	r1, sp, #16
 800d622:	4630      	mov	r0, r6
 800d624:	f7fc f9ca 	bl	80099bc <_printf_i>
 800d628:	e7ec      	b.n	800d604 <_vfiprintf_r+0x1e4>
 800d62a:	bf00      	nop
 800d62c:	0800dd88 	.word	0x0800dd88
 800d630:	0800ded4 	.word	0x0800ded4
 800d634:	0800dda8 	.word	0x0800dda8
 800d638:	0800dd68 	.word	0x0800dd68
 800d63c:	0800deda 	.word	0x0800deda
 800d640:	0800dede 	.word	0x0800dede
 800d644:	08009451 	.word	0x08009451
 800d648:	0800d3fb 	.word	0x0800d3fb

0800d64c <_sbrk_r>:
 800d64c:	b538      	push	{r3, r4, r5, lr}
 800d64e:	4c06      	ldr	r4, [pc, #24]	; (800d668 <_sbrk_r+0x1c>)
 800d650:	2300      	movs	r3, #0
 800d652:	4605      	mov	r5, r0
 800d654:	4608      	mov	r0, r1
 800d656:	6023      	str	r3, [r4, #0]
 800d658:	f7f4 fd62 	bl	8002120 <_sbrk>
 800d65c:	1c43      	adds	r3, r0, #1
 800d65e:	d102      	bne.n	800d666 <_sbrk_r+0x1a>
 800d660:	6823      	ldr	r3, [r4, #0]
 800d662:	b103      	cbz	r3, 800d666 <_sbrk_r+0x1a>
 800d664:	602b      	str	r3, [r5, #0]
 800d666:	bd38      	pop	{r3, r4, r5, pc}
 800d668:	20000e7c 	.word	0x20000e7c

0800d66c <__sread>:
 800d66c:	b510      	push	{r4, lr}
 800d66e:	460c      	mov	r4, r1
 800d670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d674:	f000 f8f4 	bl	800d860 <_read_r>
 800d678:	2800      	cmp	r0, #0
 800d67a:	bfab      	itete	ge
 800d67c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d67e:	89a3      	ldrhlt	r3, [r4, #12]
 800d680:	181b      	addge	r3, r3, r0
 800d682:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d686:	bfac      	ite	ge
 800d688:	6563      	strge	r3, [r4, #84]	; 0x54
 800d68a:	81a3      	strhlt	r3, [r4, #12]
 800d68c:	bd10      	pop	{r4, pc}

0800d68e <__swrite>:
 800d68e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d692:	461f      	mov	r7, r3
 800d694:	898b      	ldrh	r3, [r1, #12]
 800d696:	05db      	lsls	r3, r3, #23
 800d698:	4605      	mov	r5, r0
 800d69a:	460c      	mov	r4, r1
 800d69c:	4616      	mov	r6, r2
 800d69e:	d505      	bpl.n	800d6ac <__swrite+0x1e>
 800d6a0:	2302      	movs	r3, #2
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6a8:	f000 f886 	bl	800d7b8 <_lseek_r>
 800d6ac:	89a3      	ldrh	r3, [r4, #12]
 800d6ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d6b6:	81a3      	strh	r3, [r4, #12]
 800d6b8:	4632      	mov	r2, r6
 800d6ba:	463b      	mov	r3, r7
 800d6bc:	4628      	mov	r0, r5
 800d6be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c2:	f000 b835 	b.w	800d730 <_write_r>

0800d6c6 <__sseek>:
 800d6c6:	b510      	push	{r4, lr}
 800d6c8:	460c      	mov	r4, r1
 800d6ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6ce:	f000 f873 	bl	800d7b8 <_lseek_r>
 800d6d2:	1c43      	adds	r3, r0, #1
 800d6d4:	89a3      	ldrh	r3, [r4, #12]
 800d6d6:	bf15      	itete	ne
 800d6d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d6da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d6de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d6e2:	81a3      	strheq	r3, [r4, #12]
 800d6e4:	bf18      	it	ne
 800d6e6:	81a3      	strhne	r3, [r4, #12]
 800d6e8:	bd10      	pop	{r4, pc}

0800d6ea <__sclose>:
 800d6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6ee:	f000 b831 	b.w	800d754 <_close_r>

0800d6f2 <strncmp>:
 800d6f2:	b510      	push	{r4, lr}
 800d6f4:	b16a      	cbz	r2, 800d712 <strncmp+0x20>
 800d6f6:	3901      	subs	r1, #1
 800d6f8:	1884      	adds	r4, r0, r2
 800d6fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d6fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d702:	4293      	cmp	r3, r2
 800d704:	d103      	bne.n	800d70e <strncmp+0x1c>
 800d706:	42a0      	cmp	r0, r4
 800d708:	d001      	beq.n	800d70e <strncmp+0x1c>
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d1f5      	bne.n	800d6fa <strncmp+0x8>
 800d70e:	1a98      	subs	r0, r3, r2
 800d710:	bd10      	pop	{r4, pc}
 800d712:	4610      	mov	r0, r2
 800d714:	e7fc      	b.n	800d710 <strncmp+0x1e>

0800d716 <__ascii_wctomb>:
 800d716:	b149      	cbz	r1, 800d72c <__ascii_wctomb+0x16>
 800d718:	2aff      	cmp	r2, #255	; 0xff
 800d71a:	bf85      	ittet	hi
 800d71c:	238a      	movhi	r3, #138	; 0x8a
 800d71e:	6003      	strhi	r3, [r0, #0]
 800d720:	700a      	strbls	r2, [r1, #0]
 800d722:	f04f 30ff 	movhi.w	r0, #4294967295
 800d726:	bf98      	it	ls
 800d728:	2001      	movls	r0, #1
 800d72a:	4770      	bx	lr
 800d72c:	4608      	mov	r0, r1
 800d72e:	4770      	bx	lr

0800d730 <_write_r>:
 800d730:	b538      	push	{r3, r4, r5, lr}
 800d732:	4c07      	ldr	r4, [pc, #28]	; (800d750 <_write_r+0x20>)
 800d734:	4605      	mov	r5, r0
 800d736:	4608      	mov	r0, r1
 800d738:	4611      	mov	r1, r2
 800d73a:	2200      	movs	r2, #0
 800d73c:	6022      	str	r2, [r4, #0]
 800d73e:	461a      	mov	r2, r3
 800d740:	f7f4 fc9e 	bl	8002080 <_write>
 800d744:	1c43      	adds	r3, r0, #1
 800d746:	d102      	bne.n	800d74e <_write_r+0x1e>
 800d748:	6823      	ldr	r3, [r4, #0]
 800d74a:	b103      	cbz	r3, 800d74e <_write_r+0x1e>
 800d74c:	602b      	str	r3, [r5, #0]
 800d74e:	bd38      	pop	{r3, r4, r5, pc}
 800d750:	20000e7c 	.word	0x20000e7c

0800d754 <_close_r>:
 800d754:	b538      	push	{r3, r4, r5, lr}
 800d756:	4c06      	ldr	r4, [pc, #24]	; (800d770 <_close_r+0x1c>)
 800d758:	2300      	movs	r3, #0
 800d75a:	4605      	mov	r5, r0
 800d75c:	4608      	mov	r0, r1
 800d75e:	6023      	str	r3, [r4, #0]
 800d760:	f7f4 fcaa 	bl	80020b8 <_close>
 800d764:	1c43      	adds	r3, r0, #1
 800d766:	d102      	bne.n	800d76e <_close_r+0x1a>
 800d768:	6823      	ldr	r3, [r4, #0]
 800d76a:	b103      	cbz	r3, 800d76e <_close_r+0x1a>
 800d76c:	602b      	str	r3, [r5, #0]
 800d76e:	bd38      	pop	{r3, r4, r5, pc}
 800d770:	20000e7c 	.word	0x20000e7c

0800d774 <_fstat_r>:
 800d774:	b538      	push	{r3, r4, r5, lr}
 800d776:	4c07      	ldr	r4, [pc, #28]	; (800d794 <_fstat_r+0x20>)
 800d778:	2300      	movs	r3, #0
 800d77a:	4605      	mov	r5, r0
 800d77c:	4608      	mov	r0, r1
 800d77e:	4611      	mov	r1, r2
 800d780:	6023      	str	r3, [r4, #0]
 800d782:	f7f4 fca5 	bl	80020d0 <_fstat>
 800d786:	1c43      	adds	r3, r0, #1
 800d788:	d102      	bne.n	800d790 <_fstat_r+0x1c>
 800d78a:	6823      	ldr	r3, [r4, #0]
 800d78c:	b103      	cbz	r3, 800d790 <_fstat_r+0x1c>
 800d78e:	602b      	str	r3, [r5, #0]
 800d790:	bd38      	pop	{r3, r4, r5, pc}
 800d792:	bf00      	nop
 800d794:	20000e7c 	.word	0x20000e7c

0800d798 <_isatty_r>:
 800d798:	b538      	push	{r3, r4, r5, lr}
 800d79a:	4c06      	ldr	r4, [pc, #24]	; (800d7b4 <_isatty_r+0x1c>)
 800d79c:	2300      	movs	r3, #0
 800d79e:	4605      	mov	r5, r0
 800d7a0:	4608      	mov	r0, r1
 800d7a2:	6023      	str	r3, [r4, #0]
 800d7a4:	f7f4 fca4 	bl	80020f0 <_isatty>
 800d7a8:	1c43      	adds	r3, r0, #1
 800d7aa:	d102      	bne.n	800d7b2 <_isatty_r+0x1a>
 800d7ac:	6823      	ldr	r3, [r4, #0]
 800d7ae:	b103      	cbz	r3, 800d7b2 <_isatty_r+0x1a>
 800d7b0:	602b      	str	r3, [r5, #0]
 800d7b2:	bd38      	pop	{r3, r4, r5, pc}
 800d7b4:	20000e7c 	.word	0x20000e7c

0800d7b8 <_lseek_r>:
 800d7b8:	b538      	push	{r3, r4, r5, lr}
 800d7ba:	4c07      	ldr	r4, [pc, #28]	; (800d7d8 <_lseek_r+0x20>)
 800d7bc:	4605      	mov	r5, r0
 800d7be:	4608      	mov	r0, r1
 800d7c0:	4611      	mov	r1, r2
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	6022      	str	r2, [r4, #0]
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	f7f4 fc9d 	bl	8002106 <_lseek>
 800d7cc:	1c43      	adds	r3, r0, #1
 800d7ce:	d102      	bne.n	800d7d6 <_lseek_r+0x1e>
 800d7d0:	6823      	ldr	r3, [r4, #0]
 800d7d2:	b103      	cbz	r3, 800d7d6 <_lseek_r+0x1e>
 800d7d4:	602b      	str	r3, [r5, #0]
 800d7d6:	bd38      	pop	{r3, r4, r5, pc}
 800d7d8:	20000e7c 	.word	0x20000e7c

0800d7dc <memmove>:
 800d7dc:	4288      	cmp	r0, r1
 800d7de:	b510      	push	{r4, lr}
 800d7e0:	eb01 0302 	add.w	r3, r1, r2
 800d7e4:	d807      	bhi.n	800d7f6 <memmove+0x1a>
 800d7e6:	1e42      	subs	r2, r0, #1
 800d7e8:	4299      	cmp	r1, r3
 800d7ea:	d00a      	beq.n	800d802 <memmove+0x26>
 800d7ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d7f4:	e7f8      	b.n	800d7e8 <memmove+0xc>
 800d7f6:	4283      	cmp	r3, r0
 800d7f8:	d9f5      	bls.n	800d7e6 <memmove+0xa>
 800d7fa:	1881      	adds	r1, r0, r2
 800d7fc:	1ad2      	subs	r2, r2, r3
 800d7fe:	42d3      	cmn	r3, r2
 800d800:	d100      	bne.n	800d804 <memmove+0x28>
 800d802:	bd10      	pop	{r4, pc}
 800d804:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d808:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d80c:	e7f7      	b.n	800d7fe <memmove+0x22>

0800d80e <__malloc_lock>:
 800d80e:	4770      	bx	lr

0800d810 <__malloc_unlock>:
 800d810:	4770      	bx	lr

0800d812 <_realloc_r>:
 800d812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d814:	4607      	mov	r7, r0
 800d816:	4614      	mov	r4, r2
 800d818:	460e      	mov	r6, r1
 800d81a:	b921      	cbnz	r1, 800d826 <_realloc_r+0x14>
 800d81c:	4611      	mov	r1, r2
 800d81e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d822:	f7ff bc27 	b.w	800d074 <_malloc_r>
 800d826:	b922      	cbnz	r2, 800d832 <_realloc_r+0x20>
 800d828:	f7ff fbd6 	bl	800cfd8 <_free_r>
 800d82c:	4625      	mov	r5, r4
 800d82e:	4628      	mov	r0, r5
 800d830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d832:	f000 f827 	bl	800d884 <_malloc_usable_size_r>
 800d836:	42a0      	cmp	r0, r4
 800d838:	d20f      	bcs.n	800d85a <_realloc_r+0x48>
 800d83a:	4621      	mov	r1, r4
 800d83c:	4638      	mov	r0, r7
 800d83e:	f7ff fc19 	bl	800d074 <_malloc_r>
 800d842:	4605      	mov	r5, r0
 800d844:	2800      	cmp	r0, #0
 800d846:	d0f2      	beq.n	800d82e <_realloc_r+0x1c>
 800d848:	4631      	mov	r1, r6
 800d84a:	4622      	mov	r2, r4
 800d84c:	f7fb fd58 	bl	8009300 <memcpy>
 800d850:	4631      	mov	r1, r6
 800d852:	4638      	mov	r0, r7
 800d854:	f7ff fbc0 	bl	800cfd8 <_free_r>
 800d858:	e7e9      	b.n	800d82e <_realloc_r+0x1c>
 800d85a:	4635      	mov	r5, r6
 800d85c:	e7e7      	b.n	800d82e <_realloc_r+0x1c>
	...

0800d860 <_read_r>:
 800d860:	b538      	push	{r3, r4, r5, lr}
 800d862:	4c07      	ldr	r4, [pc, #28]	; (800d880 <_read_r+0x20>)
 800d864:	4605      	mov	r5, r0
 800d866:	4608      	mov	r0, r1
 800d868:	4611      	mov	r1, r2
 800d86a:	2200      	movs	r2, #0
 800d86c:	6022      	str	r2, [r4, #0]
 800d86e:	461a      	mov	r2, r3
 800d870:	f7f3 ff2a 	bl	80016c8 <_read>
 800d874:	1c43      	adds	r3, r0, #1
 800d876:	d102      	bne.n	800d87e <_read_r+0x1e>
 800d878:	6823      	ldr	r3, [r4, #0]
 800d87a:	b103      	cbz	r3, 800d87e <_read_r+0x1e>
 800d87c:	602b      	str	r3, [r5, #0]
 800d87e:	bd38      	pop	{r3, r4, r5, pc}
 800d880:	20000e7c 	.word	0x20000e7c

0800d884 <_malloc_usable_size_r>:
 800d884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d888:	1f18      	subs	r0, r3, #4
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	bfbc      	itt	lt
 800d88e:	580b      	ldrlt	r3, [r1, r0]
 800d890:	18c0      	addlt	r0, r0, r3
 800d892:	4770      	bx	lr

0800d894 <_init>:
 800d894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d896:	bf00      	nop
 800d898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d89a:	bc08      	pop	{r3}
 800d89c:	469e      	mov	lr, r3
 800d89e:	4770      	bx	lr

0800d8a0 <_fini>:
 800d8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8a2:	bf00      	nop
 800d8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8a6:	bc08      	pop	{r3}
 800d8a8:	469e      	mov	lr, r3
 800d8aa:	4770      	bx	lr
